stages:
  - stage: BuildArtifact
    jobs:
      - job: Blobfuse2_Perf_Test
          strategy:
            matrix:
              UBN20-RESNET50-PERF:
                DistroVer: "Ubn20_PERF"
                AgentName: "UBN20-PERF"
                Description: "Blobfuse2 Perf Test"

          pool:
            name: "Blobfuse Pool"
            demands:
              - Agent.Name -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: MOUNT_DIR
            value: "/home/vsts/workv2/blob_mnt"
          - name: TEMP_DIR
            value: "/home/vsts/workv2/blobfuse2tmp"
          - name: BLOBFUSE2_CFG
            value: "/home/tamer/blobfuse2.yaml"
          - name: GOPATH
            value: "/home/vsts/workv2/go"
          - name: ROOT_DIR
            value: "/home/vsts/workv2/"
          - name: WORK_DIR
            value: "/home/vsts/workv2/go/src/azure-storage-fuse"

        steps:
          - checkout: none

          # Clone the repo
          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(ROOT_DIR)
      
            # Prestart cleanup
          - script: |
              sudo fusermount -u $(MOUNT_DIR)
              sudo kill -9 `pidof blobfuse2`
              sudo rm -rf $(ROOT_DIR)
            displayName: 'PreBuild Cleanup'

          # Create directory structure
          - script: |
              sudo rm -rf $(ROOT_DIR)
              sudo mkdir -p $(ROOT_DIR)
              sudo chown -R `whoami` $(ROOT_DIR)
              chmod 777 $(ROOT_DIR)
              mkdir -p $(ROOT_DIR)/go/src
            displayName: 'Create Directory Structure'

          # Checkout the branch
          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(WORK_DIR)

          # -------------------------------------------------------
          # Pull and build the code
          - template: 'azure-pipeline-templates/build.yml'
            parameters:
              working_directory: $(WORK_DIR)
              root_dir: $(ROOT_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
              gopath: $(GOPATH)
              container: $(containerName)

          - script: |
              cd $(WORK_DIR)
              $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_key.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
            displayName: "Create Perf Config File"
            env:
              NIGHTLY_STO_ACC_NAME: $(PERF_WEEKLY_STO_BLOB_ACC_NAME)
              NIGHTLY_STO_ACC_KEY: $(PERF_WEEKLY_STO_BLOB_ACC_KEY)
              ACCOUNT_TYPE: 'block'
              ACCOUNT_ENDPOINT: 'https://$(PERF_WEEKLY_STO_BLOB_ACC_NAME).blob.core.windows.net'
            continueOnError: false

          - script:
            go run $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
            python3 resnet50_classify.py --dataset='($MOUNT_DIR)/data' --job='main'
          displayName: "Blobfuse2 ResNet50 on Main"

        # - script: |
        #     sudo fusermount -u ${MOUNT_DIR}
        #     sudo kill -9 `pidof blobfuse2` || true
        #   displayName: "Unmount Blobfuse2 Main Branch Run"

        #   - script:
        #     cd ~
        #     blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
        #     python3 resnet50_classify.py --data='($MOUNT_DIR)/data' --job-name='binary'
        #   displayName: "Blobfuse2 ResNet50 Binary"

          # Cleanup
          - template: 'azure-pipeline-templates/cleanup.yml'
            parameters:
              working_dir: $(WORK_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
          
          - script: |
              sudo rm -rf ${ROOT_DIR}
              pwd
              cd /`pwd | cut -d '/' -f 2,3,4,5`
              sudo rm -rf [0-9]
            displayName: 'Clean Agent Directories'
            condition: always() 