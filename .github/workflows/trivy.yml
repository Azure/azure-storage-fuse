# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: build

on:
  push:
    branches: [ "main", master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '40 1 * * 3'

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Build
    runs-on: "ubuntu-22.04"

    variables:
      - group: NightlyBlobFuse
      - name: root_dir
        value: '$(System.DefaultWorkingDirectory)'
      - name: work_dir
        value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
      
    steps:
      - name: Install GoLang
        uses: GoTool@0
        with:
          version: '1.16.2'
      
      - name: Checkout Code
        run: |
          git clone https://github.com/Azure/azure-storage-fuse
        workingDirectory: $(root_dir)
        
      - name: Checkout Branch
        run: |
          git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
        workingDirectory: $(work_dir)

      # get glibc version with which build is done
      - name: GLIBC Version
        run: |
          ldd --version

      #  # Create container for blobfuse2
      # - name: Build container
      #   run: |
      #     sudo apt-get install fuse3 libfuse3-dev -y
      #     chmod 777 *.sh
      #     ./dockerinstall.sh
      #     ./buildcontainer.sh
      #     export DOCK_TAG="azure-blobfuse2.`../blobfuse2 --version | cut -d " " -f 3`"
      #     docker save -o ./blobfuse2 $DOCK_TAG
      #   displayName: "Build container"
      #   workingDirectory: $(work_dir)/docker

      - name: Build an image from Dockerfile
        run: |
          export PUBLISH=true
          export REGISTRY=test
          export IMAGE_VERSION=latest
          export DOCKER_CLI_EXPERIMENTAL=enabled
          make container

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test/blob-csi:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,UNKNOWN'
