# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#ci trigger on every branch so that private branch owners know if they have broken the build
#ci trigger on PR only for the master branch
parameters:
- name: tag
  displayName: 'New Release Tag'
  type: string
  default: 'blobfuse-'

- name: post_release
  displayName: 'Post Release on Github'
  type: boolean
  default: false

- name: code_signing
  displayName: 'Send artifact for signing'
  type: boolean
  default: true

- name: fast_run
  displayName: 'Test Run'
  type: boolean
  default: false

# Do not trigger this pipeline automatically
trigger: none
pr: none

stages:
- stage: BuildArtifact
  jobs:
  - ${{ if eq(parameters.fast_run, false) }}:
    - job: Set_1

      # Define on what all OS we want to run this Pipeline
      strategy:
        matrix:
          Ubuntu-16:
            container_image: 'ubuntu-16.04'
            build_type: Release 
          Ubuntu-18:
            container_image: 'ubuntu-18.04' 
            build_type: Release 
          Ubuntu-20:
            container_image: 'ubuntu-20.04' 
            build_type: Release 
      pool:
        vmImage: $(container_image)

      steps:
        # Install all dependencies
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ -y
          displayName: "Basic Tools Setup"

        # Install libfuse
        - script: |
            sudo apt-get install libfuse-dev -y
          displayName: "libFuse Setup"

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"

        # Copy binaries required for the package
        - script: |
            cd ./build/
            make package
            mv ./blobfuse-*.*.*-Linux.deb ./`./blobfuse -v | tr ' ' '-'`-$(container_image)-x86_64.deb
            cp ./blobfuse-*.*.*.deb  $(Build.ArtifactStagingDirectory)/
          displayName: "Build Artifacts"

        # Publish the Artifacts
        - task: PublishBuildArtifacts@1
          inputs:
            artifactName: 'blobfuse'
          displayName: 'Publish Artifacts for blobfuse $(container_image)'
          condition: succeeded()

  # -------    Ubuntu Pipelines end here ------------------
  - ${{ if eq(parameters.fast_run, false) }}:
    - job: Set_2
      strategy:
        matrix:
          Debian-9.0:
            DistroVer: "Debian9.0"
            AgentName : "DEB 9.0"
            Description: "Debian Linux 9.0"
          Debian-10.0:
            DistroVer: "Debian10.0"
            AgentName : "DEB 10.0"
            Description: "Debian Linux 10.0 Gen 1"

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)
      
      variables:
        skipComponentGovernanceDetection: true

      steps:
        # Install all dependencies
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ -y
          displayName: "Basic Tools Setup"

        # Install libfuse
        - script: |
            sudo apt-get install libfuse-dev -y
          displayName: "libFuse Setup"

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"

        # Copy binaries required for the package
        - script: |
            cd ./build/
            make package
            mv ./blobfuse-*.*.*-Linux.deb ./`./blobfuse -v | tr ' ' '-'`-$(DistroVer)-x86_64.deb
            cp ./blobfuse-*.*.*.deb  $(Build.ArtifactStagingDirectory)/
            cd ..
          displayName: "Build Artifacts"

        # Publish the Artifacts
        - task: PublishBuildArtifacts@1
          inputs:
            artifactName: 'blobfuse'
          displayName: 'Publish Artifacts for blobfuse $(DistroVer)'
          condition: succeeded()

        - script: |
            pwd
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()

  # -------    Debain Pipelines end here ------------------
  - ${{ if eq(parameters.fast_run, false) }}:
    - job: Set_3
      strategy:
        matrix:
          CentOS-7.0:
            DistroVer: "CentOS-7.0"
            AgentName: "COS 7.0"
            Description: "CentOS Linux 7.0"
            
          CentOS-8.0:
            DistroVer: "CentOS-8.0"
            AgentName: "COS 8.0"
            Description: "CentOS Linux 8.0"

          Oracle-8.1:
            DistroVer: "Oracle-8.1"
            AgentName: "ORA 8.1"
            Description: "Oracle Linux 8.1 Gen 2"

          RHEL-7.5:
            DistroVer: "RHEL-7.5"
            AgentName : "RHEL 7.5"
            Description: "Red Hat Enterprise Linux 7.5"

          RHEL-7.8:
            DistroVer: "RHEL-7.8"
            AgentName : "RHEL 7.8"
            Description: "Red Hat Enterprise Linux 7.8"

          RHEL-8.1:
            DistroVer: "RHEL-8.1"
            AgentName: "RHEL 8.1"
            Description: "Red Hat Enterprise Linux 8.1"

          RHEL-8.2:
            DistroVer: "RHEL-8.2"
            AgentName: "RHEL 8.2"
            Description: "Red Hat Enterprise Linux 8.2"

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - name: WORK_DIR
        value: "/usr/pipeline/blobfuse"
      - name: ROOT_DIR
        value: "/usr/pipeline/blobfuse/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      steps:
        # DevOps checks for a specific git version and it fails on some distros
        # so instead of pipeline checking out the code, do it manually
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        # Install all dependencies
        - script: |
            sudo yum install git tar make cmake gcc gcc-c++ curl-devel gnutls-devel libuuid-devel boost-devel libgcrypt-devel rpm-build -y
          displayName: "Basic Tools Setup"

        # Install libfuse
        - script: |
            sudo yum install fuse-devel -y
          displayName: "libFuse Setup"

        # Prebuild cleanup
        - script: |
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            sudo rm -rf ~/rpmbuild
          displayName: "Cleanup old RPMS"
          workingDirectory: $(ROOT_DIR)

        # Generate the RPM
        - script: |
            cd blobfuse
            mkdir $(Build.ArtifactStagingDirectory)/$(DistroVer)
            ./generaterpm.sh -srcdir ../build -distrover $(DistroVer)
            mv ./blobfuse-*.*.*.rpm ./`../build/blobfuse -v | tr ' ' '-'`-$(DistroVer)-x86_64.rpm
            cp ./blobfuse-*-*.rpm  $(Build.ArtifactStagingDirectory)/
          displayName: "Build the RPM"
          workingDirectory: $(ROOT_DIR)

        # Publish the Artifacts
        - task: PublishBuildArtifacts@1
          inputs:
            artifactName: 'blobfuse'
          displayName: 'Publish Artifacts for blobfuse $(DistroVer)'
          condition: succeeded()
        
        # Cleanup work directory of self hosted agent
        - script: |
            sudo rm -rf $(WORK_DIR)
            sudo rm -rf ~/rpmbuild
          displayName: 'Cleanup temp directories'
          condition: succeededOrFailed()

        - script: |
            pwd
            #sudo rm -rf $(Agent.BuildDirectory)
            #sudo rm -rf $(Build.SourcesDirectory)
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()

  # -------    RHEL Pipelines end here ------------------
  - ${{ if eq(parameters.fast_run, false) }}:
    - job: Set_4
      strategy:
        matrix:
          SUSE-15G2:
            DistroVer: "Suse-15Gen2"
            AgentName : "SUSE 15G2"
            Description: "SUSE Ent Linux 15-SP1-Gen2"

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - name: WORK_DIR
        value: "/home/pipeline/blobfuse"
      - name: ROOT_DIR
        value: "/home/pipeline/blobfuse/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      steps:
        # DevOps checks for a specific git version and it fails on some distros
        # so instead of pipeline checking out the code, do it manually
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        # Install all dependencies
        #- script: |
        #    #sudo zypper in <>
        #    sudo zypper -n update git tar make cmake gcc gcc-c++ curl-devel gnutls-devel libuuid-devel boost-devel libboost*devel libgcrypt-devel rpm-build
        #  displayName: "Basic Tools Setup"

        # Install libfuse
        #- script: |
        #    sudo zypper -n update fuse-devel
        #  displayName: "libFuse Setup"

        # Prebuild cleanup
        - script: |
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            sudo rm -rf ~/rpmbuild
          displayName: "Cleanup old RPMS"
          workingDirectory: $(ROOT_DIR)

        # Generate the RPM
        - script: |
            cd blobfuse
            mkdir $(Build.ArtifactStagingDirectory)/$(DistroVer)
            ./generaterpm.sh -srcdir ../build -distrover $(DistroVer)
            mv ./blobfuse-*.*.*.rpm ./`../build/blobfuse -v | tr ' ' '-'`-$(DistroVer)-x86_64.rpm
            cp ./blobfuse-*-*.rpm  $(Build.ArtifactStagingDirectory)/
          displayName: "Build the RPM"
          workingDirectory: $(ROOT_DIR)

        # Publish the Artifacts
        - task: PublishBuildArtifacts@1
          inputs:
            artifactName: 'blobfuse'
          displayName: 'Publish Artifacts for blobfuse $(DistroVer)'
          condition: succeeded()
        
        # Cleanup work directory of self hosted agent
        - script: |
            sudo rm -rf $(WORK_DIR)
            sudo rm -rf ~/rpmbuild
          displayName: 'Cleanup temp directories'
          condition: succeededOrFailed()

        - script: |
            pwd
            #sudo rm -rf $(Agent.BuildDirectory)
            #sudo rm -rf $(Build.SourcesDirectory)
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()

  # -------    SUSE Pipelines end here ------------------

  - ${{ if eq(parameters.fast_run, true) }}:
    - job: TestSet
      strategy:
        matrix:
          RHEL-7.8:
            DistroVer: "RHEL-7.8"
            AgentName : "RHEL 7.8"
            Description: "Red Hat Enterprise Linux 7.8"
          RHEL-7.5:
            DistroVer: "RHEL-7.5"
            AgentName : "RHEL 7.5"
            Description: "Red Hat Enterprise Linux 7.5"

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - name: WORK_DIR
        value: "/usr/pipeline/blobfuse"
      - name: ROOT_DIR
        value: "/usr/pipeline/blobfuse/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      steps:
        # DevOps checks for a specific git version and it fails on some distros
        # so instead of pipeline checking out the code, do it manually
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        # Install all dependencies
        - script: |
            sudo yum install git tar make cmake gcc gcc-c++ curl-devel gnutls-devel libuuid-devel boost-devel libgcrypt-devel rpm-build -y
          displayName: "Basic Tools Setup"

        # Install libfuse
        - script: |
            sudo yum install fuse-devel -y
          displayName: "libFuse Setup"

        # Prebuild cleanup
        - script: |
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            sudo rm -rf ~/rpmbuild
          displayName: "Cleanup old RPMS"
          workingDirectory: $(ROOT_DIR)

        # Generate the RPM
        - script: |
            cd blobfuse
            mkdir $(Build.ArtifactStagingDirectory)/$(DistroVer)
            ./generaterpm.sh -srcdir ../build -distrover $(DistroVer)
            mv ./blobfuse-*.*.*.rpm ./`../build/blobfuse -v | tr ' ' '-'`-$(DistroVer)-x86_64.rpm
            cp ./blobfuse-*-*.rpm  $(Build.ArtifactStagingDirectory)/
          displayName: "Build the RPM"
          workingDirectory: $(ROOT_DIR)

        # Publish the Artifacts
        - task: PublishBuildArtifacts@1
          inputs:
            artifactName: 'blobfuse'
          displayName: 'Publish Artifacts for blobfuse $(DistroVer)'
          condition: succeeded()
        
        # Cleanup work directory of self hosted agent
        - script: |
            sudo rm -rf $(WORK_DIR)
            sudo rm -rf ~/rpmbuild
          displayName: 'Cleanup temp directories'
          condition: succeededOrFailed()

        - script: |
            pwd
            #sudo rm -rf $(Agent.BuildDirectory)
            #sudo rm -rf $(Build.SourcesDirectory)
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()

  # -------    Test Pipelines end here ------------------


- stage: ReleaseArtifact
  dependsOn: BuildArtifact
  condition: succeeded('BuildArtifact') 
  jobs:
  - job: ReleaseBlobfuse
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - checkout: none

      - script: |
          echo ${{ parameters.tag }}
        displayName: "Tag Name"

      - task: DownloadBuildArtifacts@0
        displayName: 'Download Build Artifacts'
        inputs:
          artifactName: 'blobfuse'
          downloadPath: $(Build.ArtifactStagingDirectory)
      
      - script: |
          sudo ls -lRt $(Build.ArtifactStagingDirectory)
        displayName: "List the artifacts"
      
      
      - ${{ if eq(parameters.code_signing, true) }}:
        # Standar way of code signing
        - task: EsrpCodeSigning@1
          inputs:
            ConnectedServiceName: 'ESRP Code signing blobfuse'
            FolderPath: '$(Build.ArtifactStagingDirectory)/blobfuse/'
            Pattern: '*.rpm, *.deb'
            OpusName: 'blobfuse'
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'

      - ${{ if eq(parameters.code_signing, true) }}:
        # Inline code signing trial
        - task: EsrpCodeSigning@1
          condition: succeededOrFailed()
          inputs:
            ConnectedServiceName: 'ESRP Code signing blobfuse'
            FolderPath: '$(Build.ArtifactStagingDirectory)/blobfuse/'
            Pattern: '*.rpm, *.deb'
            signConfigType: 'inlineSignParams'
            
            inlineOperation: |
              [
                {
                  "keyCode": "CP-230012​",  
                  "operationSetCode": "SigntoolSign",
                  "parameters": [
                    {
                      "parameterName": "OpusName",
                      "parameterValue": "blobfuse"
                    },
                    {
                      "parameterName": "OpusInfo",
                      "parameterValue": "http://www.microsoft.com"
                    },
                    {
                      "parameterName": "PageHash",
                      "parameterValue": "/NPH"
                    },
                    {
                      "parameterName": "FileDigest",
                      "parameterValue": "/fd sha256"
                    },
                    {
                      "parameterName": "TimeStamp",
                      "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    }
                  ],
                  "toolName": "signtool.exe",
                  "toolVersion": "6.2.9304.0"
                }
              ]
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'
            VerboseLogin: true'

      

      - ${{ if eq(parameters.post_release, true) }}:
        - task: GitHubRelease@1
          inputs:
            #gitHubConnection: 'vibhansa-msft-git'
            #repositoryName: 'vibhansa-msft/azure-storage-fuse'
            gitHubConnection: 'blobfuse-git-rel'
            repositoryName: 'Azure/azure-storage-fuse'
            action: 'edit'
            
            target: '$(Build.SourceVersion)'
            tagSource: 'userSpecifiedTag'

            # Modify this before every new release
            title: ${{ parameters.tag }}
            tag: ${{ parameters.tag }}
            
            assets: |
              $(Build.ArtifactStagingDirectory)/blobfuse/*.rpm
              $(Build.ArtifactStagingDirectory)/blobfuse/*.deb

            changeLogCompareToRelease: 'lastFullRelease'
            changeLogType: 'commitBased'
            isDraft: false
            assetUploadMode: replace
