# Blobfuse2 Nightly Build Pipeline

schedules:
  # Cron string < minute hour day-of-month month day-of-week>
  #             * means all, for example '*' in day of month means everyday
  # Run only on main branch
  # 'always' controls whether to run only if there is a change or not
  # Run this pipeline every 15:00 time
  - cron: '0 15 * * *'
    displayName: 'Daily midnight Blobfuse2 build'
    branches:
      include:
        - main

parameters:
  - name: base_test
    # Quick test or an exhaustive test
    displayName: 'Basic test'
    type: boolean
    default: true

  - name: exhaustive_test
    # Quick test or an exhaustive test
    displayName: 'Run E2E tests on all distros'
    type: boolean
    default: true
  
  - name: proxy_test
  # Proxy tests
    displayName: 'Proxy test'
    type: boolean
    default: true

  - name: msi_test
    # MSI auth based test suites to be run or not
    displayName: 'MSI test'
    type: boolean
    default: true

  - name: quick_stress
    displayName: 'Quick Stress'
    type: boolean
    default: true

  - name: verbose_log
    displayName: 'Verbose Log'
    type: boolean
    default: false


stages:
  - ${{ if eq(parameters.base_test, true) }}:
    - stage: BuildAndTest
      jobs:
        # Ubuntu Tests for Block account
        - job: Set_1
          timeoutInMinutes: 300

          strategy:
            matrix:
              Ubuntu-20-BlockBlob:
                AgentName: 'blobfuse-ubuntu20'
                distro: 'ubuntu'
                distro_version: 'ubuntu_20'
                poolName: 'blobfuse-ubuntu-pool'
                fuselib: 'libfuse-dev'
                tags: 'fuse2'
              Ubuntu-22-BlockBlob:
                AgentName: 'blobfuse-ubuntu22'
                distro: 'ubuntu'
                distro_version: 'ubuntu_22_x86'
                poolName: 'blobfuse-ubuntu-pool'
                fuselib: 'libfuse3-dev'
                tags: 'fuse3'
              Ubuntu-22-ARM64-BlockBlob:
                AgentName: 'blobfuse-ubn22-arm64'
                distro: 'ubuntu'
                distro_version: 'ubuntu_22_arm64'
                poolName: 'blobfuse-ubn-arm64-pool'
                fuselib: 'libfuse3-dev'
                tags: 'fuse3'

          pool:
            name: $(poolName)
            demands:
              - ImageOverride -equals $(AgentName)

          variables:
            - group: NightlyBlobFuse
            - name: MOUNT_DIR
              value: '$(Pipeline.Workspace)/blob_mnt'
            - name: TEMP_DIR
              value: '$(Pipeline.Workspace)/blobfuse2_tmp'
            - name: BLOBFUSE2_CFG
              value: '$(Pipeline.Workspace)/blobfuse2.yaml'
            - name: BLOBFUSE2_SAS_CFG
              value: '$(Pipeline.Workspace)/blobfuse2_sas_config.yaml'
            - name: BLOBFUSE2_AZCLI_CFG
              value: '$(Pipeline.Workspace)/blobfuse2_azcli_config.yaml'
            - name: BLOBFUSE2_ADLS_CFG
              value: '$(Pipeline.Workspace)/blobfuse2.adls.yaml'
            - name: BLOBFUSE2_GTEST_CFG
              value: '$(Pipeline.Workspace)/connection.yaml'
            - name: BLOBFUSE2_AZURITE_CFG
              value: '$(Pipeline.Workspace)/blobfuse2_azurite_config.yaml'
            - name: BLOBFUSE2_STRESS_DIR
              value: '$(Pipeline.Workspace)/blobfuse2_stress'
            - name: DECODE_PERCENTS
              value: false
            - name: GOPATH
              value: '$(Pipeline.Workspace)/go'
            - name: ROOT_DIR
              value: '$(System.DefaultWorkingDirectory)' 
            - name: WORK_DIR
              value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'

          steps:
            # -------------------------------------------------------
            # Build the code and create the containers.
            - template: 'azure-pipeline-templates/build.yml'
              parameters:
                skip_azcli: "false"

            # -------------------------------------------------------
            - template: 'azure-pipeline-templates/invalid-command-tests.yml'


            - ${{ if eq(parameters.exhaustive_test, true) }}:    
              - template: 'azure-pipeline-templates/verbose-tests.yml'
                parameters:
                  service: 'BlockBlob'
                  account_type: 'block'
                  account_endpoint: 'https://$(BF2_BLK_ACC_NAME).blob.core.windows.net' 
                  adls: false
                  account_name: $(BF2_BLK_ACC_NAME)
                  account_key: $(BF2_BLK_ACC_KEY)
                  account_sas: $(BF2_BLK_ACC_SAS)
                  client_id: $(AZTEST_CLIENT)
                  tenant_id: $(AZTEST_TENANT)
                  client_secret: $(AZTEST_SECRET)
                  config: $(BLOBFUSE2_CFG)
                  stress_dir: $(BLOBFUSE2_STRESS_DIR)
                  huge_container: 'million-files'
                  quick_stress: ${{ parameters.quick_stress }}
                  test_key_credential: true 
                  test_sas_credential: true
                  test_azcli_credential: true
                  test_azurite: false
                  sas_credential_config: $(BLOBFUSE2_SAS_CFG)
                  azcli_credential_config: $(BLOBFUSE2_AZCLI_CFG)
                  azurite_config: $(BLOBFUSE2_AZURITE_CFG)
                  distro_name: $(AgentName)
                  verbose_log: ${{ parameters.verbose_log }}

            - template: azure-pipeline-templates/cleanup.yml
              parameters:
                unmount: true
                delete_containers: true

        # Ubuntu Tests for ADLS account
        - job: Set_2
          timeoutInMinutes: 300

          strategy:
            matrix:
              Ubuntu-20-ADLS:
                AgentName: 'blobfuse-ubuntu20'
                distro: 'ubuntu'
                distro_version: 'ubuntu_20'
                poolName: 'blobfuse-ubuntu-pool'
                fuselib: 'libfuse-dev'
                tags: 'fuse2'
              Ubuntu-22-ADLS:
                AgentName: 'blobfuse-ubuntu22'
                distro: 'ubuntu'
                distro_version: 'ubuntu_22_x86'
                poolName: 'blobfuse-ubuntu-pool'
                fuselib: 'libfuse3-dev'
                tags: 'fuse3'
              Ubuntu-22-ARM64-ADLS:
                AgentName: 'blobfuse-ubn22-arm64'
                distro: 'ubuntu'
                distro_version: 'ubuntu_22_arm64'
                poolName: 'blobfuse-ubn-arm64-pool'
                fuselib: 'libfuse3-dev'
                tags: 'fuse3'

          pool:
            name: $(poolName)
            demands:
              - ImageOverride -equals $(AgentName)

          variables:
            - group: NightlyBlobFuse
            - name: MOUNT_DIR
              value: '$(Pipeline.Workspace)/blob_mnt'
            - name: TEMP_DIR
              value: '$(Pipeline.Workspace)/blobfuse2_tmp'
            - name: BLOBFUSE2_CFG
              value: '$(Pipeline.Workspace)/blobfuse2.yaml'
            - name: BLOBFUSE2_SAS_CFG
              value: '$(Pipeline.Workspace)/blobfuse2_sas_config.yaml'
            - name: BLOBFUSE2_AZCLI_CFG
              value: '$(Pipeline.Workspace)/blobfuse2_azcli_config.yaml'
            - name: BLOBFUSE2_ADLS_CFG
              value: '$(Pipeline.Workspace)/blobfuse2.adls.yaml'
            - name: BLOBFUSE2_GTEST_CFG
              value: '$(Pipeline.Workspace)/connection.yaml'
            - name: BLOBFUSE2_AZURITE_CFG
              value: '$(Pipeline.Workspace)/blobfuse2_azurite_config.yaml'
            - name: BLOBFUSE2_STRESS_DIR
              value: '$(Pipeline.Workspace)/blobfuse2_stress'
            - name: DECODE_PERCENTS
              value: false
            - name: GOPATH
              value: '$(Pipeline.Workspace)/go'
            - name: ROOT_DIR
              value: '$(System.DefaultWorkingDirectory)' 
            - name: WORK_DIR
              value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'

          steps:
            # -------------------------------------------------------
            # Pull and build the code, Create the Containers in storage account
            - template: 'azure-pipeline-templates/build.yml'
              parameters:
                skip_ut: true # Skip UT because Block Blob set runs it
                skip_azcli: "false"

            # -------------------------------------------------------
            - ${{ if eq(parameters.exhaustive_test, true) }}:    
              - template: 'azure-pipeline-templates/verbose-tests.yml'
                parameters:
                  service: 'ADLS'
                  account_type: 'adls'
                  account_endpoint: 'https://$(BF2_ADLS_ACC_NAME).dfs.core.windows.net' 
                  adls: true
                  account_name: $(BF2_ADLS_ACC_NAME)
                  account_key: $(BF2_ADLS_ACC_KEY)
                  account_sas: $(GENERATED_ADLS_CONTAINER_SAS)
                  client_id: $(AZTEST_CLIENT)
                  tenant_id: $(AZTEST_TENANT)
                  client_secret: $(AZTEST_SECRET)
                  config: $(BLOBFUSE2_ADLS_CFG)
                  stress_dir: $(BLOBFUSE2_STRESS_DIR)
                  huge_container: 'million-files'
                  quick_stress: ${{ parameters.quick_stress }}
                  test_key_credential: true
                  test_sas_credential: true
                  test_azcli_credential: true
                  test_azurite: false
                  sas_credential_config: $(BLOBFUSE2_SAS_CFG)
                  azcli_credential_config: $(BLOBFUSE2_AZCLI_CFG)
                  azurite_config: $(BLOBFUSE2_AZURITE_CFG)
                  distro_name: $(AgentName)
                  verbose_log: ${{ parameters.verbose_log }}

            - template: azure-pipeline-templates/cleanup.yml
              parameters:
                unmount: true
                delete_containers: true
                

        - ${{ if eq(parameters.proxy_test, true) }}:
            # -----------------------------------------------------------
            # Ubuntu-20.04 Proxy tests
          - job: Set_3
            timeoutInMinutes: 300
            strategy:
              matrix:
                Ubuntu-20-Proxy:
                  AgentName: 'blobfuse-ubuntu20'
                  distro: 'ubuntu'
                  distro_version: 'ubuntu_20'

            pool:
              name: "blobfuse-ubuntu-pool"
              demands:
                - ImageOverride -equals $(AgentName)

            variables:
              - group: NightlyBlobFuse
              - name: MOUNT_DIR
                value: '$(Pipeline.Workspace)/blob_mnt'
              - name: TEMP_DIR
                value: '$(Pipeline.Workspace)/blobfuse2_tmp'
              - name: BLOBFUSE2_CFG
                value: '$(Pipeline.Workspace)/blobfuse2_proxy.yaml'
              - name: BLOBFUSE2_ADLS_CFG
                value: '$(Pipeline.Workspace)/blobfuse2_proxy.adls.yaml'
              - name: DECODE_PERCENTS
                value: false
              - name: GOPATH
                value: '$(Pipeline.Workspace)/go'
              - name: ROOT_DIR
                value: '$(System.DefaultWorkingDirectory)' 
              - name: WORK_DIR
                value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'

            steps:
              # -------------------------------------------------------
              # Pull, build and unit test the code, create the containers.
              - template: 'azure-pipeline-templates/build.yml'
                parameters:
                  proxy_address: "127.0.0.1:8080"
                  skip_ut: true

              # -------------------------------------------------------
              - script: |
                  cd $(WORK_DIR)
                  $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_key_proxy.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
                displayName: 'Create Config File'
                env:
                  STO_ACC_NAME: $(BF2_BLK_ACC_NAME)
                  STO_ACC_KEY: $(BF2_BLK_ACC_KEY)
                  STO_ACC_TYPE: 'block'
                  STO_ACC_ENDPOINT: 'https://$(BF2_BLK_ACC_NAME).blob.core.windows.net'
                  VERBOSE_LOG: ${{ parameters.verbose_log }}
                continueOnError: false

              - script:
                  cat $(BLOBFUSE2_CFG)
                displayName: "Print config file"

              # --------------------------------------------------
              # End to End tests
              - template: 'azure-pipeline-templates/e2e-tests.yml'
                parameters:
                  idstring: 'BlockBlob with Proxy and Key Credentials'
                  distro_name: $(AgentName)
                  adls: false
                  artifact_name: 'blockblob_proxy_key.txt'
                  verbose_log: ${{ parameters.verbose_log }}
                  mountStep:
                    script: |
                      $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG) --default-working-dir=$(WORK_DIR)
                    displayName: 'E2E TEST: Mount'
                    timeoutInMinutes: 3
                    continueOnError: false

              # --------------------------------------------------
              - script: |
                  cd $(WORK_DIR)
                  $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_key_proxy.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_ADLS_CFG)
                displayName: 'Create ADLS Config File'
                env:
                  STO_ACC_NAME: $(BF2_ADLS_ACC_NAME)
                  STO_ACC_KEY: $(BF2_ADLS_ACC_KEY)
                  STO_ACC_TYPE: 'adls'
                  STO_ACC_ENDPOINT: 'https://$(BF2_ADLS_ACC_NAME).dfs.core.windows.net'
                  VERBOSE_LOG: ${{ parameters.verbose_log }}
                continueOnError: false

              - script:
                  cat $(BLOBFUSE2_ADLS_CFG)
                displayName: "Print ADLS config file"

              - template: 'azure-pipeline-templates/e2e-tests.yml'
                parameters:
                  idstring: 'ADLS with Proxy and Key Credentials'
                  distro_name: $(AgentName)
                  adls: true
                  artifact_name: 'adls_proxy_key.txt'
                  verbose_log: ${{ parameters.verbose_log }}
                  mountStep:
                    script: |
                      $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_ADLS_CFG) --default-working-dir=$(WORK_DIR)
                    displayName: 'FeatureTest ADLS: Mount'
                    timeoutInMinutes: 3
                    continueOnError: false
              # ------------------------------------------------------------
              # Auth Tests
            
              # Block SAS test
              - script: |
                  cd $(WORK_DIR)
                  $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_sas_proxy.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
                displayName: "Create SAS Config File"
                env:
                  STO_ACC_NAME: $(BF2_BLK_ACC_NAME)
                  STO_ACC_SAS: $(BF2_BLK_ACC_SAS)
                  STO_ACC_ENDPOINT: 'https://$(BF2_BLK_ACC_NAME).blob.core.windows.net'
                  VERBOSE_LOG: ${{ parameters.verbose_log }}
                continueOnError: false

              - script:
                  cat $(BLOBFUSE2_CFG)
                displayName: "Print SAS config file"

              - template: 'azure-pipeline-templates/verify-auth.yml'
                parameters:
                  idstring: 'Block SAS'
                  distro_name: $(AgentName)
                  mountStep:
                    script: |
                      $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG) --default-working-dir=$(WORK_DIR)
                    displayName: 'AuthVerify-SAS: Mount'
                    continueOnError: false

              # ------------------------------------------------------------
              - template: 'azure-pipeline-templates/cleanup.yml'
                parameters:
                  unmount: true
                  delete_containers: true                  
              - script: |
                  kill -9 $(pgrep mitmdump)
                displayName: 'Kill Proxy'
        - ${{ if eq(parameters.msi_test, true) }}:  
          # -----------------------------------------------------------
          # Ubuntu-20.04 MSI tests
          - job: Set_4
            timeoutInMinutes: 60
            strategy:
              matrix:
                Ubuntu-20-MSI:
                  DistroVer: "Ubn20_MSI"
                  distro: 'ubuntu'
                  distro_version: 'ubuntu_20'
                  AgentName: "blobfuse-ubuntu20"
                  Description: "Ubuntu 20 MSI Test"

            pool:
              name: "blobfuse-ubuntu-pool"
              demands:
                - ImageOverride -equals $(AgentName)

            variables:
              - group: NightlyBlobFuse
              - name: MOUNT_DIR
                value: '$(Pipeline.Workspace)/blob_mnt'
              - name: TEMP_DIR
                value: '$(Pipeline.Workspace)/blobfuse2_tmp'
              - name: BLOBFUSE2_CFG
                value: '$(Pipeline.Workspace)/blobfuse2.msi.yaml'
              - name: BLOBFUSE2_ADLS_CFG
                value: '$(Pipeline.Workspace)/blobfuse2.msi.adls.yaml'
              - name: GOPATH
                value: '$(Pipeline.Workspace)/go'
              - name: ROOT_DIR
                value: '$(System.DefaultWorkingDirectory)' 
              - name: WORK_DIR
                value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
              - name: skipComponentGovernanceDetection
                value: true

            steps:
              # Print the agent info 
              - script: |
                  echo $(Description)
                  hostnamectl
                displayName: 'Print Agent Info'

              # Build the code
              - template: 'azure-pipeline-templates/build.yml'
                parameters:
                  skip_msi: "false"
                  skip_azcli: "false"

              # BlockBlob MSI Test
              - script: |
                  cd $(WORK_DIR)
                  $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_msi.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
                displayName: "Create MSI Config File"
                env:
                  STO_ACC_NAME: $(BF2_BLK_ACC_NAME) 
                  STO_MSI_APP_ID: $(AZTEST_APP_ID)
                  STO_ACC_TYPE: 'block'
                  STO_ACC_ENDPOINT: 'https://$(BF2_BLK_ACC_NAME).blob.core.windows.net'
                  VERBOSE_LOG: ${{ parameters.verbose_log }}
                continueOnError: false

              - script:
                  cat $(BLOBFUSE2_CFG)
                displayName: "Print config file"

              # Mount the container and run basic tests
              - template: 'azure-pipeline-templates/verify-auth.yml'
                parameters:
                  idstring: 'BlockBlob MSI'
                  distro_name: $(AgentName)
                  mountStep:
                    script: |
                      $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
                    displayName: 'AuthVerify MSI: Mount Container'
                    continueOnError: false

              # ADLS MSI Test
              - script: |
                  cd $(WORK_DIR)
                  $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_msi.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
                displayName: "Create MSI Config File"
                env:
                  STO_ACC_NAME: $(BF2_ADLS_ACC_NAME) 
                  STO_MSI_APP_ID: $(AZTEST_APP_ID)
                  STO_ACC_TYPE: 'adls'
                  STO_ACC_ENDPOINT: 'https://$(BF2_ADLS_ACC_NAME).dfs.core.windows.net'
                  VERBOSE_LOG: ${{ parameters.verbose_log }}
                continueOnError: false

              - script:
                  cat $(BLOBFUSE2_CFG)
                displayName: "Print config file"

              # Mount the cntainer and run basic tests
              - template: 'azure-pipeline-templates/verify-auth.yml'
                parameters:
                  idstring: 'ADLS MSI'
                  distro_name: $(AgentName)
                  mountStep:
                    script: |
                      $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
                    displayName: 'AuthVerify MSI: Mount Container'
                    continueOnError: false

              # Cleanup
              - template: 'azure-pipeline-templates/cleanup.yml'
                parameters:
                  unmount: true
                  delete_containers: true            

        
        - ${{ if eq(parameters.exhaustive_test, true) }}:
          # Run E2E tests on different distros
          - job: Set_5
            continueOnError: true
            timeoutInMinutes: 60
            strategy:
              matrix:
                RHEL-8.6:
                  distro_version: 'RHEL-8.6'
                  distro: rhel
                  poolName: 'blobfuse-rhel-pool'
                  containerName: "test-cnt-rhel-86"
                  Description: 'Red Hat Enterprise Linux 8.6'
                  AgentName: 'blobfuse-rhel8_6'
                  tags: 'fuse3'
                RHEL-9.0:
                  distro_version: 'RHEL-9.0'
                  distro: rhel
                  poolName: 'blobfuse-rhel-pool'
                  containerName: "test-cnt-rhel-9"
                  Description: 'Red Hat Enterprise Linux 9.0'
                  AgentName: 'blobfuse-rhel9'
                  tags: 'fuse3'
                CentOS-7.9:
                  distro_version: "CentOS-7.9"
                  distro: centos
                  poolName: 'blobfuse-centos-pool'
                  containerName: "test-cnt-cent-7"
                  Description: "CentOS 7.9"
                  AgentName: "blobfuse-centos7"
                CentOS-8.5:
                  distro_version: "CentOS-8.5"
                  distro: centos
                  poolName: 'blobfuse-centos-pool'
                  containerName: "test-cnt-cent-8"
                  Description: "CentOS 8.5"
                  AgentName: "blobfuse-centos8"
                Oracle-8.1:
                  distro_version: "Oracle-8.1"
                  distro: oracle
                  poolName: 'blobfuse-oracle-pool'
                  containerName: "test-cnt-ora-81"
                  Description: "Oracle Linux 8.1"
                  AgentName: "blobfuse-oracle81"
                Rocky-8.0:
                  distro_version: "Rocky-8.0"
                  distro: rocky
                  poolName: 'blobfuse2-rocky-pool'
                  containerName: "test-cnt-rocky-8"
                  Description: "Rocky Linux 8.0"
                  AgentName: "blobfuse-rocky8"
                  tags: 'fuse3'
                Rocky-9.0:
                  distro_version: "Rocky-9.0"
                  distro: rocky
                  poolName: 'blobfuse2-rocky-pool'
                  containerName: "test-cnt-rocky-9"
                  Description: "Rocky Linux 9.0"
                  AgentName: "blobfuse-rocky9"
                  tags: 'fuse3'
                SUSE-15:
                  distro_version: "SUSE-15"
                  distro: suse
                  poolName: 'blobfuse-suse-pool'
                  containerName: "test-cnt-suse-15"
                  Description: "SUSE Enterprise Linux 15"
                  AgentName: "blobfuse-suse15"
                Mariner2:
                  distro_version: "Mariner2"
                  distro: mariner
                  poolName: 'blobfuse-mariner-pool'
                  containerName: "test-cnt-mari-2"
                  Description: "CBL-Mariner2 Linux"
                  AgentName: "blobfuse-mariner2"
                  fuselib: 'libfuse3-dev'
                  tags: 'fuse3'                  
            pool:
              name: $(poolName)
              demands:
                - ImageOverride -equals $(AgentName)

            variables:
              - group: NightlyBlobFuse
              - name: MOUNT_DIR
                value: '$(Pipeline.Workspace)/blob_mnt'
              - name: TEMP_DIR
                value: '$(Pipeline.Workspace)/blobfuse2_tmp'
              - name: BLOBFUSE2_CFG
                value: '$(Pipeline.Workspace)/blobfuse2.yaml'
              - name: BLOBFUSE2_ADLS_CFG
                value: '$(Pipeline.Workspace)/blobfuse2.adls.yaml'
              - name: GOPATH
                value: '$(Pipeline.Workspace)/go'
              - name: ROOT_DIR
                value: '$(System.DefaultWorkingDirectory)' 
              - name: WORK_DIR
                value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
              - name: skipComponentGovernanceDetection
                value: true

            steps:
              # Build the code
              - template: 'azure-pipeline-templates/build.yml'

              # Block Blob Test
              - template: 'azure-pipeline-templates/e2e-tests-spcl.yml'
                parameters:
                  conf_template: azure_key.yaml
                  config_file: $(BLOBFUSE2_CFG)
                  idstring: block_blob_key
                  adls: false
                  account_name: $(BF2_BLK_ACC_NAME)
                  account_key: $(BF2_BLK_ACC_KEY)
                  account_type: block
                  distro_name: $(distro_version)
                  quick_test: true
                  verbose_log: ${{ parameters.verbose_log }}
                  clone: false

              # ADLS Test
              - template: 'azure-pipeline-templates/e2e-tests-spcl.yml'
                parameters:
                  conf_template: azure_key.yaml
                  config_file: $(BLOBFUSE2_CFG)
                  idstring: adls_key
                  adls: true
                  account_name: $(BF2_ADLS_ACC_NAME)
                  account_key: $(BF2_ADLS_ACC_KEY)
                  account_type: adls
                  distro_name: $(distro_version)
                  quick_test: true
                  verbose_log: ${{ parameters.verbose_log }}
                  clone: false

              # Cleanup
              - template: 'azure-pipeline-templates/cleanup.yml'
                parameters:
                  unmount: true
                  delete_containers: true 


  - stage: DataConsistency
    jobs:
      # Ubuntu Tests
      - job: Set_1
        timeoutInMinutes: 300
        strategy:
          matrix:
            Ubuntu-22:
              AgentName: 'blobfuse-ubuntu22'
              distro: 'ubuntu'
              distro_version: 'ubuntu_22_x86'
              fuselib: 'libfuse3-dev'
              tags: 'fuse3'
            Ubuntu-20:
              AgentName: 'blobfuse-ubuntu20'
              distro: 'ubuntu'
              distro_version: 'ubuntu_20_x86'
              fuselib: 'libfuse-dev'
              tags: 'fuse2'

        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: MOUNT_DIR
            value: '$(Pipeline.Workspace)/blob_mnt'
          - name: TEMP_DIR
            value: '$(Pipeline.Workspace)/blobfuse2_tmp'
          - name: BLOBFUSE2_CFG
            value: '$(Pipeline.Workspace)/blobfuse2.yaml'
          - name: BLOBFUSE2_ADLS_CFG
            value: '$(Pipeline.Workspace)/blobfuse2.adls.yaml'
          - name: skipComponentGovernanceDetection
            value: true
          - name: GOPATH
            value: '$(Pipeline.Workspace)/go'
          - name: ROOT_DIR
            value: '$(System.DefaultWorkingDirectory)' 
          - name: WORK_DIR
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          
        steps: 
          # -------------------------------------------------------
          # Pull and build the code and create the containers
          - template: 'azure-pipeline-templates/build.yml'
            parameters:
              skip_ut: true
          # Check data consistency for block accounts
          - template: 'azure-pipeline-templates/data-consistency.yml'
            parameters:
              config_file: $(BLOBFUSE2_CFG)
              idstring: BLOCK
              account_name: $(BF2_BLK_ACC_NAME)
              account_key: $(BF2_BLK_ACC_KEY)
              account_type: block
              verbose_log: ${{ parameters.verbose_log }}

          # Check data consistency for adls accounts
          - template: 'azure-pipeline-templates/data-consistency.yml'
            parameters:
              config_file: $(BLOBFUSE2_CFG)
              idstring: ADLS
              account_name: $(BF2_ADLS_ACC_NAME)
              account_key: $(BF2_ADLS_ACC_KEY)
              account_type: adls
              verbose_log: ${{ parameters.verbose_log }}

          - template: azure-pipeline-templates/cleanup.yml
            parameters:
              unmount: true
              delete_containers: true