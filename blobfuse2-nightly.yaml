# Blobfuse2 Nightly Build-Sanity Pipeline

# In case of failure on a Self-Hosted Agent perform the following steps to get the vm back online:
# 1. Check which vm is offline by going to agent-pools in Azure pipelines portal
# 2. Log into the VM that is offline
# 3. Clear the _work or work directory which must be in myagent or $(HOME) directory
# 4. Verify whether system is online from the Azure pipelines portal

schedules:
  # Cron string < minute hour day-of-month month day-of-week>
  #             * means all like '*' in day of month means everyday
  # Run only on main branch
  # 'always' controls whether to run only if there is a change or not
  # Run this pipeline every 15:00 time
  - cron: '0 15 * * *'
    displayName: 'Daily midnight Blobfuse2 build'
    branches:
      include:
        - main

parameters:
  - name: exhaustive_test
    # Quick test or an exhaustive test
    displayName: 'Exhaustive test'
    type: boolean
    default: true
  
  - name: proxy_test
  # Proxy tests
    displayName: 'Proxy test'
    type: boolean
    default: true

  - name: msi_test
    # MSI auth based test suites to be run or not
    displayName: 'MSI test'
    type: boolean
    default: true

  - name: quick_stress
    displayName: 'Quick Stress'
    type: boolean
    default: true

jobs:
  # Ubuntu based test suite
  - job: Set_1
    timeoutInMinutes: 300

    strategy:
      matrix:
        Ubuntu-18:
          imageName: 'ubuntu-18.04'
          containerName: 'test-cnt-ubn-18'
          adlsSas: $(UBUNTU-18-ADLS-SAS)
          hostedAgent: true
          stressParallel: 3
          fuselib: 'libfuse-dev'
          tags: 'fuse2'
        Ubuntu-20:
          imageName: 'ubuntu-20.04'
          containerName: 'test-cnt-ubn-20'
          adlsSas: $(UBUNTU-20-ADLS-SAS)
          hostedAgent: true
          stressParallel: 1
          fuselib: 'libfuse3-dev'
          tags: 'fuse3'
        # Ubn-22 is not supported by devops as of now  
        #Ubuntu-22:
        #  imageName: 'ubuntu-22.04'
        #  containerName: 'test-cnt-ubn-22'
        #  adlsSas: $(UBUNTU-20-ADLS-SAS)
        #  hostedAgent: true
        #  stressParallel: 1
        #  fuselib: 'libfuse3-dev'
        #  tags: 'fuse3'
    pool:
      vmImage: $(imageName)

    variables:
      - group: NightlyBlobFuse
      - name: MOUNT_DIR
        value: '$(Pipeline.Workspace)/blob_mnt'
      - name: TEMP_DIR
        value: '$(Pipeline.Workspace)/blobfuse2_tmp'
      - name: BLOBFUSE2_CFG
        value: '$(Pipeline.Workspace)/blobfuse2.yaml'
      - name: BLOBFUSE2_SAS_CFG
        value: '$(Pipeline.Workspace)/blobfuse2_sas_config.yaml'
      - name: BLOBFUSE2_SPN_CFG
        value: '$(Pipeline.Workspace)/blobfuse2_spn_config.yaml'
      - name: BLOBFUSE2_STREAM_CFG
        value: '$(Pipeline.Workspace)/blobfuse2_stream.yaml'
      - name: BLOBFUSE2_ADLS_CFG
        value: '$(Pipeline.Workspace)/blobfuse2.adls.yaml'
      - name: BLOBFUSE2_GTEST_CFG
        value: '$(Pipeline.Workspace)/connection.yaml'
      - name: BLOBFUSE2_STRESS_DIR
        value: '$(Pipeline.Workspace)/blobfuse2_stress'
      - name: DECODE_PERCENTS
        value: false
      - name: GOPATH
        value: '$(Pipeline.Workspace)/go'
      - name: ROOT_DIR
        value: '$(System.DefaultWorkingDirectory)' 
      - name: WORK_DIR
        value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'

    steps:
      - checkout: none

      # Clone the repo
      - script: |
          git clone https://github.com/Azure/azure-storage-fuse
        displayName: 'Checkout Code'
        workingDirectory: $(ROOT_DIR)

      # Checkout the branch
      - script: |
          git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
        displayName: 'Checkout Branch'
        workingDirectory: $(WORK_DIR)

      - script: |
          sudo apt-get update --fix-missing
          sudo apt-get install $(fuselib) -y
        displayName: 'Install libfuse'

      # -------------------------------------------------------
      # Pull and build the code
      - template: 'azure-pipeline-templates/build.yml'
        parameters:
          working_directory: $(WORK_DIR)
          root_dir: $(Pipeline.Workspace)
          mount_dir: $(MOUNT_DIR)
          temp_dir: $(TEMP_DIR)
          gopath: $(GOPATH)
          container: $(containerName)
          tags: $(tags)
          fuselib: $(fuselib)

      # -------------------------------------------------------
      - template: 'azure-pipeline-templates/invalid-command-tests.yml'
        parameters:
          working_dir: $(WORK_DIR)
          mount_dir: $(MOUNT_DIR)
          
      - template: 'azure-pipeline-templates/verbose-tests.yml'
        parameters:
          service: 'BlockBlob'
          account_type: 'block'
          account_endpoint: 'https://$(NIGHTLY_STO_BLOB_ACC_NAME).blob.core.windows.net' 
          adls: false
          account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
          account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
          account_sas: $(NIGHTLY_STO_ACC_SAS)
          spn_account_name: $(AZTEST_BLOCK_ACC_NAME)
          spn_account_endpoint: 'https://$(AZTEST_BLOCK_ACC_NAME).blob.core.windows.net' 
          client_id: $(AZTEST_CLIENT)
          tenant_id: $(AZTEST_TENANT)
          client_secret: $(AZTEST_SECRET)
          container: $(containerName)
          config: $(BLOBFUSE2_CFG)
          working_dir: $(WORK_DIR)
          mount_dir: $(MOUNT_DIR)
          temp_dir: $(TEMP_DIR)
          stress_dir: $(BLOBFUSE2_STRESS_DIR)
          huge_container: 'testcnt1'
          quick_stress: ${{ parameters.quick_stress }}
          test_key_credential: true 
          test_sas_credential: true
          test_spn_credential: true
          sas_credential_config: $(BLOBFUSE2_SAS_CFG)
          spn_credential_config: $(BLOBFUSE2_SPN_CFG)
          distro_name: $(imageName)
          quick_test: false

      - template: 'azure-pipeline-templates/verbose-tests.yml'
        parameters:
          service: 'ADLS'
          account_type: 'adls'
          account_endpoint: 'https://$(AZTEST_ADLS_ACC_NAME).dfs.core.windows.net' 
          adls: true
          account_name: $(AZTEST_ADLS_ACC_NAME)
          account_key: $(AZTEST_ADLS_KEY)
          account_sas: $(adlsSas)
          spn_account_name: $(AZTEST_ADLS_ACC_NAME)
          spn_account_endpoint: 'https://$(AZTEST_ADLS_ACC_NAME).dfs.core.windows.net' 
          client_id: $(AZTEST_CLIENT)
          tenant_id: $(AZTEST_TENANT)
          client_secret: $(AZTEST_SECRET)
          container: $(containerName)
          config: $(BLOBFUSE2_ADLS_CFG)
          working_dir: $(WORK_DIR)
          mount_dir: $(MOUNT_DIR)
          temp_dir: $(TEMP_DIR)
          stress_dir: $(BLOBFUSE2_STRESS_DIR)
          huge_container: 'testcnt'
          quick_stress: ${{ parameters.quick_stress }}
          test_key_credential: true
          test_sas_credential: true
          test_spn_credential: true
          sas_credential_config: $(BLOBFUSE2_SAS_CFG)
          spn_credential_config: $(BLOBFUSE2_SPN_CFG)
          distro_name: $(imageName)
          quick_test: false

      - template: azure-pipeline-templates/cleanup.yml
        parameters:
          working_dir: $(WORK_DIR)
          mount_dir: $(MOUNT_DIR)
          temp_dir: $(TEMP_DIR)

  - ${{ if eq(parameters.proxy_test, true) }}:
      # -----------------------------------------------------------
      # Ubuntu-20.04 Proxy tests
    - job: Set_2
      timeoutInMinutes: 300
      strategy:
        matrix:
          ubuntu-20-proxy:
            imageName: 'ubuntu-20.04'
            containerName: 'test-cnt-ubn-18-proxy'
            hostedAgent: true
            stressParallel: 3
      pool:
        vmImage: $(imageName)

      variables:
        - group: NightlyBlobFuse
        - name: MOUNT_DIR
          value: '$(Pipeline.Workspace)/blob_mnt'
        - name: TEMP_DIR
          value: '$(Pipeline.Workspace)/blobfuse2_tmp'
        - name: BLOBFUSE2_CFG
          value: '$(Pipeline.Workspace)/blobfuse2_proxy.yaml'
        - name: BLOBFUSE2_ADLS_CFG
          value: '$(Pipeline.Workspace)/blobfuse2_proxy.adls.yaml'
        - name: DECODE_PERCENTS
          value: false
        - name: GOPATH
          value: '$(Pipeline.Workspace)/go'
        - name: ROOT_DIR
          value: '$(System.DefaultWorkingDirectory)' 
        - name: WORK_DIR
          value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'

      steps:
        - checkout: none

        # Start Proxy
        - script: |
            sudo apt-get update --fix-missing
            sudo apt remove mitmproxy
            sudo apt-get install python3-setuptools
            sudo apt install python3-pip
            sudo pip3 install mitmproxy
            mitmdump -w proxy_logs.txt &
          displayName: 'Install & Start Proxy'

        # Configure Proxy cert & env
        - script: |
            sudo mkdir /usr/local/share/ca-certificates/extra
            sudo cp ~/.mitmproxy/mitmproxy-ca-cert.cer /usr/local/share/ca-certificates/extra/mitmproxy-ca-cert.crt
            sudo update-ca-certificates
            export https_proxy="127.0.0.1:8080"
            export http_proxy="127.0.0.1:8080"
          displayName: 'Configure Proxy'

        # Clone the repo
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: 'Checkout Code'
          workingDirectory: $(ROOT_DIR)

        # Checkout the branch
        - script: |
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
          displayName: 'Checkout Branch'
          workingDirectory: $(WORK_DIR)

        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install libfuse3-dev
          displayName: 'Install fuse3'

        # -------------------------------------------------------
        # Pull, build and unit test the code
        - template: 'azure-pipeline-templates/build.yml'
          parameters:
            working_directory: $(WORK_DIR)
            root_dir: $(Pipeline.Workspace)
            mount_dir: $(MOUNT_DIR)
            temp_dir: $(TEMP_DIR)
            gopath: $(GOPATH)
            container: $(containerName)
            proxy_address: "127.0.0.1:8080"
            skip_ut: true

        # -------------------------------------------------------
        - script: |
            cd $(WORK_DIR)
            $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_key_proxy.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
          displayName: 'Create Config File'
          env:
            NIGHTLY_STO_ACC_NAME: $(NIGHTLY_STO_BLOB_ACC_NAME)
            NIGHTLY_STO_ACC_KEY: $(NIGHTLY_STO_BLOB_ACC_KEY)
            ACCOUNT_TYPE: 'block'
            ACCOUNT_ENDPOINT: 'https://$(NIGHTLY_STO_BLOB_ACC_NAME).blob.core.windows.net'
          continueOnError: false

        - script:
            cat $(BLOBFUSE2_CFG)
          displayName: "Print config file"

        # --------------------------------------------------
        # End to End tests
        - template: 'azure-pipeline-templates/e2e-tests.yml'
          parameters:
            working_dir: $(WORK_DIR)
            mount_dir: $(MOUNT_DIR)
            temp_dir: $(TEMP_DIR)
            idstring: 'BlockBlob with Proxy and Key Credentials'
            distro_name: $(imageName)
            adls: false
            mountStep:
              script: |
                $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG) --default-working-dir=$(WORK_DIR)
              displayName: 'E2E TEST: Mount'
              timeoutInMinutes: 3
              continueOnError: false

        # --------------------------------------------------
        - script: |
            cd $(WORK_DIR)
            $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_key_proxy.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_ADLS_CFG)
          displayName: 'Create ADLS Config File'
          env:
            NIGHTLY_STO_ACC_NAME: $(AZTEST_ADLS_ACC_NAME)
            NIGHTLY_STO_ACC_KEY: $(AZTEST_ADLS_KEY)
            ACCOUNT_TYPE: 'adls'
            ACCOUNT_ENDPOINT: 'https://$(AZTEST_ADLS_ACC_NAME).dfs.core.windows.net'
          continueOnError: false

        - script:
            cat $(BLOBFUSE2_ADLS_CFG)
          displayName: "Print ADLS config file"

        - template: 'azure-pipeline-templates/e2e-tests.yml'
          parameters:
            working_dir: $(WORK_DIR)
            mount_dir: $(MOUNT_DIR)
            temp_dir: $(TEMP_DIR)
            idstring: 'ADLS with Proxy and Key Credentials'
            distro_name: $(imageName)
            adls: true
            mountStep:
              script: |
                $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_ADLS_CFG) --default-working-dir=$(WORK_DIR)
              displayName: 'FeatureTest ADLS: Mount'
              timeoutInMinutes: 3
              continueOnError: false
        # ------------------------------------------------------------
        # Auth Tests
      
        # Block SAS test
        - script: |
            cd $(WORK_DIR)
            $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_sas_proxy.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
          displayName: "Create SAS Config File"
          env:
            NIGHTLY_STO_BLOB_ACC_NAME: $(NIGHTLY_STO_BLOB_ACC_NAME)
            NIGHTLY_STO_ACC_SAS: $(NIGHTLY_STO_ACC_SAS)
            ACCOUNT_ENDPOINT: 'https://$(NIGHTLY_STO_BLOB_ACC_NAME).blob.core.windows.net'
          continueOnError: false

        - script:
            cat $(BLOBFUSE2_CFG)
          displayName: "Print SAS config file"

        - template: 'azure-pipeline-templates/verify-auth.yml'
          parameters:
            working_dir: $(WORK_DIR)
            mount_dir: $(MOUNT_DIR)
            temp_dir: $(TEMP_DIR)
            idstring: 'Block SAS'
            distro_name: $(imageName)
            mountStep:
              script: |
                $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG) --default-working-dir=$(WORK_DIR)
              displayName: 'AuthVerify-SAS: Mount'
              continueOnError: false

        # Block SPN and proxy test
        - script: |
            cd $(WORK_DIR)
            $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_spn_proxy.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
          displayName: "Create SPN Config File"
          env:
            NIGHTLY_SPN_ACC_NAME: $(AZTEST_BLOCK_ACC_NAME) 
            NIGHTLY_SPN_CLIENT_ID: $(AZTEST_CLIENT)
            NIGHTLY_SPN_TENANT_ID: $(AZTEST_TENANT)
            NIGHTLY_SPN_CLIENT_SECRET: $(AZTEST_SECRET)
            ACCOUNT_ENDPOINT: 'https://$(AZTEST_BLOCK_ACC_NAME).blob.core.windows.net'
          continueOnError: false
            
        - script:
            cat $(BLOBFUSE2_CFG)
          displayName: "Print SPN Config File"

        - template: 'azure-pipeline-templates/verify-auth.yml'
          parameters:
            working_dir: $(WORK_DIR)
            mount_dir: $(MOUNT_DIR)
            temp_dir: $(TEMP_DIR)
            idstring: 'Block SPN'
            distro_name: $(imageName)
            mountStep:
              script: |
                $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG) --default-working-dir=$(WORK_DIR)
              displayName: 'AuthVerify-SPN: Mount'
              continueOnError: false

        # ------------------------------------------------------------
        - template: 'azure-pipeline-templates/cleanup.yml'
          parameters:
            working_dir: $(WORK_DIR)
            mount_dir: $(MOUNT_DIR)
            temp_dir: $(TEMP_DIR)
        - script: |
            kill -9 $(pgrep mitmdump)
          displayName: 'Kill Proxy'

  # End of Ubuntu tests
  # ----------------------------------------------------------------------------------------


  - ${{ if eq(parameters.exhaustive_test, true) }}:
      # ---------------------------------------------------
      # RHEL, Cent OS, Oracle Tests
      - job: Set_3
        timeoutInMinutes: 30
        strategy:
          matrix:
            RHEL-7.5:
              DistroVer: "RHEL-7.5"
              AgentName: "RHEL 7.5"
              Description: "Red Hat Enterprise Linux 7.5"
              containerName: 'test-cnt-rhel-75'
              hostedAgent: false

            RHEL-8.1:
              DistroVer: "RHEL-8.1"
              AgentName: "RHEL 8.1"
              Description: "Red Hat Enterprise Linux 8.1"
              containerName: 'test-cnt-rhel-81'
              hostedAgent: false

            RHEL-8.2:
              DistroVer: "RHEL-8.2"
              AgentName: "RHEL 8.2"
              Description: "Red Hat Enterprise Linux 8.2"
              containerName: 'test-cnt-rhel-82'
              hostedAgent: false

            CentOS-7.0:
              DistroVer: "CentOS-7.0"
              AgentName: "COS 7.0"
              Description: "CentOS Linux 7.0"
              containerName: 'test-cnt-cent-7'
              hostedAgent: false

            CentOS-8.0:
              DistroVer: "CentOS-8.0"
              AgentName: "COS 8.0"
              Description: "CentOS Linux 8.0"
              containerName: 'test-cnt-cent-8'
              hostedAgent: false

            Oracle-8.1:
              DistroVer: "Oracle-8.1"
              AgentName: "ORA 8.1"
              Description: "Oracle Linux 8.1 Gen 2"
              containerName: 'test-cnt-ora-81'
              hostedAgent: false

        pool:
          name: "BlobFuse pool"
          demands:
            - Agent.Name -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: ROOT_DIR
            value: "/usr/pipeline/workv2"
          - name: WORK_DIR
            value: "/usr/pipeline/workv2/go/src/azure-storage-fuse"
          - name: skipComponentGovernanceDetection
            value: true

          - name: MOUNT_DIR
            value: "/usr/pipeline/workv2/blob_mnt"
          - name: TEMP_DIR
            value: "/usr/pipeline/workv2/temp"
          - name: BLOBFUSE2_CFG
            value: "/usr/pipeline/workv2/blobfuse2.yaml"
          - name: BLOBFUSE2_ADLS_CFG
            value: "/home/vsts/workv2/blobfuse2.adls.yaml"
          - name: GOPATH
            value: "/usr/pipeline/workv2/go"

        steps:
          - template: 'azure-pipeline-templates/distro-tests.yml'
            parameters:
              working_dir: $(WORK_DIR)
              root_dir: $(ROOT_DIR)
              temp_dir: $(TEMP_DIR)
              mount_dir: $(MOUNT_DIR)
              config_path: $(BLOBFUSE2_CFG)
              container: $(containerName)
              blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
              blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
              adls_account_name: $(AZTEST_ADLS_ACC_NAME)
              adls_account_key: $(AZTEST_ADLS_KEY)
              distro_name: $(AgentName)
              gopath: $(GOPATH)
              installStep:
                script: |
                  sudo yum update -y
                  sudo yum install git fuse3 fuse3-devel python36 -y
                displayName: 'Install fuse'

      # ------------------------------------------------------------
      # Debian tests
      - job: Set_4
        timeoutInMinutes: 30
        strategy:
          matrix:
            Debian-9.0:
              DistroVer: "Debian9.0"
              AgentName: "DEB 9.0"
              Description: "Debian Linux 9.0 Gen 1"
              containerName: 'test-cnt-deb-9'
              hostedAgent: false
              fuselib: 'libfuse-dev'
              tags: 'fuse2'
            Debian-10.0:
              DistroVer: "Debian10.0"
              AgentName: "DEB 10.0"
              Description: "Debian Linux 10.0 Gen 1"
              containerName: 'test-cnt-deb-10'
              hostedAgent: false
              fuselib: 'libfuse-dev'
              tags: 'fuse2'
            Debian-11.0:
              DistroVer: "Debian11.0"
              AgentName: "DEB 11.0"
              Description: "Debian Linux 11.0 Gen 2"
              containerName: 'test-cnt-deb-11'
              hostedAgent: false
              fuselib: 'libfuse3-dev'
              tags: 'fuse3'
        pool:
          name: 'Blobfuse Pool'
          demands:
            - Agent.Name -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: ROOT_DIR
            value: "/home/vsts/workv2"
          - name: WORK_DIR
            value: "/home/vsts/workv2/go/src/azure-storage-fuse"
          - name: skipComponentGovernanceDetection
            value: true
          - name: MOUNT_DIR
            value: "/home/vsts/workv2/blob_mnt"
          - name: TEMP_DIR
            value: "/home/vsts/workv2/blobfuse2tmp"
          - name: BLOBFUSE2_CFG
            value: "/home/vsts/workv2/blobfuse2.yaml"
          - name: BLOBFUSE2_ADLS_CFG
            value: "/home/vsts/workv2/blobfuse2.adls.yaml"
          - name: GOPATH
            value: "/home/vsts/workv2/go"

        # Distro Tests
        steps:
          - template: 'azure-pipeline-templates/distro-tests.yml'
            parameters:
              working_dir: $(WORK_DIR)
              root_dir: $(ROOT_DIR)
              temp_dir: $(TEMP_DIR)
              mount_dir: $(MOUNT_DIR)
              gopath: $(GOPATH)
              config_path: $(BLOBFUSE2_CFG)
              container: $(containerName)
              blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
              blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
              adls_account_name: $(AZTEST_ADLS_ACC_NAME)
              adls_account_key: $(AZTEST_ADLS_KEY)
              distro_name: $(AgentName)
              tags: $(tags)
              fuselib: $(fuselib)
              installStep:
                script: |
                  sudo apt-get update --fix-missing
                  sudo apt-get install $(fuselib) -y
                displayName: 'Install libfuse'

      # ------------------------------------------------------------
      # SUSE tests
      - job: Set_5
        timeoutInMinutes: 30
        strategy:
          matrix:
            SUSE-15G2:
              DistroVer: "Suse-15Gen2"
              AgentName: "SUSE 15G2"
              Description: "SUSE Ent Linux 15-SP1-Gen2"
              containerName: 'test-cnt-suse-15'

        pool:
          name: 'Blobfuse Pool'
          demands:
            - Agent.Name -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: ROOT_DIR
            value: "/home/vsts/workv2"
          - name: WORK_DIR
            value: "/home/vsts/workv2/go/src/azure-storage-fuse"
          - name: skipComponentGovernanceDetection
            value: true
          - name: MOUNT_DIR
            value: "/home/vsts/workv2/blob_mnt"
          - name: TEMP_DIR
            value: "/home/vsts/workv2/blobfuse2tmp"
          - name: BLOBFUSE2_CFG
            value: "/home/vsts/workv2/blobfuse2.yaml"
          - name: BLOBFUSE2_ADLS_CFG
            value: "/home/vsts/workv2/blobfuse2.adls.yaml"
          - name: GOPATH
            value: "/home/vsts/workv2/go"

        # Distro Tests
        steps:
          - template: 'azure-pipeline-templates/distro-tests.yml'
            parameters:
              working_dir: $(WORK_DIR)
              root_dir: $(ROOT_DIR)
              temp_dir: $(TEMP_DIR)
              mount_dir: $(MOUNT_DIR)
              config_path: $(BLOBFUSE2_CFG)
              container: $(containerName)
              blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
              blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
              adls_account_name: $(AZTEST_ADLS_ACC_NAME)
              adls_account_key: $(AZTEST_ADLS_KEY)
              distro_name: $(AgentName)
              gopath: $(GOPATH)
              installStep:
                script: |
                  sudo zypper -n install fuse3 fuse3-devel
                displayName: 'Install fuse'
      # ------------------------------------------------------------
      # Mariner tests
      - job: Set_6
        timeoutInMinutes: 30
        strategy:
          matrix:
            Mariner:
              DistroVer: "Mari-1"
              AgentName: "MARI 1"
              Description: "CBL-Mariner Linux"
              containerName: 'test-cnt-mari-1'
              fuselib: 'libfuse-dev'
              tags: 'fuse2'

        pool:
          name: 'Blobfuse Pool'
          demands:
            - Agent.Name -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: ROOT_DIR
            value: "/home/vsts/workv2"
          - name: WORK_DIR
            value: "/home/vsts/workv2/go/src/azure-storage-fuse"
          - name: skipComponentGovernanceDetection
            value: true
          - name: MOUNT_DIR
            value: "/home/vsts/workv2/blob_mnt"
          - name: TEMP_DIR
            value: "/home/vsts/workv2/blobfuse2tmp"
          - name: BLOBFUSE2_CFG
            value: "/home/vsts/workv2/blobfuse2.yaml"
          - name: BLOBFUSE2_ADLS_CFG
            value: "/home/vsts/workv2/blobfuse2.adls.yaml"
          - name: GOPATH
            value: "/home/vsts/workv2/go"

        # Distro Tests
        steps:
          - template: 'azure-pipeline-templates/distro-tests.yml'
            parameters:
              working_dir: $(WORK_DIR)
              root_dir: $(ROOT_DIR)
              temp_dir: $(TEMP_DIR)
              mount_dir: $(MOUNT_DIR)
              config_path: $(BLOBFUSE2_CFG)
              container: $(containerName)
              blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
              blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
              adls_account_name: $(AZTEST_ADLS_ACC_NAME)
              adls_account_key: $(AZTEST_ADLS_KEY)
              distro_name: $(AgentName)
              gopath: $(GOPATH)
              tags: $(tags)
              fuselib: $(fuselib)
              installStep:
                script: |
                  sudo tdnf install fuse fuse-devel
                displayName: 'Install fuse'


  - ${{ if eq(parameters.msi_test, true) }}:
      # -----------------------------------------------------------
      # Ubuntu-20.04 MSI tests
      - job: Set_7
        timeoutInMinutes: 30
        strategy:
          matrix:
            MSI_TEST:
              DistroVer: "Ubn20_MSI"
              AgentName: "MSITestUBN20"
              Description: "MSITEST - 2"

        pool:
          name: "Blobfuse Pool"
          demands:
            - Agent.Name -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: ROOT_DIR
            value: "/home/vsts/workv2/"
          - name: WORK_DIR
            value: "/home/vsts/workv2/go/src/azure-storage-fuse"
          - name: skipComponentGovernanceDetection
            value: true

          - name: MOUNT_DIR
            value: "/home/vsts/workv2/blob_mnt"
          - name: TEMP_DIR
            value: "/home/vsts/workv2/blobfuse2tmp"
          - name: BLOBFUSE2_CFG
            value: "/home/vibhansa/myblobv2.msi.yaml"
          - name: BLOBFUSE2_CFG_ADLS
            value: "/home/vibhansa/myblobv2.msi.adls.yaml"
          - name: GOPATH
            value: "/home/vsts/workv2/go"
          - name: containerName
            value: "test-cnt-ubn-20-msi"

        steps:
          - checkout: none

          # Print the agent info 
          - script: |
              echo $(Description)
              hostnamectl
            displayName: 'Print Agent Info'
          
          # Install libfuse
          - script: |
              sudo apt-get install libfuse3-dev fuse3 -y -o Dpkg::Options::="--force-confnew"
              sudo apt-get update --fix-missing -o Dpkg::Options::="--force-confnew"
            displayName: 'Install Fuse'

          # Prestart cleanup
          - script: |
              sudo fusermount -u $(MOUNT_DIR)
              sudo kill -9 `pidof blobfuse2`
              sudo rm -rf $(ROOT_DIR)
            displayName: 'PreBuild Cleanup'

          # Create directory structure
          - script: |
              sudo rm -rf $(ROOT_DIR)
              sudo mkdir -p $(ROOT_DIR)
              sudo chown -R `whoami` $(ROOT_DIR)
              chmod 777 $(ROOT_DIR)
              mkdir -p $(ROOT_DIR)/go/src
            displayName: 'Create Directory Structure'

          # Checkout the code  
          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(ROOT_DIR)/go/src

          # Pull the branch
          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(WORK_DIR)

          # Build the code
          - template: 'azure-pipeline-templates/build.yml'
            parameters:
              working_directory: $(WORK_DIR)
              root_dir: $(ROOT_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
              hostedAgent: false
              gopath: $(GOPATH)
              container: $(containerName)
              skip_msi: "false"
          
          # BlockBlob MSI Test
          - script: |
              cd $(WORK_DIR)
              $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_msi.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
            displayName: "Create MSI Config File"
            env:
              NIGHTLY_STO_BLOB_ACC_NAME: $(AZTEST_BLOCK_ACC_NAME) 
              NIGHTLY_MSI_APP_ID: $(AZTEST_APP_ID)
              ACCOUNT_TYPE: 'block'
              ACCOUNT_ENDPOINT: 'https://$(AZTEST_BLOCK_ACC_NAME).blob.core.windows.net'
            continueOnError: false

          - script:
              cat $(BLOBFUSE2_CFG)
            displayName: "Print config file"

          # Mount the cntainer and run basic tests
          - template: 'azure-pipeline-templates/verify-auth.yml'
            parameters:
              working_dir: $(WORK_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
              idstring: 'BlockBlob MSI'
              distro_name: $(AgentName)
              mountStep:
                script: |
                  $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
                displayName: 'AuthVerify MSI: Mount Container'
                continueOnError: false

          # ADLS MSI Test
          - script: |
              cd $(WORK_DIR)
              $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_msi.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
            displayName: "Create MSI Config File"
            env:
              NIGHTLY_STO_BLOB_ACC_NAME: $(AZTEST_ADLS_ACC_NAME) 
              NIGHTLY_MSI_APP_ID: $(AZTEST_APP_ID)
              ACCOUNT_TYPE: 'adls'
              ACCOUNT_ENDPOINT: 'https://$(AZTEST_ADLS_ACC_NAME).dfs.core.windows.net'
            continueOnError: false

          - script:
              cat $(BLOBFUSE2_CFG)
            displayName: "Print config file"

          # Mount the cntainer and run basic tests
          - template: 'azure-pipeline-templates/verify-auth.yml'
            parameters:
              working_dir: $(WORK_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
              idstring: 'ADLS MSI'
              distro_name: $(AgentName)
              mountStep:
                script: |
                  $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
                displayName: 'AuthVerify MSI: Mount Container'
                continueOnError: false

          # Cleanup
          - template: 'azure-pipeline-templates/cleanup.yml'
            parameters:
              working_dir: $(WORK_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
          
          - script: |
              sudo rm -rf ${ROOT_DIR}
              pwd
              cd /`pwd | cut -d '/' -f 2,3,4,5`
              sudo rm -rf [0-9]
            displayName: 'Clean Agent Directories'
            condition: always() 
  - job: Set_8
    timeoutInMinutes: 30

    strategy:
      matrix:
        Ubuntu-18-CSI:
          imageName: 'ubuntu-18.04'
          containerName: 'test-cnt-ubn-18'
          adlsSas: $(UBUNTU-18-ADLS-SAS)
          hostedAgent: true
          stressParallel: 3
          fuselib: 'libfuse-dev'
          tags: 'fuse2'
    pool:
      vmImage: $(imageName)

    variables:
      - group: NightlyBlobFuse
      - name: ROOT_DIR
        value: '$(System.DefaultWorkingDirectory)' 
      - name: WORK_DIR
        value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'

    steps:
      - checkout: none
      - script: |
          git clone https://github.com/Azure/azure-storage-fuse
        displayName: 'Checkout Code & List commits'
        workingDirectory: $(root_dir)
          
      # list commits from past 12hrs
      - script: |
          git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
          git --no-pager log --since="12 hours ago" --stat
        displayName: 'List Commits'
        workingDirectory: $(work_dir)
      
      # install dependencies required for compiling blobfuse
      - script: |
          sudo apt-get update --fix-missing
          sudo apt-get install ruby-dev build-essential $(fuselib) -y
          sudo gem install fpm -V
        displayName: "Installing Dependencies"

      # build blobfuse2 and generate binary
      - template: 'azure-pipeline-templates/build-release.yml'
        parameters:
          work_dir: $(work_dir)
          root_dir: $(root_dir)
          unit_test: false
          tags: $(tags)

      # place the generated binary files & any additional files in appropriate locations
      - script: |
          mkdir -p pkgDir/usr/bin/
          mkdir -p pkgDir/usr/share/blobfuse2/
          cp azure-storage-fuse/blobfuse2 pkgDir/usr/bin/blobfuse2
          cp azure-storage-fuse/setup/baseConfig.yaml pkgDir/usr/share/blobfuse2/
          cp azure-storage-fuse/sampleFileCacheConfig.yaml pkgDir/usr/share/blobfuse2/
          cp azure-storage-fuse/sampleStreamingConfig.yaml pkgDir/usr/share/blobfuse2/
          cp azure-storage-fuse/tools/postinstall.sh pkgDir/usr/share/blobfuse2/
          mkdir -p pkgDir/etc/rsyslog.d
          mkdir -p pkgDir/etc/logrotate.d
          cp azure-storage-fuse/setup/11-blobfuse2.conf pkgDir/etc/rsyslog.d
          cp azure-storage-fuse/setup/blobfuse2-logrotate pkgDir/etc/logrotate.d/blobfuse2
        workingDirectory: $(root_dir)
        displayName: 'Accumulate pkg files'
      
      # using fpm tool for packaging of our binary & performing post-install operations
      # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
      - script: |
          fpm -s dir -t deb -n blobfuse2 -C pkgDir/ -v `./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3` -d fuse \
          --maintainer "Blobfuse v-Team <blobfusevteam@microsoft.com>" --url "https://github.com/Azure/azure-storage-fuse" \
          --description "An user-space filesystem for interacting with Azure Storage" 
          mv ./blobfuse2*.deb $(work_dir)/test/csi_driver_test/blobfuse2.deb
        workingDirectory: $(root_dir)
        displayName: 'Make Package'
      - script: |
          docker build --no-cache --output=type=docker -t blobfuse2/blob-csi:test -f ./Dockerfile .
        workingDirectory: $(work_dir)/test/csi_driver_test
        displayName: 'Docker Build'
        continueOnError: false