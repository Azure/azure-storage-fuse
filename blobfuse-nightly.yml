# BlobFuse Nightly Build-Sanity Pipeline

schedules:
  # Cron string < minute hour day-of-month month day-of-week>
  #             * means all like '*' in day of month means everyday
  # Run only on master branch
  # 'always' controls whether to run only if there is a change or not
- cron: "0 0 * * *"
  displayName: Daily midnight BlobFuse build
  branches:
    include:
    - master
  always: true

parameters:
- name: exhaustive_test
  displayName: 'Exhaustive Test'
  type: boolean
  default: true
- name: msi_test
  displayName: 'MSI Test'
  type: boolean
  default: true
- name: proxy_test
  displayName: 'Proxy Test'
  type: boolean
  default: false


# List of jobs to run in parallel
jobs:
  - ${{ if true }}:
    - job: Set_1
      timeoutInMinutes: 400

      # Define on what all OS we want to run this Pipeline
      strategy:
        matrix:
          ${{ if eq(parameters.exhaustive_test, true) }}:
            #Ubuntu-16:
            #  imageName: 'ubuntu-16.04'
            #  containerName: 'test-cnt-ubn-16'
            #  quickTestDir: 'ubn16'
            Ubuntu-18:
              imageName: 'ubuntu-18.04' 
              containerName: 'test-cnt-ubn-18'
              quickTestDir: 'ubn18'
            Ubuntu-20:
              imageName: 'ubuntu-20.04' 
              containerName: 'test-cnt-ubn-20'
              quickTestDir: 'ubn20'

          ${{ if eq(parameters.exhaustive_test, false) }}:
            Ubuntu-18:
              imageName: 'ubuntu-18.04' 
              containerName: 'test-cnt-ubn-18'
              quickTestDir: 'ubn18'

      pool:
        vmImage: $(imageName)

      variables:
      - group: NightlyBlobFuse
      - name: MOUNT_DIR
        value: "/home/vsts/work/blob_mnt"
      - name: TEMP_DIR
        value: "/mnt/blobfusetmp"
      - name: BLOBFUSE_CFG
        value: "/home/vsts/work/blobfuse.cfg"
      - name: BLOBFUSE_CFG_ADLS
        value: "/home/vsts/work/blobfuse.cfg.adls"
      - name: BLOBFUSE_CFG_GTEST
        value: "./connection.cfg"
      - name: BLOBFUSE_STRESS_DIR
        value: "/home/vsts/work/blob_stress"
      - name: DECODE_PERCENTS
        value: false
        
    

      # Each job has set of steps to be done
      steps:
      - script: |
          sudo apt-get update --fix-missing
          sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ -y
        displayName: "Basic Tools Setup"

      - script: |
          sudo apt-get install libfuse-dev -y
          #export GOROOT=/usr/local/go
          #export GOPATH=$HOME/go
          #export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
        displayName: "libFuse Setup"

      # List commits done 
      - script: |
          echo "Below commits were done in last 12 hours : " `date` 
          git --no-pager log --since="12 hours ago" --stat
        displayName: "List Commits"

      # Build the blobFuse binary
      - script: |
          export INCLUDE_TESTS=1
          sudo chmod +x build.sh
          . ./build.sh
        displayName: "Build BlobFuse"

      # Test the binary just to make sure it was built fine
      - script: |
          ./build/blobfuse --version
        displayName: "Test the binary"
      

      # Initialize logging for blobfuse
      - script: |
          sudo cp ./systemd/10-blobfuse.conf /etc/rsyslog.d/
          sudo cp ./systemd/blobfuse-logrotate /etc/logrotate.d/blobfuse
        displayName: "Copy the syslog filter files"
        #continueOnError: true

      # Restart rsyslog to init the logging
      - script: |
          sudo service rsyslog restart
        displayName: "Restart rsyslogd service"
        #continueOnError: true
        
      # Create directory structures for the basic testing
      - script: |
          mkdir $(MOUNT_DIR)
          echo "Creating Mount dir " $(MOUNT_DIR)
        displayName: "Create Mount Directory"

      - script: |
          sudo mkdir $(TEMP_DIR)
          sudo chown -R `whoami` $(TEMP_DIR)
          chmod 777 $(TEMP_DIR)
          echo "Creating Cache dir " $(TEMP_DIR)
        displayName: "Create Cache Directory"
        
          
      # Set container name based on OS
      - script: |
          echo "::set-env name=CONT_NAME::$(containerName)"
        displayName: "Prepare contianer name"

      # --- Create ADLS config for Ubn-18.04 and mount it with ADLS option turn on  
      - script: |
          echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_ADLS)
          echo "accountKey " $(NIGHTLY_STO_ACC_KEY) >> $(BLOBFUSE_CFG_ADLS)
          echo "authType Key" >> $(BLOBFUSE_CFG_ADLS)
          echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_ADLS)
          cat $(BLOBFUSE_CFG_ADLS)
          echo "Account : " $(NIGHTLY_STO_ACC_NAME)
        displayName: "Create config file ADLS"

      # --- Create Block Blob config for Ubn-16.04 and mount it with ADLS option turn off  
      - script: |
          echo "accountName " $(NIGHTLY_STO_BLOB_ACC_NAME) > $(BLOBFUSE_CFG)
          echo "accountKey " $(NIGHTLY_STO_BLOB_ACC_KEY) >> $(BLOBFUSE_CFG)
          echo "authType Key" >> $(BLOBFUSE_CFG)
          echo "containerName " $(containerName) >> $(BLOBFUSE_CFG)
          cat $(BLOBFUSE_CFG)
          echo "Account : " $(NIGHTLY_STO_BLOB_ACC_NAME)
        displayName: "Create config file BlockBlob" 

      # Mount container using blobFuse
      - script: |
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true --use-attr-cache=true
        displayName: "Mount container ADLS"
        condition: eq(variables.imageName, 'ubuntu-20.04')
        timeoutInMinutes: 3
    
      - script: |
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG) --use-attr-cache=true
        displayName: "Mount container Block"
        condition: eq(variables.imageName, 'ubuntu-18.04')
        timeoutInMinutes: 3
      # --------------------------------------------------------------------


      - script : |
          sudo cat /var/log/blobfuse.log
        displayName: "Dump Mount Log"
        timeoutInMinutes: 1
        condition: failed()

      # Give some time for system to stablise
      - script: sleep 10s
        displayName: "Let the mount come online"

      # -------------------------------------------------------

      # Check the mount went through or not by listing the mounted directory
      - script: ls -l $(MOUNT_DIR)
        timeoutInMinutes: 5
        displayName: "TEST - Directory Listing"
        continueOnError: true

      # Clear directory form previous failed runs
      - script: |
          rm -rf $(MOUNT_DIR)/* 
        displayName: "TEST - Initial cleanup"
        timeoutInMinutes: 30
        continueOnError: true
              
      # Directory Operation Testing
      - script: mkdir $(MOUNT_DIR)/test_dir
        displayName: "TEST - Create Directory"
        timeoutInMinutes: 5
        continueOnError: true

      # GetStat on Directory
      - script: stat $(MOUNT_DIR)/test_dir
        displayName: "TEST - GetStat Directory"
        timeoutInMinutes: 3
        continueOnError: true

      # Delete newly created Directory
      - script: rm -rf $(MOUNT_DIR)/test_dir
        displayName: "TEST - Delete Directory"
        timeoutInMinutes: 5
        continueOnError: true

      # -------------------------------------------------------

      # File Operations Testing

      # Create a file in mounted directory
      - script: |
          touch $(MOUNT_DIR)/test.txt
        # dd bs=1000 count=1000000 if=/dev/zero of=$(MOUNT_DIR)/test.txt
        displayName: "TEST - Create File (Empty)"
        timeoutInMinutes: 10
        continueOnError: true
      
      # GetStat on File
      - script: stat $(MOUNT_DIR)/test.txt
        displayName: "TEST - GetStat File"
        timeoutInMinutes: 3
        #continueOnError: true

      # File Read-Write test
      - script: |
          sudo cat blobfuse-nightly.yml > $(MOUNT_DIR)/test.log
          sudo diff $(MOUNT_DIR)/test.log blobfuse-nightly.yml
          stat $(MOUNT_DIR)/test.log
        displayName: "TEST - Write to file and Read back"
        timeoutInMinutes: 10
        #continueOnError: true

      # File rename test
      - script: |
          mv $(MOUNT_DIR)/test.txt $(MOUNT_DIR)/test1.txt
        displayName: "TEST - Rename File"
        timeoutInMinutes: 5

      # File copy test
      - script: |
          mkdir $(MOUNT_DIR)/copy_dir
          cp -r ./blobfuse/ $(MOUNT_DIR)/copy_dir
          ls -l $(MOUNT_DIR)/copy_dir
          mv $(MOUNT_DIR)/copy_dir $(MOUNT_DIR)/copy_dir_new
          stat $(MOUNT_DIR)/copy_dir
          stat $(MOUNT_DIR)/copy_dir_new
        displayName: "TEST - Copy File and Rename Dir"
        timeoutInMinutes: 10
        continueOnError: true

      # Delete newly created file
      - script: | 
          rm -rf  $(MOUNT_DIR)/test.txt
          rm -rf  $(MOUNT_DIR)/test1.txt
          rm -rf  $(MOUNT_DIR)/test.log
        displayName: "TEST - Delete File"
        timeoutInMinutes: 10
        #continueOnError: true

      # Clear directory 
      - script: rm -rf $(MOUNT_DIR)/*
        displayName: "TEST - Directory Cleaning at End"
        timeoutInMinutes: 10
        continueOnError: true

      # Upload blobs and validate data by comparing 
      - script: |
          cp -R ./blobfuse/* $(MOUNT_DIR)/
          touch ./blobfuse/ishallcomeindiff.file
          time for i in {1..10}; do ls -l $(MOUNT_DIR); done
          diff -qr ./blobfuse/ $(MOUNT_DIR)/ 
          rm -rf $(MOUNT_DIR)/*
        displayName: "TEST - Data Validation"
        timeoutInMinutes: 10
        continueOnError: true

      # -------------------------------------------------------

      # Basic testing done.....
      
      # Test complete so now unmount the directory
      - script:  |
          sudo rm -rf $(MOUNT_DIR)/*
          sudo rm -rf $(MOUNT_DIR)/.*
          sudo fusermount -u $(MOUNT_DIR)
          sudo rm -rf $(TEMP_DIR)/*
        displayName: Unmount container
        timeoutInMinutes: 20
        #continueOnError: true
    
      # -------------------------------------------------------
      # BLOCK BLOB TESTS
      # Starting gTest
      
      # Create config file for gtest
      - script: |
          echo "accountName " $(NIGHTLY_STO_BLOB_ACC_NAME) > $(BLOBFUSE_CFG_GTEST)
          echo "accountKey " $(NIGHTLY_STO_BLOB_ACC_KEY) >> $(BLOBFUSE_CFG_GTEST)
          echo "authType Key" >> $(BLOBFUSE_CFG_GTEST)
          echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_GTEST)
          cat $(BLOBFUSE_CFG_GTEST)
          echo "Account : " $(NIGHTLY_STO_ACC_NAME)
        displayName: "TEST - BLOCK gTest Config"
      
      # Run gTest with the config file created earlier
      - script:  |
          cd ./build/
          sudo chmod 777 ./blobfusetests
          sudo ./blobfusetests 
          cd -
        displayName: TEST - BLOCK gTest
        timeoutInMinutes: 30
        continueOnError: true

      # -------------------------------------------------------
      # Starting stressTest

      - ${{ if eq(parameters.exhaustive_test, true) }}:
        # Mount a directory for stressTest and run it
        - script:  |
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            sudo mkdir $(BLOBFUSE_STRESS_DIR)
            sudo chown -R `whoami` $(BLOBFUSE_STRESS_DIR)
            sudo chmod 777 $(BLOBFUSE_STRESS_DIR)
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_GTEST) --use-attr-cache=true
            cd test
            go run stressTest.go $(MOUNT_DIR)
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK stressTest
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            sudo fusermount -u $(MOUNT_DIR)
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK stressTest Cleanup
          timeoutInMinutes: 30
          continueOnError: true

        # Mount a directory for stressTest and run it
        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            sudo mkdir $(BLOBFUSE_STRESS_DIR)
            sudo chown -R `whoami` $(BLOBFUSE_STRESS_DIR)
            sudo chmod 777 $(BLOBFUSE_STRESS_DIR)
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_GTEST)
            cd test
            go run stressTest.go $(MOUNT_DIR)
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK stressTest No Attr Cache
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            sudo fusermount -u $(MOUNT_DIR)
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK stressTest Cleanup
          timeoutInMinutes: 30
          continueOnError: true

        # -------------------------------------------------------
        # Mount a directory for feature test (Block) and run it
        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_GTEST) --file-cache-timeout-in-seconds=0
            cd test
            set -e && go test -v feature_test.go -args -mnt-path=$(MOUNT_DIR)
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK FeatureTest
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(TEMP_DIR)/*
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK FeatureTest Cleanup
          timeoutInMinutes: 30
          continueOnError: true


        # -------------------------------------------------------

        # ADLS TESTS
        # Mount a directory for stressTest (ADLS) and run it
        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true --use-attr-cache=true
            cd test
            go run stressTest.go $(MOUNT_DIR)
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS stressTest
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(TEMP_DIR)/*
            sudo rm -rf $(BLOBFUSE_STRESS_DIR)/*
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS stressTest Cleanup
          timeoutInMinutes: 30
          continueOnError: true
          
        # Mount a directory for stressTest (ADLS) and run it
        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true
            cd test
            go run stressTest.go $(MOUNT_DIR)
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS stressTest No Attr Cache
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(TEMP_DIR)/*
            sudo rm -rf $(BLOBFUSE_STRESS_DIR)/*
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS stressTest Cleanup
          timeoutInMinutes: 30
          continueOnError: true

        # Mount a directory for stressTest (ADLS) without symlink and run it
        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true --use-attr-cache=true --no-symlinks=true
            cd test
            go run stressTest.go $(MOUNT_DIR)
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS stressTest noSymlinks
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(TEMP_DIR)/*
            sudo rm -rf $(BLOBFUSE_STRESS_DIR)/*
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS stressTest Cleanup noSymlinks
          timeoutInMinutes: 30
          continueOnError: true

        # Mount a directory for stressTest (ADLS) and run 3 instance in parallel for stress test
        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            sudo apt-get install parallel -y
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true --use-attr-cache=true
            cd test
            for i in 1 2 3; do echo "go run stressTest.go $(MOUNT_DIR)"; done | parallel -j 3
            cd -
          displayName: TEST - ADLS stressTest Parallel
          timeoutInMinutes: 120
          condition: eq(variables.imageName, 'ubuntu-18.04')

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(TEMP_DIR)/*
            sudo rm -rf $(BLOBFUSE_STRESS_DIR)/*
          displayName: TEST - ADLS stressTest Cleanup Parallel
          timeoutInMinutes: 30
          condition: eq(variables.imageName, 'ubuntu-18.04')


        # -------------------------------------------------------
        # Mount a directory for feature test (ADLS) and run it
        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true --file-cache-timeout-in-seconds=0
            pidof blobfuse
            cd test
            set -e && go test -v feature_test.go -args -mnt-path=$(MOUNT_DIR) -adls=true
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS FeatureTest
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(TEMP_DIR)/*
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS FeatureTest Cleanup
          timeoutInMinutes: 30
          continueOnError: true
          
        # -------------------------------------------------------
        # Starting pyTest

        # Mount a directory for pyTest and run it
        - script:  |
            sudo rm -rf $(TEMP_DIR)/*
            sudo cp $(BLOBFUSE_CFG_ADLS) $(BLOBFUSE_CFG_GTEST)
            sudo ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true --use-attr-cache=true
            cd ./test/
            sudo python tests.py
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS pyTest
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(MOUNT_DIR)/.*
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(MOUNT_DIR)/.*
            sudo rm -rf $(TEMP_DIR)/*
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - ADLS pyTest Cleanup
          timeoutInMinutes: 10
          continueOnError: true


        # Mount a directory for pyTest (block) and run it
        - script:  |
            sudo rm -rf $(TEMP_DIR)/*
            sudo cp $(BLOBFUSE_CFG) $(BLOBFUSE_CFG_GTEST)
            sudo ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG) --use-attr-cache=true
            cd ./test/
            sudo python tests.py
            cd -
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK pyTest
          timeoutInMinutes: 120
          continueOnError: true

        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(MOUNT_DIR)/.*
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(MOUNT_DIR)/.*
            sudo rm -rf $(TEMP_DIR)/*
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - BLOCK pyTest Cleanup
          timeoutInMinutes: 10
          continueOnError: true
        # -------------------------------------------------------

        # - script:  |
        #    sudo rm -rf $(MOUNT_DIR)/*
        #    sudo rm -rf $(TEMP_DIR)/*
        #    ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_GTEST)
        #    cd stresstests/
        #    make
        #    chmod 777 ./blobfusestress
        #    sudo ./blobfusestress $(MOUNT_DIR) $(BLOBFUSE_STRESS_DIR)
        #    cd -
        #  condition: eq(variables['Build.SourceBranchName'], 'master')
        #  displayName: TEST - BLOCK CPP stressTest
        #  timeoutInMinutes: 120
        #  continueOnError: true

        # - script:  |
        #    sudo fusermount -u $(MOUNT_DIR)
        #    sudo rm -rf $(BLOBFUSE_STRESS_DIR)/*
        #    sudo rm -rf $(TEMP_DIR)/*
        #  condition: eq(variables['Build.SourceBranchName'], 'master')
        #  displayName: TEST - BLOCK CPP stressTest Cleanup
        #  timeoutInMinutes: 30
        #  continueOnError: true



      # -------------------------------------------------------
      # Huge flie listing test cases

      - script: |
          echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_ADLS)
          echo "accountKey " $(NIGHTLY_STO_ACC_KEY) >> $(BLOBFUSE_CFG_ADLS)
          echo "authType Key" >> $(BLOBFUSE_CFG_ADLS)
          echo "containerName testcnt" >> $(BLOBFUSE_CFG_ADLS)
          cat $(BLOBFUSE_CFG_ADLS)
          echo "Account : " $(NIGHTLY_STO_ACC_NAME)
        displayName: "Create config file ADLS"

      # --- Create Block Blob config for Ubn-16.04 and mount it with ADLS option turn off  
      - script: |
          echo "accountName " $(NIGHTLY_STO_BLOB_ACC_NAME) > $(BLOBFUSE_CFG)
          echo "accountKey " $(NIGHTLY_STO_BLOB_ACC_KEY) >> $(BLOBFUSE_CFG)
          echo "authType Key" >> $(BLOBFUSE_CFG)
          echo "containerName testcnt1" >> $(BLOBFUSE_CFG)
          cat $(BLOBFUSE_CFG)
          echo "Account : " $(NIGHTLY_STO_BLOB_ACC_NAME)
        displayName: "Create config file BlockBlob" 

      # Mount container using blobFuse (ADLS)
      - script: |
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true --use-attr-cache=true --no-symlinks=true
        displayName: "HugeList: Mount container ADLS"
        condition: eq(variables.imageName, 'ubuntu-20.04')
        timeoutInMinutes: 3

      # Mount container using blobFuse (block Blob)
      - script: |
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG) --use-attr-cache=true
        displayName: "HugeList: Mount container Block"
        condition: eq(variables.imageName, 'ubuntu-18.04')
        timeoutInMinutes: 3

      # Test huge listing
      - script: |
          ls -l $(MOUNT_DIR)/huge | wc -l
        displayName: "HugeList: Dir Listing"
        timeoutInMinutes: 120

      # Unmount Huge Listing
      - script: |
          sudo fusermount -u $(MOUNT_DIR)
          sudo kill -9 `pidof blobfuse`
          sudo rm -rf $(TEMP_DIR)/*
        displayName: "HugeList: UnMount"
        timeoutInMinutes: 2

      # -------------------------------------------------------

      # Create config file for SPN Login
      - script: |
          echo "accountName " $(NIGHTLY_SPN_ACC_NAME) > $(BLOBFUSE_CFG_GTEST)
          echo "authType SPN" >> $(BLOBFUSE_CFG_GTEST)
          echo "servicePrincipalClientId " $(NIGHTLY_SPN_CLIENT_ID) >> $(BLOBFUSE_CFG_GTEST)
          echo "servicePrincipalTenantId " $(NIGHTLY_SPN_TENANT_ID) >> $(BLOBFUSE_CFG_GTEST)
          echo "servicePrincipalClientSecret " $(NIGHTLY_SPN_CLIENT_SECRET) >> $(BLOBFUSE_CFG_GTEST)
          echo "containerName " $(NIGHTLY_SPN_CONT_NAME) >> $(BLOBFUSE_CFG_GTEST)
          cat $(BLOBFUSE_CFG_GTEST)
          echo "Account : " $(NIGHTLY_SPN_ACC_NAME)
        displayName: "TEST - Create SPN Config"
        condition: eq(variables.imageName, 'ubuntu-20.04')

      # List the blobs to verify that the login went successful
      - script:  |
          sudo rm -rf $(MOUNT_DIR)/*
          sudo rm -rf $(TEMP_DIR)/*
          sudo fusermount -u $(MOUNT_DIR)s
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_GTEST)
          sleep 5s
          df
          sudo ps -aux | grep blobfuse
          ls -l $(MOUNT_DIR)
          mkdir $(MOUNT_DIR)/A
          touch $(MOUNT_DIR)/A/a.txt
          echo "ASDF" > $(MOUNT_DIR)/A/b.txt
          cp $(MOUNT_DIR)/A/b.txt $(MOUNT_DIR)/A/c.txt
          ls -lRt $(MOUNT_DIR)/A
          rm -rf $(MOUNT_DIR)/A
          sudo fusermount -u $(MOUNT_DIR)
          sudo kill -9 `pidof blobfuse`
        # condition: eq(variables['Build.SourceBranchName'], 'master')
        displayName: TEST - SPN Validation
        timeoutInMinutes: 120
        continueOnError: true
        condition: eq(variables.imageName, 'ubuntu-20.04')

      # List blobs for adls login with spn auth
      - script: |
          echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_ADLS)
          echo "authType SPN" >> $(BLOBFUSE_CFG_ADLS)
          echo "servicePrincipalClientId " $(NIGHTLY_ADL_SPN_CLIENT_ID) >> $(BLOBFUSE_CFG_ADLS)
          echo "servicePrincipalTenantId " $(NIGHTLY_ADL_SPN_TENANT_ID) >> $(BLOBFUSE_CFG_ADLS)
          echo "servicePrincipalClientSecret " $(NIGHTLY_ADL_SPN_CLIENT_SECRET) >> $(BLOBFUSE_CFG_ADLS)
          echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_ADLS)
          cat $(BLOBFUSE_CFG_ADLS)
        displayName: "TEST - Create SPN Config for ADLS Gen2"
        condition: eq(variables.imageName, 'ubuntu-20.04')

      # List the blobs to verify that the login went successful with SPN auth and ADLs and list works
      - script:  |
          sudo rm -rf $(MOUNT_DIR)/*
          sudo rm -rf $(TEMP_DIR)/*
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_ADLS) --use-adls=true 
          sleep 5s
          df
          sudo ps -aux | grep blobfuse
          ls -l $(MOUNT_DIR)
          mkdir $(MOUNT_DIR)/B
          touch $(MOUNT_DIR)/B/a.txt
          echo "ASDF" > $(MOUNT_DIR)/B/b.txt
          cp $(MOUNT_DIR)/B/b.txt $(MOUNT_DIR)/B/c.txt
          ls -lRt $(MOUNT_DIR)/B
          rm -rf $(MOUNT_DIR)/B
          sudo fusermount -u $(MOUNT_DIR)
          sudo kill -9 `pidof blobfuse`
        # condition: eq(variables['Build.SourceBranchName'], 'master')
        displayName: TEST - SPN Validation for ADLS Gen2
        timeoutInMinutes: 120
        continueOnError: true
        condition: eq(variables.imageName, 'ubuntu-20.04')
        

      # -------------------------------------------------------

      # Create config file for SAS Login
      - script: |
          echo "accountName " $(NIGHTLY_STO_BLOB_ACC_NAME) > $(BLOBFUSE_CFG_GTEST)
          echo "sasToken " "$(NIGHTLY_STO_ACC_SAS)" >> $(BLOBFUSE_CFG_GTEST)
          echo "authType SAS" >> $(BLOBFUSE_CFG_GTEST)
          echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_GTEST)
          cat $(BLOBFUSE_CFG_GTEST)
          echo "Account : " $(NIGHTLY_STO_BLOB_ACC_NAME)
        displayName: "TEST - Create SAS Config"
        condition: eq(variables.imageName, 'ubuntu-18.04')

      # List the blobs to verify that the login went successful
      - script:  |
          sudo rm -rf $(MOUNT_DIR)/*
          sudo rm -rf $(TEMP_DIR)/*
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_GTEST)
          sleep 5s
          ls -l $(MOUNT_DIR)
          mkdir $(MOUNT_DIR)/B
          touch $(MOUNT_DIR)/B/b.txt
          echo "ASDF" > $(MOUNT_DIR)/B/c.txt
          cp $(MOUNT_DIR)/B/c.txt $(MOUNT_DIR)/B/d.txt
          ls -lRt $(MOUNT_DIR)/B
          rm -rf $(MOUNT_DIR)/B
          sudo fusermount -u $(MOUNT_DIR)
          sudo kill -9 `pidof blobfuse`
        # condition: eq(variables['Build.SourceBranchName'], 'master')
        displayName: TEST - SAS Validation
        timeoutInMinutes: 120
        continueOnError: true
        condition: eq(variables.imageName, 'ubuntu-18.04')

        # Create config file for ADLS SAS Login
      - script: |
          echo "accountName " $(AZTEST_ADLS_ACC_NAME) > $(BLOBFUSE_CFG_GTEST)
          echo "sasToken " "$(AZTEST_ADLS_SAS)" >> $(BLOBFUSE_CFG_GTEST)
          echo "authType SAS" >> $(BLOBFUSE_CFG_GTEST)
          echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_GTEST)
          cat $(BLOBFUSE_CFG_GTEST)
          echo "Account : " $(AZTEST_ADLS_ACC_NAME)
        displayName: "TEST - Create ADLS SAS Config"
        condition: eq(variables.imageName, 'ubuntu-18.04')

      # List the blobs to verify that the login went successful
      - script:  |
          sudo rm -rf $(MOUNT_DIR)/*
          sudo rm -rf $(TEMP_DIR)/*
          ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_GTEST) --use-adls=true
          sleep 5s
          ls -l $(MOUNT_DIR)
          mkdir $(MOUNT_DIR)/B
          touch $(MOUNT_DIR)/B/b.txt
          echo "ASDF" > $(MOUNT_DIR)/B/c.txt
          cp $(MOUNT_DIR)/B/c.txt $(MOUNT_DIR)/B/d.txt
          ls -lRt $(MOUNT_DIR)/B
          rm -rf $(MOUNT_DIR)/B
          sudo fusermount -u $(MOUNT_DIR)
          sudo kill -9 `pidof blobfuse`
        # condition: eq(variables['Build.SourceBranchName'], 'master')
        displayName: TEST - ADLS SAS Validation
        timeoutInMinutes: 120
        continueOnError: true
        condition: eq(variables.imageName, 'ubuntu-18.04')
      # -------------------------------------------------------

      # Cleanup at the end
      - script:  |
          sudo fusermount -u $(MOUNT_DIR)
          sudo kill -9 `pidof blobfuse`
          sudo rm -rf $(TEMP_DIR)/*
        displayName: Cleanup
        timeoutInMinutes: 120
        continueOnError: true

      # Print the log files
      - script: sudo cat /var/log/blobfuse.log
        displayName: Print the log file
        continueOnError: true
    


  - ${{ if eq(parameters.exhaustive_test, true) }}:
    # Other then Ubuntu just run the feature_test
    - job: Set_2
      timeoutInMinutes: 30
      strategy:
        matrix:
          RHEL-7.5-new-curl:
            DistroVer: "RHEL-7.5"
            AgentName : "RHEL 7.5"
            Description: "Red Hat Enterprise Linux 7.5 New Curl"
            containerName: 'test-cnt-rhel-75'

          RHEL-7.5-old-curl:
            DistroVer: "RHEL-7.5"
            AgentName : "RHEL 7.5.2"
            Description: "Red Hat Enterprise Linux 7.5 Old Curl"
            containerName: 'test-cnt-rhel-75-test'
            
          RHEL-8.1:
            DistroVer: "RHEL-8.1"
            AgentName: "RHEL 8.1"
            Description: "Red Hat Enterprise Linux 8.1"
            containerName: 'test-cnt-rhel-81'

          RHEL-8.2:
            DistroVer: "RHEL-8.2"
            AgentName: "RHEL 8.2"
            Description: "Red Hat Enterprise Linux 8.2"
            containerName: 'test-cnt-rhel-82'

          CentOS-7.0:
            DistroVer: "CentOS-7.0"
            AgentName: "COS 7.0"
            Description: "CentOS Linux 7.0"
            containerName: 'test-cnt-cent-7'

          CentOS-8.0:
            DistroVer: "CentOS-8.0"
            AgentName: "COS 8.0"
            Description: "CentOS Linux 8.0"
            containerName: 'test-cnt-cent-8'

          Oracle-8.1:
            DistroVer: "Oracle-8.1"
            AgentName: "ORA 8.1"
            Description: "Oracle Linux 8.1 Gen 2"
            containerName: 'test-cnt-ora-81'

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - group: NightlyBlobFuse
      - name: WORK_DIR
        value: "/usr/pipeline/blobfuse"
      - name: ROOT_DIR
        value: "/usr/pipeline/blobfuse/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      - name: MOUNT_DIR
        value: "/usr/pipeline/blob_mnt"
      - name: TEMP_DIR
        value: "/usr/pipeline/temp"
      - name: BLOBFUSE_CFG_FILE
        value: "/usr/pipeline/blobfuse/azure-storage-fuse/test/blobfuse.cfg"
      
      steps:
        # DevOps checks for a specific git version and it fails on some distros
        # so instead of pipeline checking out the code, do it manually
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        # Install all dependencies
        - script: |
            sudo yum update -y
            sudo yum install git tar make cmake gcc gcc-c++ curl-devel gnutls-devel libuuid-devel boost-devel libgcrypt-devel rpm-build golang -y
          displayName: "Basic Tools Setup"

        # Install libfuse
        - script: |
            sudo yum install fuse fuse-devel -y
          displayName: "libFuse Setup"

        # Prebuild cleanup
        - script: |
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Add the test work here
        # Create directory structures for the basic testing
        - script: |
            sudo mkdir $(MOUNT_DIR)
            sudo chown -R `whoami` $(MOUNT_DIR)
            chmod 777 $(MOUNT_DIR)
            sudo mkdir $(TEMP_DIR)
            sudo chown -R `whoami` $(TEMP_DIR)
            chmod 777 $(TEMP_DIR)
          displayName: "Create Directories"
        
        # --- Create config files for testing
        - script: |
            sudo touch $(BLOBFUSE_CFG_FILE)
            sudo chown -R `whoami` $(BLOBFUSE_CFG_FILE)
            chmod 777 $(BLOBFUSE_CFG_FILE)
            echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_FILE)
            echo "accountKey " $(NIGHTLY_STO_ACC_KEY) >> $(BLOBFUSE_CFG_FILE)
            echo "authType Key" >> $(BLOBFUSE_CFG_FILE)
            echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_FILE)
            cat $(BLOBFUSE_CFG_FILE)
            echo "Account : " $(NIGHTLY_STO_ACC_NAME)
          displayName: "Create config file"

        # Mount a directory for feature test (Block) and run it
        - script:  |
            curl --version
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof ./build/blobfuse`
            sudo kill -9 `pidof fusermount`
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_FILE) --file-cache-timeout-in-seconds=0 --use-adls=true --use-attr-cache=true
          workingDirectory: $(ROOT_DIR)
          displayName: "Mount Blobfuse"

        - script: | 
            sudo rm -rf $(MOUNT_DIR)/*  
            cd test
            go test -v feature_test.go -args -mnt-path=$(MOUNT_DIR) -adls=true
          workingDirectory: $(ROOT_DIR)
          displayName: TEST - ADLS FeatureTest
          timeoutInMinutes: 20

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
          workingDirectory: $(ROOT_DIR)
          displayName: 'Unmount blobfuse'
          timeoutInMinutes: 5
          condition: always()

        # --- Negative testing for auth failure post fork
        - script: |
            sudo touch $(BLOBFUSE_CFG_FILE)
            sudo chown -R `whoami` $(BLOBFUSE_CFG_FILE)
            chmod 777 $(BLOBFUSE_CFG_FILE)
            echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_FILE)
            echo "accountKey " $(NIGHTLY_STO_ACC_KEY) "abc" >> $(BLOBFUSE_CFG_FILE)
            echo "authType Key" >> $(BLOBFUSE_CFG_FILE)
            echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_FILE)
            cat $(BLOBFUSE_CFG_FILE)
            echo "Account : " $(NIGHTLY_STO_ACC_NAME)
          displayName: "Create config file - Negative"
          # condition: or(eq(variables.containerName, 'test-cnt-rhel-75-test'), eq(variables.containerName, 'test-cnt-rhel-82'))

        # Mount a directory for feature test (Block) and run it
        # This mount is bound to fail so to ignore the exit code of the blobfuse use '|| :' to redirect output to null
        # with this output will come on screen but the piepline task will not fail due to exit(1) by blobfuse
        - script:  |
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_FILE) --file-cache-timeout-in-seconds=0 --use-adls=true --use-attr-cache=true 2>&1 || :
          workingDirectory: $(ROOT_DIR)
          displayName: "Mount Blobfuse - Negative"
          # condition: or(eq(variables.containerName, 'test-cnt-rhel-75-test'), eq(variables.containerName, 'test-cnt-rhel-82'))

        - script:  |
            rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(TEMP_DIR)/
            sudo rm -rf $(MOUNT_DIR)
            sudo rm -rf $(BLOBFUSE_CFG_FILE)
            sudo rm -rf $(WORK_DIR)
          workingDirectory: $(ROOT_DIR)
          displayName: 'Cleanup Directories'
          timeoutInMinutes: 5
          condition: always()

        - script: |
            pwd
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()

    - job: Set_3
      timeoutInMinutes: 30
      strategy:
        matrix:
          Debian-9.0:
            DistroVer: "Debian9.0"
            AgentName : "DEB 9.0"
            Description: "Debian Linux 9.0"
            containerName: 'test-cnt-deb-9'
          Debian-10.0:
            DistroVer: "Debian10.0"
            AgentName : "DEB 10.0"
            Description: "Debian Linux 10.0 Gen 1"
            containerName: 'test-cnt-deb-10'

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - group: NightlyBlobFuse
      - name: WORK_DIR
        value: "/home/vsts/work/"
      - name: ROOT_DIR
        value: "/home/vsts/work/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      - name: MOUNT_DIR
        value: "/home/vsts/work/blob_mnt"
      - name: TEMP_DIR
        value: "/mnt/blobfusetmp"
      - name: BLOBFUSE_CFG_FILE
        value: "/home/vsts/blobfuse.cfg"
      
      steps:
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        # Install all dependencies
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ golang -y
          displayName: "Basic Tools Setup"

        # Install libfuse
        - script: |
            sudo apt-get install libfuse-dev fuse -y
          displayName: "libFuse Setup"

        # Prebuild cleanup
        - script: |
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Add the test work here
        # Create directory structures for the basic testing
        - script: |
            sudo mkdir $(MOUNT_DIR)
            sudo chown -R `whoami` $(MOUNT_DIR)
            chmod 777 $(MOUNT_DIR)
            sudo mkdir $(TEMP_DIR)
            sudo chown -R `whoami` $(TEMP_DIR)
            chmod 777 $(TEMP_DIR)
          displayName: "Create Directories"
        
        # --- Create config files for testing
        - script: |
            sudo touch $(BLOBFUSE_CFG_FILE)
            sudo chown -R `whoami` $(BLOBFUSE_CFG_FILE)
            chmod 777 $(BLOBFUSE_CFG_FILE)
            echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_FILE)
            echo "accountKey " $(NIGHTLY_STO_ACC_KEY) >> $(BLOBFUSE_CFG_FILE)
            echo "authType Key" >> $(BLOBFUSE_CFG_FILE)
            echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_FILE)
            cat $(BLOBFUSE_CFG_FILE)
            echo "Account : " $(NIGHTLY_STO_ACC_NAME)
          displayName: "Create config file"

        # Mount a directory for feature test (Block) and run it
        - script:  |
            curl --version
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_FILE) --file-cache-timeout-in-seconds=0 --use-adls=true --use-attr-cache=true
          workingDirectory: $(ROOT_DIR)
          displayName: "Mount Blobfuse"

        - script: | 
            sudo rm -rf $(MOUNT_DIR)/*  
            cd test
            go test -v feature_test.go -args -mnt-path=$(MOUNT_DIR) -adls=true
          workingDirectory: $(ROOT_DIR)
          displayName: TEST - ADLS FeatureTest
          timeoutInMinutes: 20

        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(TEMP_DIR)/
            sudo rm -rf $(MOUNT_DIR)
            sudo rm -rf $(BLOBFUSE_CFG_FILE)
            sudo rm -rf $(WORK_DIR)
          workingDirectory: $(ROOT_DIR)
          displayName: 'Cleanup Directories'
          timeoutInMinutes: 5
          condition: always()

        - script: |
            pwd
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()

    - job: Set_4
      timeoutInMinutes: 30
      strategy:
        matrix:
          SUSE-15G2:
            DistroVer: "Suse-15Gen2"
            AgentName : "SUSE 15G2"
            Description: "SUSE Ent Linux 15-SP1-Gen2"
            containerName: 'test-cnt-suse-15'

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - group: NightlyBlobFuse
      - name: WORK_DIR
        value: "/home/vsts/work/"
      - name: ROOT_DIR
        value: "/home/vsts/work/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      - name: MOUNT_DIR
        value: "/home/vsts/work/blob_mnt"
      - name: TEMP_DIR
        value: "/mnt/blobfusetmp"
      - name: BLOBFUSE_CFG_FILE
        value: "/home/vsts/blobfuse.cfg"
      
      steps:
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        # Install all dependencies
        #- script: |
        #    sudo zypper -n update git tar make cmake gcc gcc-c++ curl-devel gnutls-devel libuuid-devel boost-devel libboost*devel libgcrypt-devel rpm-build go
        #  displayName: "Basic Tools Setup"

        # Install libfuse
        #- script: |
        #    sudo zypper -n update fuse-devel fuse
        #  displayName: "libFuse Setup"

        # Prebuild cleanup
        - script: |
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Add the test work here
        # Create directory structures for the basic testing
        - script: |
            sudo mkdir $(MOUNT_DIR)
            sudo chown -R `whoami` $(MOUNT_DIR)
            chmod 777 $(MOUNT_DIR)
            sudo mkdir $(TEMP_DIR)
            sudo chown -R `whoami` $(TEMP_DIR)
            chmod 777 $(TEMP_DIR)
          displayName: "Create Directories"
        
        # --- Create config files for testing
        - script: |
            sudo touch $(BLOBFUSE_CFG_FILE)
            sudo chown -R `whoami` $(BLOBFUSE_CFG_FILE)
            chmod 777 $(BLOBFUSE_CFG_FILE)
            echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_FILE)
            echo "accountKey " $(NIGHTLY_STO_ACC_KEY) >> $(BLOBFUSE_CFG_FILE)
            echo "authType Key" >> $(BLOBFUSE_CFG_FILE)
            echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_FILE)
            cat $(BLOBFUSE_CFG_FILE)
            echo "Account : " $(NIGHTLY_STO_ACC_NAME)
          displayName: "Create config file"

        # Mount a directory for feature test (Block) and run it
        - script:  |
            curl --version
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_FILE) --file-cache-timeout-in-seconds=0 --use-adls=true --use-attr-cache=true
          workingDirectory: $(ROOT_DIR)
          displayName: "Mount Blobfuse"

        - script: | 
            sudo rm -rf $(MOUNT_DIR)/*  
            cd test
            go test -v feature_test.go -args -mnt-path=$(MOUNT_DIR) -adls=true
          workingDirectory: $(ROOT_DIR)
          displayName: TEST - ADLS FeatureTest
          timeoutInMinutes: 20

        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(TEMP_DIR)/
            sudo rm -rf $(MOUNT_DIR)
            sudo rm -rf $(BLOBFUSE_CFG_FILE)
            sudo rm -rf $(WORK_DIR)
          workingDirectory: $(ROOT_DIR)
          displayName: 'Cleanup Directories'
          timeoutInMinutes: 5
          condition: always()

        - script: |
            pwd
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()


  - ${{ if eq(parameters.msi_test, true) }}:
    - job: Set_6
      timeoutInMinutes: 60
      strategy:
        matrix:
          MSI_Test:
            DistroVer: "Ubn20_MSI"
            AgentName : "MSITestUBN20"
            Description: "MSI Test - 2"

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - group: NightlyBlobFuse
      - name: WORK_DIR
        value: "/home/vsts/work/"
      - name: ROOT_DIR
        value: "/home/vsts/work/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      - name: MOUNT_DIR
        value: "/home/vibhansa/blob_mnt"
      - name: TEMP_DIR
        value: "/mnt/blobfusetmp"
      - name: BLOBFUSE_CFG_FILE
        value: "/home/vibhansa/myblob.cfg.msi"
      - name: BLOBFUSE_CFG_FILE_ADLS
        value: "/home/vibhansa/myblob.cfg.msi.adls"
      
      steps:
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        # Install all dependencies
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ golang -y
          displayName: "Basic Tools Setup"

        # Install libfuse
        - script: |
            sudo apt-get install libfuse-dev fuse -y
          displayName: "libFuse Setup"

        # Prebuild cleanup
        - script: |
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Add the test work here
        # Create directory structures for the basic testing
        - script: |
            sudo mkdir $(MOUNT_DIR)
            sudo chown -R `whoami` $(MOUNT_DIR)
            chmod 777 $(MOUNT_DIR)
            sudo mkdir $(TEMP_DIR)
            sudo chown -R `whoami` $(TEMP_DIR)
            chmod 777 $(TEMP_DIR)
          displayName: "Create Directories"
        
        # Mount a directory for feature test (Block) and run it
        - script:  |
            curl --version
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_FILE)
          workingDirectory: $(ROOT_DIR)
          displayName: "Mount Blobfuse"

        # List the blobs to verify that the login went successful
        - script:  |
            df
            sudo ps -aux | grep blobfuse
            ls -l $(MOUNT_DIR)
            mkdir $(MOUNT_DIR)/MSITest
            touch $(MOUNT_DIR)/MSITest/b.txt
            echo "ASDF" > $(MOUNT_DIR)/MSITest/c.txt
            cp $(MOUNT_DIR)/MSITest/c.txt $(MOUNT_DIR)/MSITest/d.txt
            ls -lRt $(MOUNT_DIR)/MSITest
            rm -rf $(MOUNT_DIR)/MSITest
            sudo fusermount -u $(MOUNT_DIR)
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - MSI Validation
          timeoutInMinutes: 20
          continueOnError: true
          workingDirectory: $(ROOT_DIR)

        # List the blobs to verify that the login went successful
        - script:  |
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_FILE_ADLS) --use-adls=true
            df
            sudo ps -aux | grep blobfuse
            mkdir $(MOUNT_DIR)/MSITestADLS
            touch $(MOUNT_DIR)/MSITestADLS/b.txt
            echo "ASDF" > $(MOUNT_DIR)/MSITestADLS/c.txt
            cp $(MOUNT_DIR)/MSITestADLS/c.txt $(MOUNT_DIR)/MSITestADLS/d.txt
            ls -lRt $(MOUNT_DIR)/MSITestADLS
            rm -rf $(MOUNT_DIR)/MSITestADLS
            sudo fusermount -u $(MOUNT_DIR)
          # condition: eq(variables['Build.SourceBranchName'], 'master')
          displayName: TEST - MSI Validation ADLS
          timeoutInMinutes: 20
          continueOnError: true
          workingDirectory: $(ROOT_DIR)

        - script: |
            pwd
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
            sudo rm -rf $(WORK_DIR)
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
          displayName: 'Clean Agent Directories'
          condition: always()
    
  - ${{ if eq(parameters.proxy_test, true) }}:    
    - job: Set_7
      timeoutInMinutes: 60
      strategy:
        matrix:
          Proxy_Test:
            DistroVer: "Ubuntu-20P"
            AgentName : "UBN20Proxy"
            Description: "Blobfuse : Proxy"
            containerName: 'ubn-20-proxy'

      pool:
        name: "Blobfuse Pool"
        demands:
        - Agent.Name -equals $(AgentName)

      variables:
      - group: NightlyBlobFuse
      - name: WORK_DIR
        value: "/home/vsts/work/"
      - name: ROOT_DIR
        value: "/home/vsts/work/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true

      - name: MOUNT_DIR
        value: "/home/vsts/work/blob_mnt"
      - name: TEMP_DIR
        value: "/mnt/blobfusetmp"
      - name: BLOBFUSE_CFG_FILE
        value: "/home/vsts/blobfuse.cfg"
      
      steps:
        - checkout: none

        # Install all dependencies
        - script: |
            echo $(Description)
            hostnamectl
          displayName: "Print Agent Info"

        - script: |
            export http_proxy="http://10.1.22.4:8080/"
            export https_proxy="http://10.1.22.4:8080/"
            export no_proxy="localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"
          displayName: "Setup Proxy"          

        # Install all dependencies
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ golang -y
          displayName: "Basic Tools Setup"
          env:
            http_proxy: "http://10.1.22.4:8080/"
            https_proxy: "http://10.1.22.4:8080/"
            no_proxy: "localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"

        # Install libfuse
        - script: |
            sudo apt-get install libfuse-dev fuse -y
          displayName: "libFuse Setup"
          env:
            http_proxy: "http://10.1.22.4:8080/"
            https_proxy: "http://10.1.22.4:8080/"
            no_proxy: "localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"

        # Prebuild cleanup
        - script: |
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(WORK_DIR)
          displayName: "Prebuild cleanup"

        # Checkout code
        - script: |
            sudo mkdir -p $(WORK_DIR)
            sudo chown -R `whoami` $(WORK_DIR)
            chmod 777 $(WORK_DIR)
          displayName: "Create Directory structure"

        # Checkout code
        - script: |
            echo "HTTP  : " $http_proxy
            echo "HTTPS : " $https_proxy
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: "Checkout code"
          workingDirectory: $(WORK_DIR)
          env:
            http_proxy: "http://10.1.22.4:8080/"
            https_proxy: "http://10.1.22.4:8080/"
            no_proxy: "localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"

        # Checkout branch
        - script: |
            echo $(Build.SourceBranch)
            echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
          displayName: "Checkout Branch"
          workingDirectory: $(ROOT_DIR)
          env:
            http_proxy: "http://10.1.22.4:8080/"
            https_proxy: "http://10.1.22.4:8080/"
            no_proxy: "localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"

        # List commits consumed for this build
        - script: |
            echo "Below commits were done in last 12 hours : " `date` 
            git --no-pager log --since="12 hours ago" --stat
          displayName: "List Commits"
          workingDirectory: $(ROOT_DIR)
          env:
            http_proxy: "http://10.1.22.4:8080/"
            https_proxy: "http://10.1.22.4:8080/"
            no_proxy: "localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"

          

        # Build the blobFuse binary
        - script: |
            sudo chmod +x build.sh
            . ./build.sh
          displayName: "Build BlobFuse"
          workingDirectory: $(ROOT_DIR)

        # Test the binary just to make sure it was built fine
        - script: |
            ./build/blobfuse --version
          displayName: "Test the binary"
          workingDirectory: $(ROOT_DIR)

        # Add the test work here
        # Create directory structures for the basic testing
        - script: |
            sudo mkdir $(MOUNT_DIR)
            sudo chown -R `whoami` $(MOUNT_DIR)
            chmod 777 $(MOUNT_DIR)
            sudo mkdir $(TEMP_DIR)
            sudo chown -R `whoami` $(TEMP_DIR)
            chmod 777 $(TEMP_DIR)
          displayName: "Create Directories"
        
        # --- Create config files for testing
        - script: |
            sudo touch $(BLOBFUSE_CFG_FILE)
            sudo chown -R `whoami` $(BLOBFUSE_CFG_FILE)
            chmod 777 $(BLOBFUSE_CFG_FILE)
            echo "accountName " $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG_FILE)
            echo "accountKey " $(NIGHTLY_STO_ACC_KEY) >> $(BLOBFUSE_CFG_FILE)
            echo "authType Key" >> $(BLOBFUSE_CFG_FILE)
            echo "containerName " $(containerName) >> $(BLOBFUSE_CFG_FILE)
            cat $(BLOBFUSE_CFG_FILE)
            echo "Account : " $(NIGHTLY_STO_ACC_NAME)
          displayName: "Create config file"

        # Mount a directory for feature test (Block) and run it
        - script:  |
            curl --version
            sudo fusermount -u $(MOUNT_DIR)
            sudo rm -rf $(MOUNT_DIR)/*
            sudo rm -rf $(TEMP_DIR)/*
            ./build/blobfuse $(MOUNT_DIR) --tmp-path=$(TEMP_DIR) --config-file=$(BLOBFUSE_CFG_FILE) --file-cache-timeout-in-seconds=0 --use-adls=true --use-attr-cache=true
          workingDirectory: $(ROOT_DIR)
          displayName: "Mount Blobfuse"
          env:
            http_proxy: "http://10.1.22.4:8080/"
            https_proxy: "http://10.1.22.4:8080/"
            no_proxy: "localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"


        - script: | 
            sudo rm -rf $(MOUNT_DIR)/*  
            cd test
            go test -v feature_test.go -args -mnt-path=$(MOUNT_DIR) -adls=true
          workingDirectory: $(ROOT_DIR)
          displayName: TEST - ADLS FeatureTest
          timeoutInMinutes: 20
          env:
            http_proxy: "http://10.1.22.4:8080/"
            https_proxy: "http://10.1.22.4:8080/"
            no_proxy: "localhost,http://10.1.22.4, 10.1.23.0/24, 10.1.22.0/24"


        - script:  |
            sudo rm -rf $(MOUNT_DIR)/*
            sudo fusermount -u $(MOUNT_DIR)
            sudo kill -9 `pidof blobfuse`
            sudo rm -rf $(TEMP_DIR)/
            sudo rm -rf $(MOUNT_DIR)
            sudo rm -rf $(BLOBFUSE_CFG_FILE)
            sudo rm -rf $(WORK_DIR)
          workingDirectory: $(ROOT_DIR)
          displayName: 'Cleanup Directories'
          timeoutInMinutes: 5
          condition: always()

        - script: |
            pwd
            cd /`pwd | cut -d '/' -f 2,3,4,5`
            sudo rm -rf [0-9]
          displayName: 'Clean Agent Directories'
          condition: always()
