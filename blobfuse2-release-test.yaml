parameters:
  - name: tag
    displayName: 'New Release Tag'
    type: string
    default: 'blobfuse2-'
  
  - name: unit_test
    displayName: 'Execute Unit Tests'
    type: boolean
    default: false

  - name: post_release
    displayName: 'Post Release on Github'
    type: boolean
    default: false

  - name: draft
    displayName: 'Post as Draft Release'
    type: boolean
    default: false

  - name: prerelease
    displayName: 'Post as PreRelease'
    type: boolean
    default: false

  - name: update_version
    displayName: 'Update Version'
    type: boolean
    default: false

# Do not trigger this pipeline automatically
trigger: none
pr: none

stages:
  - stage: BuildArtifacts
    jobs:
      - job: Set_1
        strategy:
          matrix:
            Ubuntu-18:
              vmImage: 'ubuntu-18.04'
              fuselib: 'libfuse-dev'
              tags: 'fuse2'
              container: 'test-cnt-ubn-18'
            Ubuntu-20:
              vmImage: 'ubuntu-20.04'
              fuselib: 'libfuse3-dev'
              tags: 'fuse3'
              container: 'test-cnt-ubn-20'
        
        pool:
          vmImage: $(vmImage)

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
        
        steps:
          - checkout: none
          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)
          
          # list commits from past 12hrs
          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
              git --no-pager log --since="12 hours ago" --stat
            displayName: 'List Commits'
            workingDirectory: $(work_dir)
          
          # install dependencies required for compiling blobfuse
          - script: |
              sudo apt-get update --fix-missing
              sudo apt-get install ruby-dev build-essential $(fuselib) -y
              sudo gem install fpm -V
            displayName: "Installing Dependencies"

          # build blobfuse2 and generate binary
          - template: 'azure-pipeline-templates/build-release.yml'
            parameters:
              work_dir: $(work_dir)
              root_dir: $(root_dir)
              unit_test: ${{ parameters.unit_test }}
              tags: $(tags)
              container: $(container)

          # place the generated binary files & any additional files in appropriate locations
          - script: |
              mkdir -p pkgDir/usr/bin/
              mkdir -p pkgDir/usr/share/blobfuse2/
              cp azure-storage-fuse/blobfuse2 pkgDir/usr/bin/blobfuse2
              cp azure-storage-fuse/setup/baseConfig.yaml pkgDir/usr/share/blobfuse2/
              cp azure-storage-fuse/sampleFileCacheConfig.yaml pkgDir/usr/share/blobfuse2/
              cp azure-storage-fuse/sampleStreamingConfig.yaml pkgDir/usr/share/blobfuse2/
              cp azure-storage-fuse/tools/postinstall.sh pkgDir/usr/share/blobfuse2/
              mkdir -p pkgDir/etc/rsyslog.d
              mkdir -p pkgDir/etc/logrotate.d
              cp azure-storage-fuse/setup/11-blobfuse2.conf pkgDir/etc/rsyslog.d
              cp azure-storage-fuse/setup/blobfuse2-logrotate pkgDir/etc/logrotate.d/blobfuse2
            workingDirectory: $(root_dir)
            displayName: 'Accumulate pkg files'
          
          # using fpm tool for packaging of our binary & performing post-install operations
          # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
          - script: |
              fpm -s dir -t deb -n blobfuse2 -C pkgDir/ -v `./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3` -d fuse \
              --maintainer "Blobfuse v-Team <blobfusevteam@microsoft.com>" --url "https://github.com/Azure/azure-storage-fuse" \
              --description "An user-space filesystem for interacting with Azure Storage" 
              mv ./blobfuse2*.deb ./blobfuse2-`./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3`-$(tags)-x86-64.deb
              cp ./blobfuse2*.deb $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make deb Package'

          - script: |
              fpm -s dir -t rpm -n blobfuse2 -C pkgDir/ -v `./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3` -d fuse \
              --maintainer "Blobfuse v-Team <blobfusevteam@microsoft.com>" --url "https://github.com/Azure/azure-storage-fuse" \
              --description "An user-space filesystem for interacting with Azure Storage" 
              mv ./blobfuse2*.rpm ./blobfuse2-`./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3`-$(tags)-x86-64.rpm
              cp ./blobfuse2*.rpm $(Build.ArtifactStagingDirectory)
            workingDirectory: $(root_dir)
            displayName: 'Make rpm Package'
          
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'blobfuse2-temp'
            displayName: 'Publish Artifacts' 
  # BuildArtifacts end here

  - stage: TestArtifacts
    dependsOn: BuildArtifacts
    condition: succeeded('BuildArtifacts')
    jobs:
      - job: Set_1
        strategy:
          matrix:
            Ubuntu-18:
              agentName: "blobfuse-ubuntu18"
              vmImage: 'Ubuntu-18.04'
              fuselib: 'libfuse-dev'
              fuse-version: 'fuse'
              tags: 'fuse2'
              container: 'test-cnt-ubn-18'
            Ubuntu-20:
              agentName: "blobfuse-ubuntu20"
              vmImage: 'Ubuntu-20.04'
              fuse-version: 'fuse3'
              fuselib: 'libfuse3-dev'
              tags: 'fuse3'
              container: 'test-cnt-ubn-20'
        
        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

        steps:
          - checkout: none

          - task: GoTool@0
            inputs:
              version: '1.16.2'
            displayName: "GoTool Setup"

          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-fuse

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'blobfuse2-temp'
              downloadPath: $(root_dir)
              itemPattern: blobfuse2-temp/blobfuse2*$(tags)*.deb

          - script: |
              for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)-/-$(vmImage)-}"; done;
              cp ./blobfuse2*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)
            displayName: 'Rename Package'
            workingDirectory: $(root_dir)/blobfuse2-temp

          - script: |
              sudo dpkg --info blobfuse2*.deb
              sudo dpkg -i blobfuse2*.deb
              sudo apt-get install $(fuse-version) build-essential -y
            displayName: 'Install Package'
            workingDirectory: $(Build.ArtifactStagingDirectory)

          - template: 'azure-pipeline-templates/release-distro-tests.yml'
            parameters:
              root_dir: $(root_dir)
              work_dir: $(work_dir)
              mount_dir: $(mount_dir)
              temp_dir: $(temp_dir)
              container: $(container)

          # publishing the artifacts generated
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'blobfuse2'
            displayName: 'Publish Artifacts' 

      - job: Set_2
        strategy:
          matrix:
            Debian-9.0:
              agentName: "DEB 9.0"
              vmImage: 'Debian-9.0'
              fuselib: 'libfuse-dev'
              fuse-version: 'fuse'
              tags: 'fuse2'
              container: 'test-cnt-deb-9'
        
        pool:
          name: "BlobFuse Pool"
          demands:
            - Agent.Name -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

        steps:
          - checkout: none

          - task: GoTool@0
            inputs:
              version: '1.16.2'
            displayName: "GoTool Setup"

          - script: |
              sudo rm -rf $(root_dir)/azure-storage-fuse
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-fuse

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'blobfuse2-temp'
              downloadPath: $(root_dir)
              itemPattern: blobfuse2-temp/blobfuse2*$(tags)*.deb

          - script: |
              for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)-/-$(vmImage)-}"; done;
              cp ./blobfuse2*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)
            displayName: 'Rename Package'
            workingDirectory: $(root_dir)/blobfuse2-temp

          - script: |
              sudo dpkg --info blobfuse2*.deb
              sudo dpkg -i blobfuse2*.deb
              sudo apt-get install $(fuse-version) build-essential -y
            displayName: 'Install Package'
            workingDirectory: $(Build.ArtifactStagingDirectory)

          - template: 'azure-pipeline-templates/release-distro-tests.yml'
            parameters:
              root_dir: $(root_dir)
              work_dir: $(work_dir)
              mount_dir: $(mount_dir)
              temp_dir: $(temp_dir)
              container: $(container)

          # publishing the artifacts generated
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'blobfuse2'
            displayName: 'Publish Artifacts' 

      - job: Set_3
        strategy:
          matrix:
            Debian-10.0:
              agentName: "blobfuse-debian10"
              vmImage: 'Debian-10.0'
              fuselib: 'libfuse-dev'
              fuse-version: 'fuse'
              tags: 'fuse2'
              container: 'test-cnt-deb-10'
            Debian-11.0:
              agentName: "blobfuse-debian11"
              vmImage: 'Debian-11.0'
              fuse-version: 'fuse3'
              fuselib: 'libfuse3-dev'
              tags: 'fuse3'
              container: 'test-cnt-deb-11'
        
        pool:
          name: "blobfuse-debian-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

        steps:
          - checkout: none

          - task: GoTool@0
            inputs:
              version: '1.16.2'
            displayName: "GoTool Setup"

          - script: |
              sudo apt-get update -y
              sudo apt-get install git -y
            displayName: 'Install Git'

          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-fuse

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'blobfuse2-temp'
              downloadPath: $(root_dir)
              itemPattern: blobfuse2-temp/blobfuse2*$(tags)*.deb

          - script: |
              for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)-/-$(vmImage)-}"; done;
              cp ./blobfuse2*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)
            displayName: 'Rename Package'
            workingDirectory: $(root_dir)/blobfuse2-temp

          - script: |
              sudo dpkg --info blobfuse2*.deb
              sudo apt-get install $(fuse-version) build-essential -y
              sudo dpkg -i blobfuse2*.deb
            displayName: 'Install Package'
            workingDirectory: $(Build.ArtifactStagingDirectory)

          - template: 'azure-pipeline-templates/release-distro-tests.yml'
            parameters:
              root_dir: $(root_dir)
              work_dir: $(work_dir)
              mount_dir: $(mount_dir)
              temp_dir: $(temp_dir)
              container: $(container)

          # publishing the artifacts generated
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'blobfuse2'
            displayName: 'Publish Artifacts'
            
      - job: Set_4
        strategy:
          matrix:
            RHEL-7.5:
              agentName: "blobfuse-rhel7_5"
              vmImage: 'RHEL-7.5'
              fuselib: 'fuse3-devel'
              fuse-version: 'fuse3'
              tags: 'fuse3'
              container: 'test-cnt-rhel-75'
            RHEL-7.8:
              agentName: "blobfuse-rhel7_8"
              vmImage: 'RHEL-7.8'
              fuselib: 'fuse3-devel'
              fuse-version: 'fuse3'
              tags: 'fuse3'
              container: 'test-cnt-rhel-78'
            RHEL-8.1:
              agentName: "blobfuse-rhel8_1"
              vmImage: 'RHEL-8.1'
              fuselib: 'fuse fuse3-libs fuse3-devel'
              fuse-version: 'fuse3'
              tags: 'fuse3'
              container: 'test-cnt-rhel-81'
            RHEL-8.2:
              agentName: "blobfuse-rhel8_2"
              vmImage: 'RHEL-8.2'
              fuselib: 'fuse fuse3-libs fuse3-devel'
              fuse-version: 'fuse3'
              tags: 'fuse3'
              container: 'test-cnt-rhel-82'
        
        pool:
          name: "blobfuse-rhel-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

        steps:
          - checkout: none

          - task: GoTool@0
            inputs:
              version: '1.16.2'
            displayName: "GoTool Setup"

          - script: |
              sudo yum update -y
              sudo yum install git -y
            displayName: 'Install Git'

          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-fuse

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'blobfuse2-temp'
              downloadPath: $(root_dir)
              itemPattern: blobfuse2-temp/blobfuse2*$(tags)*.rpm

          - script: |
              for f in ./blobfuse2*$(tags)*.rpm; do mv -v "$f" "${f/-$(tags)-/-$(vmImage)-}"; done;
              cp ./blobfuse2*$(vmImage)*.rpm $(Build.ArtifactStagingDirectory)
            displayName: 'Rename Package'
            workingDirectory: $(root_dir)/blobfuse2-temp

          - script: |
              sudo rpm -qip blobfuse2*.rpm
              sudo yum groupinstall "Development Tools" -y
              sudo yum install $(fuse-version) -y --allowerasing
              sudo rpm -i blobfuse2*.rpm
            displayName: 'Install Package'
            workingDirectory: $(Build.ArtifactStagingDirectory)

          - template: 'azure-pipeline-templates/release-distro-tests.yml'
            parameters:
              root_dir: $(root_dir)
              work_dir: $(work_dir)
              mount_dir: $(mount_dir)
              temp_dir: $(temp_dir)
              container: $(container)

          # publishing the artifacts generated
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'blobfuse2'
            displayName: 'Publish Artifacts'

      - job: Set_5
        strategy:
          matrix:
            CentOS-7.9:
              agentName: "blobfuse-centos7"
              vmImage: 'CentOS-7.0'
              fuselib: 'fuse fuse3-devel'
              fuse-version: 'fuse3'
              tags: 'fuse3'
              container: 'test-cnt-cent-7'
            CentOS-8.5:
              agentName: "blobfuse-centos8"
              vmImage: 'CentOS-8.0'
              fuselib: 'fuse fuse3-devel'
              fuse-version: 'fuse3'
              tags: 'fuse3'
              container: 'test-cnt-cent-8'
        
        pool:
          name: "blobfuse-centos-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

        steps:
          - checkout: none

          - task: GoTool@0
            inputs:
              version: '1.16.2'
            displayName: "GoTool Setup"

          - script: |
              sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
              sudo sed -i 's|baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
            condition: eq(variables['vmImage'], 'blobfuse-centos8')
            displayName: "Update OS mirrors"

          - script: |
              sudo yum update -y
              sudo yum install git -y
            displayName: 'Install Git'

          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-fuse

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'blobfuse2-temp'
              downloadPath: $(root_dir)
              itemPattern: blobfuse2-temp/blobfuse2*$(tags)*.rpm

          - script: |
              for f in ./blobfuse2*$(tags)*.rpm; do mv -v "$f" "${f/-$(tags)-/-$(vmImage)-}"; done;
              cp ./blobfuse2*$(vmImage)*.rpm $(Build.ArtifactStagingDirectory)
            displayName: 'Rename Package'
            workingDirectory: $(root_dir)/blobfuse2-temp

          - script: |
              sudo rpm -qip blobfuse2*.rpm
              sudo yum groupinstall gcc gcc-c++ make -y
              if [ $(vmImage) == "blobfuse-centos8" ]; then
                sudo yum install fuse $(fuse-version) -y --nobest --allowerasing
              else
                sudo yum install $(fuse-version) -y
              fi
              sudo rpm -i blobfuse2*.rpm
            displayName: 'Install Package'
            workingDirectory: $(Build.ArtifactStagingDirectory)

          - template: 'azure-pipeline-templates/release-distro-tests.yml'
            parameters:
              root_dir: $(root_dir)
              work_dir: $(work_dir)
              mount_dir: $(mount_dir)
              temp_dir: $(temp_dir)
              container: $(container)

          # publishing the artifacts generated
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'blobfuse2'
            displayName: 'Publish Artifacts'

      - job: Set_6
        strategy:
          matrix:
            Oracle-8.1:
              agentName: "blobfuse-oracle81"
              vmImage: 'Oracle-8.1'
              fuselib: 'fuse fuse3-devel'
              fuse-version: 'fuse3'
              tags: 'fuse3'
              container: "test-cnt-ora-81"
        
        pool:
          name: "blobfuse-oracle-pool"
          demands:
            - ImageOverride -equals $(agentName)

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'

        steps:
          - checkout: none

          - task: GoTool@0
            inputs:
              version: '1.16.2'
            displayName: "GoTool Setup"

          - script: |
              sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
              sudo sed -i 's|baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
            condition: eq(variables['vmImage'], 'blobfuse-centos8')
            displayName: "Update OS mirrors"

          - script: |
              sudo yum update -y
              sudo yum install git -y
            displayName: 'Install Git'

          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(root_dir)

          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(root_dir)/azure-storage-fuse

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: 'blobfuse2-temp'
              downloadPath: $(root_dir)
              itemPattern: blobfuse2-temp/blobfuse2*$(tags)*.rpm

          - script: |
              for f in ./blobfuse2*$(tags)*.rpm; do mv -v "$f" "${f/-$(tags)-/-$(vmImage)-}"; done;
              cp ./blobfuse2*$(vmImage)*.rpm $(Build.ArtifactStagingDirectory)
            displayName: 'Rename Package'
            workingDirectory: $(root_dir)/blobfuse2-temp

          - script: |
              sudo rpm -qip blobfuse2*.rpm
              sudo yum groupinstall gcc gcc-c++ make -y
              sudo yum install fuse $(fuse-version) -y --nobest --allowerasing
              sudo rpm -i blobfuse2*.rpm
            displayName: 'Install Package'
            workingDirectory: $(Build.ArtifactStagingDirectory)

          - template: 'azure-pipeline-templates/release-distro-tests.yml'
            parameters:
              root_dir: $(root_dir)
              work_dir: $(work_dir)
              mount_dir: $(mount_dir)
              temp_dir: $(temp_dir)
              container: $(container)

          # publishing the artifacts generated
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: 'blobfuse2'
            displayName: 'Publish Artifacts'