variables:
  tags: 'fuse3'
  depends: 'fuse3'
  project: 'BlobFuse'
  pipelineId: 95
  patToken: $(System.AccessToken)
  status: 'inProgress'
  organization: azstorage

parameters:
  - name: tag
    displayName: 'New Release Tag'
    type: string
    default: 'blobfuse2-'

  - name: unit_test
    displayName: 'Execute Unit Tests'
    type: boolean
    default: false

  - name: post_release
    displayName: 'Post Release on Github'
    type: boolean
    default: false

  - name: publish_artifacts
    displayName: 'Publish Artifacts to Linux Repos'
    type: boolean
    default: false

  - name: draft
    displayName: 'Post as Draft Release'
    type: boolean
    default: false

  - name: prerelease
    displayName: 'Post as PreRelease'
    type: boolean
    default: false

  - name: update_version
    displayName: 'Update Version'
    type: boolean
    default: false

# Do not trigger this pipeline automatically
trigger: none
pr: none

resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    # The SDL Source analysis stage can only run in a windows environment due to limitations of Guardian tools. 
    # If you use Linux pool, we require an additional windows image in your pool to run the source analysis.
    sdl:   
      sourceAnalysisPool:
        name: blobfuse2-pool  # Name of your hosted pool
        image: windows2022-1espt
        os: windows  # OS of the image. Allowed values: windows, linux, macOS

    stages:
    - stage: BuildArtifacts
      jobs:
      - job: Set_1
        timeoutInMinutes: 120
        pool:
          name: blobfuse2-pool
          image: ubuntu22-1espt
          os: linux
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)/blobfuse2-temp
            artifactName: 'blobfuse2-linux-unsigned'
            displayName: 'Publish Artifacts'
        # Job strategy is not supported in the 1ES pipeline template. Refer https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/faqs#:~:text=Unfortunately%2C%20it%20is%20not%20possible%20to%20use%20job%20strategy%20to%20specify%20pool%20at%20the%20pipeline.

        variables:
          - group: NightlyBlobfuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: unsigned
            value: '$(Build.ArtifactStagingDirectory)/blobfuse2-temp'

        steps:
        - checkout: none
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: 'Checkout Code'
          workingDirectory: $(root_dir)

        # list commits from past 12hrs
        - script: |
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            git --no-pager log --since="12 hours ago" --stat
          displayName: 'List Commits'
          workingDirectory: $(work_dir)

        # install dependencies required for compiling blobfuse
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install ruby-dev build-essential pkg-config cmake gcc g++ rpm $(fuselib) -y
            sudo gem install dotenv -v 2.8.1
            sudo gem install fpm -V
          displayName: "Installing Dependencies"

        # get glibc version with which build is done
        #TODO:: downgrade to fuse2 glibc version
        - script: |
            ldd --version
          displayName: "GLIBC Version"

        # install fuse3 libfuse3-dev
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install fuse3 libfuse3-dev -y
            fusermount -V
          displayName: 'Libfuse Setup'

        - script: |
            if [ ! -d "$(unsigned)" ]; then
              mkdir -p $(unsigned)
            fi
          displayName: 'Check and create output paths'

        # build blobfuse2 and generate binary
        - template: azure-pipeline-templates/build-release.yml@self
          parameters:
            work_dir: $(work_dir)
            root_dir: $(root_dir)
            unit_test: ${{ parameters.unit_test }}
            tags: 'fuse3'
            container: "test-cnt-ubn-22"

        # place the generated binary files & any additional files in appropriate locations
        - script: |
            mkdir -p pkgDir/usr/bin/
            mkdir -p pkgDir/usr/share/blobfuse2/
            cp azure-storage-fuse/blobfuse2 pkgDir/usr/bin/blobfuse2
            cp azure-storage-fuse/bfusemon pkgDir/usr/bin/bfusemon
            cp azure-storage-fuse/setup/baseConfig.yaml pkgDir/usr/share/blobfuse2/
            cp azure-storage-fuse/sampleFileCacheConfig.yaml pkgDir/usr/share/blobfuse2/
            mkdir -p pkgDir/etc/rsyslog.d
            mkdir -p pkgDir/etc/logrotate.d
            cp azure-storage-fuse/setup/11-blobfuse2.conf pkgDir/etc/rsyslog.d
            cp azure-storage-fuse/setup/blobfuse2-logrotate pkgDir/etc/logrotate.d/blobfuse2
          workingDirectory: $(root_dir)
          displayName: 'Accumulate pkg files'
        
        # using fpm tool for packaging of our binary & performing post-install operations
        # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
        - script: |
            fpm -s dir -t deb -n blobfuse2 -C pkgDir/ -v `./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3` -d fuse3 \
            --maintainer "Blobfuse v-Team <blobfusevteam@microsoft.com>" --url "https://github.com/Azure/azure-storage-fuse" \
            --description "An user-space filesystem for interacting with Azure Storage" 
            mv ./blobfuse2*.deb ./blobfuse2-`./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3`-$(tags).x86_64.deb
            cp ./blobfuse2*.deb $(unsigned)
          workingDirectory: $(root_dir)
          displayName: 'Make deb Package'

        - script: |
            fpm -s dir -t rpm -n blobfuse2 --rpm-digest sha256 -C pkgDir/ -v `./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3` -d $(depends) \
            --maintainer "Blobfuse v-Team <blobfusevteam@microsoft.com>" --url "https://github.com/Azure/azure-storage-fuse" \
            --description "An user-space filesystem for interacting with Azure Storage" 
            mv ./blobfuse2*.rpm ./blobfuse2-`./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3`-$(tags).x86_64.rpm
            cp ./blobfuse2*.rpm $(unsigned)
          workingDirectory: $(root_dir)
          displayName: 'Make rpm Package'
      
      - job: Set_2_ARM
        timeoutInMinutes: 120
        pool:
          name: blobfuse2-arm-pool
          image: ubn22armblobfuse-1espt
          os: linux
          hostArchitecture: Arm64
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)/blobfuse2-temp
            artifactName: 'blobfuse2-linux-arm-unsigned'
            displayName: 'Publish Artifacts'

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: unsigned
            value: '$(Build.ArtifactStagingDirectory)/blobfuse2-temp'
        
        steps:
        - checkout: none
        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: 'Checkout Code'
          workingDirectory: $(root_dir)
        
        # list commits from past 12hrs
        - script: |
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            git --no-pager log --since="12 hours ago" --stat
          displayName: 'List Commits'
          workingDirectory: $(work_dir)
        
        # install dependencies required for compiling blobfuse
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install ruby-dev build-essential pkg-config cmake gcc g++ rpm $(fuselib) -y
            sudo gem install fpm -V
          displayName: "Installing Dependencies"

        # get glibc version with which build is done
        - script: |
            ldd --version
          displayName: "GLIBC Version"

        # install fuse3 libfuse3-dev
        - script: |
            sudo apt-get update --fix-missing
            sudo apt-get install fuse3 libfuse3-dev -y
            fusermount -V
          displayName: 'Libfuse Setup'

        - script: |
            if [ ! -d "$(unsigned)" ]; then
              mkdir -p $(unsigned)
            fi
          displayName: 'Check and create output paths'

        # build blobfuse2 and generate binary
        - template: 'azure-pipeline-templates/build-release.yml@self'
          parameters:
            work_dir: $(work_dir)
            root_dir: $(root_dir)
            unit_test: ${{ parameters.unit_test }}
            tags: $(tags)
            container: "test-cnt-ubn-22-arm"

        # place the generated binary files & any additional files in appropriate locations
        - script: |
            mkdir -p pkgDir/usr/bin/
            mkdir -p pkgDir/usr/share/blobfuse2/
            cp azure-storage-fuse/blobfuse2 pkgDir/usr/bin/blobfuse2
            cp azure-storage-fuse/bfusemon pkgDir/usr/bin/bfusemon
            cp azure-storage-fuse/setup/baseConfig.yaml pkgDir/usr/share/blobfuse2/
            cp azure-storage-fuse/sampleFileCacheConfig.yaml pkgDir/usr/share/blobfuse2/
            cp azure-storage-fuse/sampleStreamingConfig.yaml pkgDir/usr/share/blobfuse2/
            mkdir -p pkgDir/etc/rsyslog.d
            mkdir -p pkgDir/etc/logrotate.d
            cp azure-storage-fuse/setup/11-blobfuse2.conf pkgDir/etc/rsyslog.d
            cp azure-storage-fuse/setup/blobfuse2-logrotate pkgDir/etc/logrotate.d/blobfuse2
          workingDirectory: $(root_dir)
          displayName: 'Accumulate pkg files'
        
        # using fpm tool for packaging of our binary & performing post-install operations
        # for additional information about fpm refer https://fpm.readthedocs.io/en/v1.13.1/
        - script: |
            fpm -s dir -t deb -n blobfuse2 -C pkgDir/ -v `./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3` -d $(depends) \
            --maintainer "Blobfuse v-Team <blobfusevteam@microsoft.com>" --url "https://github.com/Azure/azure-storage-fuse" \
            --description "An user-space filesystem for interacting with Azure Storage" 
            mv ./blobfuse2*.deb ./blobfuse2-`./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3`-$(tags).arm64.deb
            cp ./blobfuse2*.deb $(unsigned)
          workingDirectory: $(root_dir)
          displayName: 'Make deb Package'

        - script: |
            fpm -s dir -t rpm -n blobfuse2 --rpm-digest sha256 -C pkgDir/ -v `./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3` -d $(depends) \
            --maintainer "Blobfuse v-Team <blobfusevteam@microsoft.com>" --url "https://github.com/Azure/azure-storage-fuse" \
            --description "An user-space filesystem for interacting with Azure Storage" 
            mv ./blobfuse2*.rpm ./blobfuse2-`./pkgDir/usr/bin/blobfuse2 --version | cut -d " " -f 3`-$(tags).aarch64.rpm
            cp ./blobfuse2*.rpm $(unsigned)
          workingDirectory: $(root_dir)
          displayName: 'Make rpm Package'
          
  # BuildArtifacts end here

    - stage: SignArtifacts
      dependsOn: BuildArtifacts
      condition: succeeded('BuildArtifacts')
      jobs:
      - job: SignBlobfuse
        timeoutInMinutes: 120
        pool:
          name: blobfuse2-pool
          image: ubuntu22-1espt
          os: linux

        # download artifacts that need to be published
        templateContext:
          inputs:
          - input: pipelineArtifact
            artifactName: 'blobfuse2-linux-unsigned'
            targetPath: $(Build.ArtifactStagingDirectory)/amd64
            displayName: 'Download Artifacts'
          - input: pipelineArtifact
            artifactName: 'blobfuse2-linux-arm-unsigned'
            targetPath: $(Build.ArtifactStagingDirectory)/arm64
            displayName: 'Download Artifacts'
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)/blobfuse2-signed
            artifactName: 'blobfuse2-signed'
            displayName: 'Publish Signed Artifacts'

        variables:
          - group: NightlyBlobFuse
          - name: amd64
            value: $(Build.ArtifactStagingDirectory)/amd64
          - name: arm64
            value: $(Build.ArtifactStagingDirectory)/arm64
          - name: mariner
            value: $(Build.ArtifactStagingDirectory)/mariner
          - name: signed
            value: $(Build.ArtifactStagingDirectory)/blobfuse2-signed

        steps:
        - checkout: none
        
        - script: |
            echo ${{ parameters.tag }}
          displayName: 'Tag Name'
        
        - script: |
            mkdir -p $(signed)
            chmod 777 $(signed)
            mkdir -p $(signed)/mariner
            chmod 777 $(signed)/mariner
          displayName: 'Create Output Paths'

        - script: |
            sudo ls -lRt $(Build.ArtifactStagingDirectory)
            md5sum $(Build.ArtifactStagingDirectory)/amd64/*.deb
            md5sum $(Build.ArtifactStagingDirectory)/amd64/*.rpm
            md5sum $(Build.ArtifactStagingDirectory)/arm64/*.deb
            md5sum $(Build.ArtifactStagingDirectory)/arm64/*.rpm
          displayName: 'List Artifacts'

        - script: |
            mkdir -p $(mariner) && chmod 755 $(mariner)
            cp $(amd64)/*-fuse3*.rpm $(mariner)
            cp $(arm64)/*-fuse3*.rpm $(mariner)
            sudo ls -lRt $(mariner)
            md5sum $(mariner)/*
          displayName: 'Copy artifacts for Mariner'
          workingDirectory: $(Build.ArtifactStagingDirectory)
        
        - script: |
            sudo apt-get update -y
            wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb 
            sudo dpkg -i packages-microsoft-prod.deb 
            sudo apt update -y
            sudo apt install apt-transport-https -y
            sudo apt install dotnet-sdk-6.0 -y
          displayName: "Update dependencies"
          
        - template: azure-pipeline-templates/esrp_sign_linux.yml@self
          parameters:
            FolderPath: '$(Build.ArtifactStagingDirectory)/amd64'
            ESRP_BLOBFUSE_KEY_CODE: $(ESRP_BLOBFUSE_KEY_CODE)
            Pattern: '*.rpm, *.deb'
            DisplayName: 'ESRP CodeSigning blobfuse2 linux amd64'

        - template: azure-pipeline-templates/esrp_sign_linux.yml@self
          parameters:
            FolderPath: '$(Build.ArtifactStagingDirectory)/arm64'
            ESRP_BLOBFUSE_KEY_CODE: $(ESRP_BLOBFUSE_KEY_CODE)
            Pattern: '*.rpm, *.deb'
            DisplayName: 'ESRP CodeSigning blobfuse2 linux arm64'

        - template: azure-pipeline-templates/esrp_sign_linux.yml@self
          parameters:
            FolderPath: '$(mariner)'
            ESRP_BLOBFUSE_KEY_CODE: $(ESRP_BLOBFUSE_MARINER_KEY_CODE)
            Pattern: '*.rpm'
            DisplayName: 'ESRP CodeSigning blobfuse2 mariner'

        # Validate signed images have md5sum changed
        - script: |
            chmod 755 $(Build.ArtifactStagingDirectory)/amd64/*.rpm
            chmod 755 $(Build.ArtifactStagingDirectory)/amd64/*.deb
            chmod 755 $(Build.ArtifactStagingDirectory)/arm64/*.rpm
            chmod 755 $(Build.ArtifactStagingDirectory)/arm64/*.deb
            chmod 755 $(Build.ArtifactStagingDirectory)/mariner/*.rpm
            rm -rf $(Build.ArtifactStagingDirectory)/amd64/*.md
            rm -rf $(Build.ArtifactStagingDirectory)/arm64/*.md
            rm -rf $(Build.ArtifactStagingDirectory)/mariner/*.md
            mv $(Build.ArtifactStagingDirectory)/amd64/* $(signed)
            mv $(Build.ArtifactStagingDirectory)/arm64/* $(signed)
            mv $(Build.ArtifactStagingDirectory)/mariner/* $(signed)/mariner
            rm -rf $(Build.ArtifactStagingDirectory)/mariner/
            rm -rf $(Build.ArtifactStagingDirectory)/amd64/
            rm -rf $(Build.ArtifactStagingDirectory)/arm64/
          displayName: 'Make Artifacts executable'

        - script: |
            sudo ls -lRt $(Build.ArtifactStagingDirectory)
            md5sum $(signed)/*.deb
            md5sum $(signed)/*.rpm
            md5sum $(signed)/mariner/*
          displayName: 'List Signed Artifacts'
# SignArtifacts end here

    - stage: TestArtifacts
      dependsOn: SignArtifacts
      condition: succeeded('SignArtifacts')
      jobs:
      - job: Set_0
        timeoutInMinutes: 120
        pool:
          name: blobfuse2-pool
          image: ubuntu22-1espt
          os: linux

        # download artifacts that need to be published
        templateContext:
          inputs:
          - input: pipelineArtifact
            artifactName: 'blobfuse2-signed'
            targetPath: $(System.DefaultWorkingDirectory)/blobfuse2-signed
            displayName: 'Download Artifacts'
            itemPattern: blobfuse2*$(tags)*x86_64.deb
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)/blobfuse2
            artifactName: 'blobfuse2-ubn22'
            displayName: 'Publish Signed Artifacts'

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'
          - name: blobfuse2-binaries
            value: $(Build.ArtifactStagingDirectory)/blobfuse2
          - name: vmImage
            value: 'Ubuntu-22.04'
          - name: fuselib
            value: 'libfuse3-dev'
          - name: container
            value: 'test-cnt-ubn-22'
          - name: fuse-version
            value: 'fuse3'

        steps:
        - checkout: none

        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: 'Checkout Code'
          workingDirectory: $(root_dir)

        - script: |
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
          displayName: 'Checkout Branch'
          workingDirectory: $(root_dir)/azure-storage-fuse

        - script:
            mkdir -p $(Build.ArtifactStagingDirectory)/blobfuse2
            chmod 777 $(Build.ArtifactStagingDirectory)/blobfuse2
          displayName: 'Create Output Paths'

        # Custom script to install Go-lang
        - task: ShellScript@2
          inputs:
            scriptPath: "$(work_dir)/go_installer.sh"
            args: "$(root_dir)/"
          displayName: "GoTool Custom Setup"
        
        # get glibc version with which build is done
        - script: |
            ldd --version
          displayName: "GLIBC Version"

        - script: |
            ls -l
            result=$(ls -1 | wc -l)
            if [ $result -ne 1 ]; then
              exit 1
            fi
          displayName: 'List Downloaded Package'
          workingDirectory: $(root_dir)/blobfuse2-signed      

        - script: |
            for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)./-$(vmImage).}"; done;
            cp ./blobfuse2*$(vmImage)*.deb $(blobfuse2-binaries)
          displayName: 'Rename Package'
          workingDirectory: $(root_dir)/blobfuse2-signed
          
        - script: |
            sudo dpkg --info blobfuse2*.deb
            sudo dpkg -i blobfuse2*.deb
            sudo apt-get install $(fuse-version) build-essential -y
          displayName: 'Install Package'
          workingDirectory: $(blobfuse2-binaries)

        - template: 'azure-pipeline-templates/release-distro-tests.yml@self'
          parameters:
            root_dir: $(root_dir)
            work_dir: $(work_dir)
            mount_dir: $(mount_dir)
            temp_dir: $(temp_dir)
            container: $(container)

        # Create container for blobfuse and publish it
        - script: |
            sudo apt-get install $(tags) $(fuselib) -y
            chmod 777 *.sh
            ./dockerinstall.sh
            ./buildcontainer.sh Dockerfile x86_64
            ./publishcontainer.sh $(AZTEST_DOCKER_REG_USER)  $(AZTEST_DOCKER_REG_PWD) x86_64
            ./buildcontainer.sh DockerfileMariner mariner-x86_64
            ./publishcontainer.sh $(AZTEST_DOCKER_REG_USER)  $(AZTEST_DOCKER_REG_PWD) mariner-x86_64
          displayName: "Create and publish container"
          workingDirectory: $(work_dir)/docker

      - job: Set_1_ARM
        timeoutInMinutes: 120
        pool: 
          name: blobfuse2-arm-pool
          image: ubn22armblobfuse-1espt
          os: linux
          hostArchitecture: Arm64

        # download artifacts that need to be published
        templateContext:
          inputs:
          - input: pipelineArtifact
            artifactName: 'blobfuse2-signed'
            targetPath: $(System.DefaultWorkingDirectory)/blobfuse2-signed
            displayName: 'Download Artifacts'
            itemPattern: blobfuse2*$(tags)*arm64.deb
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)/blobfuse2
            artifactName: 'blobfuse2-ubn22ARM'
            displayName: 'Publish Signed Artifacts'

        variables:
          - group: NightlyBlobFuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'
          - name: work_dir
            value: '$(System.DefaultWorkingDirectory)/azure-storage-fuse'
          - name: mount_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmp'
          - name: temp_dir
            value: '$(System.DefaultWorkingDirectory)/fusetmpcache'
          - name: vmImage
            value: 'Ubuntu-22.04'
          - name: fuselib
            value: 'libfuse3-dev'
          - name: container
            value: 'test-cnt-ubn-22-arm64'
          - name: fuse-version
            value: 'fuse3'
          - name: blobfuse2-binaries
            value: $(Build.ArtifactStagingDirectory)/blobfuse2
        steps:
        - checkout: none

        - script: |
            git clone https://github.com/Azure/azure-storage-fuse
          displayName: 'Checkout Code'
          workingDirectory: $(root_dir)
    
        - script: |
            git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
          displayName: 'Checkout Branch'
          workingDirectory: $(root_dir)/azure-storage-fuse

        - script:
            mkdir -p $(Build.ArtifactStagingDirectory)/blobfuse2
            chmod 777 $(Build.ArtifactStagingDirectory)/blobfuse2
          displayName: 'Create Output Paths'
        
        # Custom script to install Go-lang
        - task: ShellScript@2
          inputs:
            scriptPath: "$(work_dir)/go_installer.sh"
            args: "$(root_dir)/"
          displayName: "GoTool Custom Setup"

        # get glibc version with which build is done
        - script: |
            sudo apt update
            sudo apt --fix-broken install
            ldd --version
          displayName: "GLIBC Version"

        - script: |
            ls -l
            result=$(ls -1 | wc -l)
            if [ $result -ne 1 ]; then
              exit 1
            fi
          displayName: 'List Downloaded Package'
          workingDirectory: $(root_dir)/blobfuse2-signed

        - script: |
            for f in ./blobfuse2*$(tags)*.deb; do mv -v "$f" "${f/-$(tags)./-$(vmImage).}"; done;
            cp ./blobfuse2*$(vmImage)*.deb $(Build.ArtifactStagingDirectory)/blobfuse2
          displayName: 'Rename Package'
          workingDirectory: $(root_dir)/blobfuse2-signed

        - script: |
            sudo dpkg --info blobfuse2*.deb
            sudo apt-get install $(fuse-version) build-essential -y
            sudo dpkg -i blobfuse2*.deb
          displayName: 'Install Package'
          workingDirectory: $(blobfuse2-binaries)

        - template: 'azure-pipeline-templates/release-distro-tests.yml@self'
          parameters:
            root_dir: $(root_dir)
            work_dir: $(work_dir)
            mount_dir: $(mount_dir)
            temp_dir: $(temp_dir)
            container: $(container)
            
        # Create container for blobfuse and publish it
        - script: |
            sudo apt-get install $(tags) $(fuselib) -y
            chmod 777 *.sh
            ./dockerinstall.sh
            ./buildcontainer.sh DockerfileARM arm64
            ./publishcontainer.sh $(AZTEST_DOCKER_REG_USER)  $(AZTEST_DOCKER_REG_PWD) arm64
          displayName: "Create and publish ARM container"
          workingDirectory: $(work_dir)/docker

#TestArtifacts with 1es images ends here

      - job: TriggerTestArtifactsPipeline
        timeoutInMinutes: 120
        pool:
          name: blobfuse2-pool
          image: ubuntu22-1espt
          os: linux
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)/blobfuse2
            artifactName: 'blobfuse2'
            displayName: 'Publish Artifacts'

        variables:
          - group: NightlyBlobfuse
          - name: root_dir
            value: '$(System.DefaultWorkingDirectory)'

        steps:
        - checkout: none
        - bash: |
            triggered_run=$(az pipelines run --project $(project) --id $(pipelineId) --branch 'main' --organization 'https://dev.azure.com/azstorage/' --query id)
            echo $triggered_run
            # Check if the output is a number
            if [[ $triggered_run =~ ^[0-9]+$ ]]; then
              run_id=$triggered_run
            else
              run_id=$(echo $triggered_run | jq -r '.id')
            fi
            echo "RUNID"
            echo $run_id
            echo "##vso[task.setvariable variable=run_id]$run_id"
            echo "Checking the status of the triggered pipeline..."
            while true; do
              result=$(az pipelines runs show --organization https://dev.azure.com/$(organization) --project $(project) --id $run_id --query result --output tsv --only-show-errors)
              echo "Current status: $result"
              if [[ "$result" == "canceled" || "$result" == "failed" ]]; then
                echo "Pipeline run $run_id has $result."
                exit 1
              elif [[ "$result" == "succeeded" ]]; then
                echo "Pipeline run $run_id has succeeded."
                break
              fi
              echo "Pipeline run $run_id is still in progress. Checking again in 30 seconds..."
              sleep 30
            done
          displayName: 'Trigger and Check Pipeline Status'
          env:
            AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

        - script: |
            echo "Pipeline continues"
            mkdir -p $(Build.ArtifactStagingDirectory)/blobfuse2
          displayName: "Status"

        # Download artifacts from a specific pipeline.
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'specific'
            artifactName: 'blobfuse2'
            project: $(project)
            buildVersionToDownload: 'latest'
            targetPath: '$(Build.ArtifactStagingDirectory)/blobfuse2'
            definition: $(pipelineId)
            allowFailedBuilds: true

        - script: |
            ls -l
          displayName: 'List Downloaded Package'
          workingDirectory: $(Build.ArtifactStagingDirectory)/blobfuse2

      - job: AccessArtifacts
        timeoutInMinutes: 120
        dependsOn: TriggerTestArtifactsPipeline
        condition: succeeded('TriggerTestArtifactsPipeline')
        pool:
          name: blobfuse2-pool
          image: ubuntu22-1espt
          os: linux

        templateContext:
          inputs:
          - input: pipelineArtifact
            artifactName: 'blobfuse2'
            targetPath: $(Build.ArtifactStagingDirectory)/blobfuse2
            displayName: 'Download Artifacts'
        steps:
        - checkout: none
        - script: |
            echo "Accessing Artifacts"
            ls -l 
          displayName: 'Access Artifacts'
          workingDirectory: $(Build.ArtifactStagingDirectory)/blobfuse2