# Blobfuse2 Nightly Build Pipeline

schedules:
  # Cron string < minute hour day-of-month month day-of-week>
  #             * means all, for example '*' in day of month means everyday
  # Run only on main branch
  # 'always' controls whether to run only if there is a change or not
  # Run this pipeline every 15:00 time
  - cron: '0 15 * * *'
    displayName: 'Daily midnight Blobfuse2 build'
    branches:
      include:
        - main

parameters:
  # - name: exhaustive_test
  #   # Quick test or an exhaustive test
  #   displayName: 'Exhaustive test'
  #   type: boolean
  #   default: true
  
  # - name: proxy_test
  # # Proxy tests
  #   displayName: 'Proxy test'
  #   type: boolean
  #   default: true

  - name: msi_test
    # MSI auth based test suites to be run or not
    displayName: 'MSI test'
    type: boolean
    default: true

  # - name: quick_stress
  #   displayName: 'Quick Stress'
  #   type: boolean
  #   default: true
  
  - name: verbose_log
    displayName: 'Verbose Log'
    type: boolean
    default: false

jobs:
  # RHEL Tests
  - job: Set_1
    strategy:
      matrix:
        RHEL-7.9:
          DistroVer: "RHEL-7.9"
          Description: "Red Hat Enterprise Linux 7.9"
          AgentName: "blobfuse-rhel7_9"
          ContainerName: "test-cnt-rhel-7.9"
        RHEL-8:
          DistroVer: "RHEL-8"
          Description: "Red Hat Enterprise Linux 8"
          AgentName: "blobfuse-rhel8"
          containerName: "test-cnt-rhel-8"

    pool:
      name: "blobfuse-rhel-pool"
      demands:
        - ImageOverride -equals $(AgentName)

    variables:
      - group: NightlyBlobFuse
      - name: ROOT_DIR
        value: "/usr/pipeline/workv2"
      - name: WORK_DIR
        value: "/usr/pipeline/workv2/go/src/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true
      - name: MOUNT_DIR
        value: "/usr/pipeline/workv2/blob_mnt"
      - name: TEMP_DIR
        value: "/usr/pipeline/workv2/temp"
      - name: BLOBFUSE2_CFG
        value: "/usr/pipeline/workv2/blobfuse2.yaml"
      - name: BLOBFUSE2_ADLS_CFG
        value: "/home/vsts/workv2/blobfuse2.adls.yaml"
      - name: GOPATH
        value: "/usr/pipeline/workv2/go"

    steps:
      # Go tool installer
      - task: GoTool@0
        inputs:
          version: '1.16.2'
        displayName: "Install Go Version"

      - template: 'azure-pipeline-templates/distro-tests.yml'
        parameters:
          working_dir: $(WORK_DIR)
          root_dir: $(ROOT_DIR)
          temp_dir: $(TEMP_DIR)
          mount_dir: $(MOUNT_DIR)
          config_path: $(BLOBFUSE2_CFG)
          container: $(ContainerName)
          blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
          blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
          adls_account_name: $(AZTEST_ADLS_ACC_NAME)
          adls_account_key: $(AZTEST_ADLS_KEY)
          distro_name: $(AgentName)
          gopath: $(GOPATH) 
          installStep:
            script: |
              sudo sed -i '/^failovermethod=/d' /etc/yum.repos.d/*.repo
              sudo yum update -y
              sudo yum install git make cmake gcc gcc-c++ fuse fuse3 fuse3-devel -y
              sudo yum groupinstall "Development Tools" -y
              sudo yum install python36 -y
            displayName: 'Install fuse'
          verbose_log: ${{ parameters.verbose_log }}

  # Centos Tests
  - job: Set_2
    strategy:
      matrix:
        CentOS-7.9:
          DistroVer: "CentOS-7.9"
          Description: "CentOS 7.9"
          AgentName: "blobfuse-centos7"
          ContainerName: "test-cnt-cent-7"
        CentOS-8.5:
          DistroVer: "CentOS-8.5"
          Description: "CentOS 8.5"
          AgentName: "blobfuse-centos8"
          ContainerName: "test-cnt-cent-8"

    pool:
      name: "blobfuse-centos-pool"
      demands:
        - ImageOverride -equals $(AgentName)

    variables:
      - group: NightlyBlobFuse
      - name: ROOT_DIR
        value: "/usr/pipeline/workv2"
      - name: WORK_DIR
        value: "/usr/pipeline/workv2/go/src/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true
      - name: MOUNT_DIR
        value: "/usr/pipeline/workv2/blob_mnt"
      - name: TEMP_DIR
        value: "/usr/pipeline/workv2/temp"
      - name: BLOBFUSE2_CFG
        value: "/usr/pipeline/workv2/blobfuse2.yaml"
      - name: BLOBFUSE2_ADLS_CFG
        value: "/home/vsts/workv2/blobfuse2.adls.yaml"
      - name: GOPATH
        value: "/usr/pipeline/workv2/go"

    steps:
      # Go tool installer
      - task: GoTool@0
        inputs:
          version: '1.16.2'
        displayName: "Install Go Version"

      - script: |
          sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
          sudo sed -i 's|baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        condition: eq(variables['AgentName'], 'blobfuse-centos8')
        displayName: "Update OS mirrors"

      - template: 'azure-pipeline-templates/distro-tests.yml'
        parameters:
          working_dir: $(WORK_DIR)
          root_dir: $(ROOT_DIR)
          temp_dir: $(TEMP_DIR)
          mount_dir: $(MOUNT_DIR)
          config_path: $(BLOBFUSE2_CFG)
          container: $(ContainerName)
          blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
          blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
          adls_account_name: $(AZTEST_ADLS_ACC_NAME)
          adls_account_key: $(AZTEST_ADLS_KEY)
          distro_name: $(AgentName)
          gopath: $(GOPATH)
          installStep:
            script: |
              sudo yum update -y --skip-broken
              if [ $(AgentName) == "blobfuse-centos8" ]; then
                sudo yum install gcc gcc-c++ make git fuse fuse3 fuse3-devel python36 -y --nobest --allowerasing
              else
                sudo yum install gcc gcc-c++ make git fuse3 fuse3-devel python36 -y
              fi
            displayName: 'Install fuse'
          verbose_log: ${{ parameters.verbose_log }}

  # Oracle Tests
  - job: Set_3
    strategy:
      matrix:
        Oracle-8.1:
          DistroVer: "Oracle-8.1"
          Description: "Oracle Linux 8.1"
          AgentName: "blobfuse-oracle81"
          ContainerName: "test-cnt-ora-81"

    pool:
      name: "blobfuse-oracle-pool"
      demands:
        - ImageOverride -equals $(AgentName)

    variables:
      - group: NightlyBlobFuse
      - name: ROOT_DIR
        value: "/usr/pipeline/workv2"
      - name: WORK_DIR
        value: "/usr/pipeline/workv2/go/src/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true
      - name: MOUNT_DIR
        value: "/usr/pipeline/workv2/blob_mnt"
      - name: TEMP_DIR
        value: "/usr/pipeline/workv2/temp"
      - name: BLOBFUSE2_CFG
        value: "/usr/pipeline/workv2/blobfuse2.yaml"
      - name: BLOBFUSE2_ADLS_CFG
        value: "/home/vsts/workv2/blobfuse2.adls.yaml"
      - name: GOPATH
        value: "/usr/pipeline/workv2/go"

    steps:
      # Go tool installer
      - task: GoTool@0
        inputs:
          version: '1.16.2'
        displayName: "Install Go Version"

      - template: 'azure-pipeline-templates/distro-tests.yml'
        parameters:
          working_dir: $(WORK_DIR)
          root_dir: $(ROOT_DIR)
          temp_dir: $(TEMP_DIR)
          mount_dir: $(MOUNT_DIR)
          config_path: $(BLOBFUSE2_CFG)
          container: $(ContainerName)
          blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
          blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
          adls_account_name: $(AZTEST_ADLS_ACC_NAME)
          adls_account_key: $(AZTEST_ADLS_KEY)
          distro_name: $(AgentName)
          gopath: $(GOPATH)
          installStep:
            script: |
              sudo yum update -y
              sudo yum install gcc gcc-c++ make git fuse fuse3 fuse3-devel python36 -y --nobest --allowerasing 
            displayName: 'Install fuse'
          verbose_log: ${{ parameters.verbose_log }}

  # Debian Tests
  - job: Set_4
    strategy:
      matrix:
        Debian-9.0:
          DistroVer: "Debian9.0"
          Description: "Debian 9"
          AgentName: "blobfuse-debian9"
          ContainerName: "test-cnt-deb-9"
          fuselib: 'fuse libfuse-dev'
          tags: 'fuse2'
        Debian-10.0:
          DistroVer: "Debian10.0"
          Description: "Debian 10"
          AgentName: "blobfuse-debian10"
          ContainerName: "test-cnt-deb-10"
          fuselib: 'fuse libfuse-dev'
          tags: 'fuse2'
        Debian-11.0:
          DistroVer: "Debian11.0"
          Description: "Debian 11"
          AgentName: "blobfuse-debian11"
          ContainerName: "test-cnt-deb-11"
          fuselib: 'fuse3 libfuse3-dev'
          tags: 'fuse3'

    pool:
      name: "blobfuse-debian-pool"
      demands:
        - ImageOverride -equals $(AgentName)

    variables:
      - group: NightlyBlobFuse
      - name: ROOT_DIR
        value: "/usr/pipeline/workv2"
      - name: WORK_DIR
        value: "/usr/pipeline/workv2/go/src/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true
      - name: MOUNT_DIR
        value: "/usr/pipeline/workv2/blob_mnt"
      - name: TEMP_DIR
        value: "/usr/pipeline/workv2/temp"
      - name: BLOBFUSE2_CFG
        value: "/usr/pipeline/workv2/blobfuse2.yaml"
      - name: BLOBFUSE2_ADLS_CFG
        value: "/home/vsts/workv2/blobfuse2.adls.yaml"
      - name: GOPATH
        value: "/usr/pipeline/workv2/go"

    steps:
      # Go tool installer
      - task: GoTool@0
        inputs:
          version: '1.16.2'
        displayName: "Install Go Version"

      - template: 'azure-pipeline-templates/distro-tests.yml'
        parameters:
          working_dir: $(WORK_DIR)
          root_dir: $(ROOT_DIR)
          temp_dir: $(TEMP_DIR)
          mount_dir: $(MOUNT_DIR)
          config_path: $(BLOBFUSE2_CFG)
          container: $(ContainerName)
          blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
          blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
          adls_account_name: $(AZTEST_ADLS_ACC_NAME)
          adls_account_key: $(AZTEST_ADLS_KEY)
          distro_name: $(AgentName)
          tags: $(tags)
          fuselib: $(fuselib)
          gopath: $(GOPATH)
          installStep:
            script: |
              sudo rm /etc/apt/sources.list.d/azure.list
              sudo apt-get update --fix-missing -y
              sudo apt-get install $(fuselib) -y
              sudo apt-get install build-essential git python3 -y
            displayName: 'Install fuse'
          verbose_log: ${{ parameters.verbose_log }}

  # SUSE Tests
  - job: Set_5
    strategy:
      matrix:
        SUSE-15:
          DistroVer: "SUSE-15"
          Description: "SUSE Enterprise Linux 15"
          AgentName: "blobfuse-suse15"
          ContainerName: "test-cnt-suse-15"

    pool:
      name: "blobfuse-suse-pool"
      demands:
        - ImageOverride -equals $(AgentName)

    variables:
      - group: NightlyBlobFuse
      - name: ROOT_DIR
        value: "/usr/pipeline/workv2"
      - name: WORK_DIR
        value: "/usr/pipeline/workv2/go/src/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true
      - name: MOUNT_DIR
        value: "/usr/pipeline/workv2/blob_mnt"
      - name: TEMP_DIR
        value: "/usr/pipeline/workv2/temp"
      - name: BLOBFUSE2_CFG
        value: "/usr/pipeline/workv2/blobfuse2.yaml"
      - name: BLOBFUSE2_ADLS_CFG
        value: "/home/vsts/workv2/blobfuse2.adls.yaml"
      - name: GOPATH
        value: "/usr/pipeline/workv2/go"

    steps:
      # Go tool installer
      - task: GoTool@0
        inputs:
          version: '1.16.2'
        displayName: "Install Go Version"

      - template: 'azure-pipeline-templates/distro-tests.yml'
        parameters:
          working_dir: $(WORK_DIR)
          root_dir: $(ROOT_DIR)
          temp_dir: $(TEMP_DIR)
          mount_dir: $(MOUNT_DIR)
          config_path: $(BLOBFUSE2_CFG)
          container: $(ContainerName)
          blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
          blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
          adls_account_name: $(AZTEST_ADLS_ACC_NAME)
          adls_account_key: $(AZTEST_ADLS_KEY)
          distro_name: $(AgentName)
          gopath: $(GOPATH)
          installStep:
            script: |
              sudo zypper -n install fuse3 fuse3-devel
            displayName: 'Install fuse'
          verbose_log: ${{ parameters.verbose_log }}

  # Mariner Tests
  - job: Set_6
    strategy:
      matrix:
        Mariner:
          DistroVer: "Mariner"
          Description: "CBL-Mariner Linux"
          AgentName: "blobfuse-mariner"
          ContainerName: "test-cnt-mari-1"
          fuselib: 'libfuse-dev'
          tags: 'fuse2'

    pool:
      name: "blobfuse-mariner-pool"
      demands:
        - ImageOverride -equals $(AgentName)

    variables:
      - group: NightlyBlobFuse
      - name: ROOT_DIR
        value: "/usr/pipeline/workv2"
      - name: WORK_DIR
        value: "/usr/pipeline/workv2/go/src/azure-storage-fuse"
      - name: skipComponentGovernanceDetection
        value: true
      - name: MOUNT_DIR
        value: "/usr/pipeline/workv2/blob_mnt"
      - name: TEMP_DIR
        value: "/usr/pipeline/workv2/temp"
      - name: BLOBFUSE2_CFG
        value: "/usr/pipeline/workv2/blobfuse2.yaml"
      - name: BLOBFUSE2_ADLS_CFG
        value: "/home/vsts/workv2/blobfuse2.adls.yaml"
      - name: GOPATH
        value: "/usr/pipeline/workv2/go"

    steps:
      # Go tool installer
      - task: GoTool@0
        inputs:
          version: '1.16.2'
        displayName: "Install Go Version"

      - template: 'azure-pipeline-templates/distro-tests.yml'
        parameters:
          working_dir: $(WORK_DIR)
          root_dir: $(ROOT_DIR)
          temp_dir: $(TEMP_DIR)
          mount_dir: $(MOUNT_DIR)
          config_path: $(BLOBFUSE2_CFG)
          container: $(ContainerName)
          blob_account_name: $(NIGHTLY_STO_BLOB_ACC_NAME)
          blob_account_key: $(NIGHTLY_STO_BLOB_ACC_KEY)
          adls_account_name: $(AZTEST_ADLS_ACC_NAME)
          adls_account_key: $(AZTEST_ADLS_KEY)
          distro_name: $(AgentName)
          tags: $(tags)
          fuselib: $(fuselib)
          gopath: $(GOPATH)
          installStep:
            script: |
              sudo tdnf install build-essential git fuse fuse-devel python36 -y
            displayName: 'Install fuse'
          verbose_log: ${{ parameters.verbose_log }}

  - ${{ if eq(parameters.msi_test, true) }}:
      # -----------------------------------------------------------
      # Ubuntu-20.04 MSI tests
      - job: Set_7
        timeoutInMinutes: 30
        strategy:
          matrix:
            MSI_TEST:
              DistroVer: "Ubn20_MSI"
              AgentName: "blobfuse-ubuntu20"
              Description: "Ubuntu 20 MSI Test"

        pool:
          name: "blobfuse-ubuntu-pool"
          demands:
            - ImageOverride -equals $(AgentName)

        variables:
          - group: NightlyBlobFuse
          - name: ROOT_DIR
            value: "/home/vsts/workv2/"
          - name: WORK_DIR
            value: "/home/vsts/workv2/go/src/azure-storage-fuse"
          - name: skipComponentGovernanceDetection
            value: true
          - name: MOUNT_DIR
            value: "/home/vsts/workv2/blob_mnt"
          - name: TEMP_DIR
            value: "/home/vsts/workv2/blobfuse2tmp"
          - name: BLOBFUSE2_CFG
            value: "/home/vibhansa/myblobv2.msi.yaml"
          - name: BLOBFUSE2_CFG_ADLS
            value: "/home/vibhansa/myblobv2.msi.adls.yaml"
          - name: GOPATH
            value: "/home/vsts/workv2/go"
          - name: containerName
            value: "test-cnt-ubn-20-msi"

        steps:
          - checkout: none

          # Print the agent info 
          - script: |
              echo $(Description)
              hostnamectl
            displayName: 'Print Agent Info'
          
          # Install libfuse
          - script: |
              sudo apt-get install make cmake gcc g++ libfuse3-dev fuse3 -y -o Dpkg::Options::="--force-confnew"
              sudo apt-get update --fix-missing -o Dpkg::Options::="--force-confnew"
            displayName: 'Install Fuse'

          # Prestart cleanup
          - script: |
              sudo fusermount -u $(MOUNT_DIR)
              sudo kill -9 `pidof blobfuse2`
              sudo rm -rf $(ROOT_DIR)
            displayName: 'PreBuild Cleanup'

          # Create directory structure
          - script: |
              sudo rm -rf $(ROOT_DIR)
              sudo mkdir -p $(ROOT_DIR)
              sudo chown -R `whoami` $(ROOT_DIR)
              chmod 777 $(ROOT_DIR)
              mkdir -p $(ROOT_DIR)/go/src
            displayName: 'Create Directory Structure'

          # Checkout the code  
          - script: |
              git clone https://github.com/Azure/azure-storage-fuse
            displayName: 'Checkout Code'
            workingDirectory: $(ROOT_DIR)/go/src

          # Pull the branch
          - script: |
              git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
            displayName: 'Checkout Branch'
            workingDirectory: $(WORK_DIR)

          # Build the code
          - template: 'azure-pipeline-templates/build.yml'
            parameters:
              working_directory: $(WORK_DIR)
              root_dir: $(ROOT_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
              hostedAgent: false
              gopath: $(GOPATH)
              container: $(containerName)
              skip_msi: "false"
          
          # BlockBlob MSI Test
          - script: |
              cd $(WORK_DIR)
              $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_msi.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
            displayName: "Create MSI Config File"
            env:
              NIGHTLY_STO_BLOB_ACC_NAME: $(AZTEST_BLOCK_ACC_NAME) 
              NIGHTLY_MSI_APP_ID: $(AZTEST_APP_ID)
              ACCOUNT_TYPE: 'block'
              ACCOUNT_ENDPOINT: 'https://$(AZTEST_BLOCK_ACC_NAME).blob.core.windows.net'
              VERBOSE_LOG: ${{ parameters.verbose_log }}
            continueOnError: false

          - script:
              cat $(BLOBFUSE2_CFG)
            displayName: "Print config file"

          # Mount the cntainer and run basic tests
          - template: 'azure-pipeline-templates/verify-auth.yml'
            parameters:
              working_dir: $(WORK_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
              idstring: 'BlockBlob MSI'
              distro_name: $(AgentName)
              mountStep:
                script: |
                  $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
                displayName: 'AuthVerify MSI: Mount Container'
                continueOnError: false

          # ADLS MSI Test
          - script: |
              cd $(WORK_DIR)
              $(WORK_DIR)/blobfuse2 gen-test-config --config-file=azure_msi.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=$(BLOBFUSE2_CFG)
            displayName: "Create MSI Config File"
            env:
              NIGHTLY_STO_BLOB_ACC_NAME: $(AZTEST_ADLS_ACC_NAME) 
              NIGHTLY_MSI_APP_ID: $(AZTEST_APP_ID)
              ACCOUNT_TYPE: 'adls'
              ACCOUNT_ENDPOINT: 'https://$(AZTEST_ADLS_ACC_NAME).dfs.core.windows.net'
              VERBOSE_LOG: ${{ parameters.verbose_log }}
            continueOnError: false

          - script:
              cat $(BLOBFUSE2_CFG)
            displayName: "Print config file"

          # Mount the cntainer and run basic tests
          - template: 'azure-pipeline-templates/verify-auth.yml'
            parameters:
              working_dir: $(WORK_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
              idstring: 'ADLS MSI'
              distro_name: $(AgentName)
              mountStep:
                script: |
                  $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=$(BLOBFUSE2_CFG)
                displayName: 'AuthVerify MSI: Mount Container'
                continueOnError: false

          # Cleanup
          - template: 'azure-pipeline-templates/cleanup.yml'
            parameters:
              working_dir: $(WORK_DIR)
              mount_dir: $(MOUNT_DIR)
              temp_dir: $(TEMP_DIR)
          
          - script: |
              sudo rm -rf ${ROOT_DIR}
              pwd
              cd /`pwd | cut -d '/' -f 2,3,4,5`
              sudo rm -rf [0-9]
            displayName: 'Clean Agent Directories'
            condition: always() 