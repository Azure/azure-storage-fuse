/*
    _____           _____   _____   ____          ______  _____  ------
   |     |  |      |     | |     | |     |     | |       |            |
   |     |  |      |     | |     | |     |     | |       |            |
   | --- |  |      |     | |-----| |---- |     | |-----| |-----  ------
   |     |  |      |     | |     | |     |     |       | |       |
   | ____|  |_____ | ____| | ____| |     |_____|  _____| |_____  |_____


   Licensed under the MIT License <http://opensource.org/licenses/MIT>.

   Copyright Â© 2020-2025 Microsoft Corporation. All rights reserved.
   Author : <blobfusedev@microsoft.com>

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE
*/

// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package models

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ErrorCode int64

const (
	ErrorCode_InvalidRequest          ErrorCode = 1
	ErrorCode_InvalidRVID             ErrorCode = 2
	ErrorCode_InvalidRV               ErrorCode = 3
	ErrorCode_InternalServerError     ErrorCode = 4
	ErrorCode_ChunkNotFound           ErrorCode = 5
	ErrorCode_ChunkAlreadyExists      ErrorCode = 6
	ErrorCode_MaxMVsExceeded          ErrorCode = 7
	ErrorCode_NeedToRefreshClusterMap ErrorCode = 8
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_InvalidRequest:
		return "InvalidRequest"
	case ErrorCode_InvalidRVID:
		return "InvalidRVID"
	case ErrorCode_InvalidRV:
		return "InvalidRV"
	case ErrorCode_InternalServerError:
		return "InternalServerError"
	case ErrorCode_ChunkNotFound:
		return "ChunkNotFound"
	case ErrorCode_ChunkAlreadyExists:
		return "ChunkAlreadyExists"
	case ErrorCode_MaxMVsExceeded:
		return "MaxMVsExceeded"
	case ErrorCode_NeedToRefreshClusterMap:
		return "NeedToRefreshClusterMap"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "InvalidRequest":
		return ErrorCode_InvalidRequest, nil
	case "InvalidRVID":
		return ErrorCode_InvalidRVID, nil
	case "InvalidRV":
		return ErrorCode_InvalidRV, nil
	case "InternalServerError":
		return ErrorCode_InternalServerError, nil
	case "ChunkNotFound":
		return ErrorCode_ChunkNotFound, nil
	case "ChunkAlreadyExists":
		return ErrorCode_ChunkAlreadyExists, nil
	case "MaxMVsExceeded":
		return ErrorCode_MaxMVsExceeded, nil
	case "NeedToRefreshClusterMap":
		return ErrorCode_NeedToRefreshClusterMap, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
	q, err := ErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ErrorCode(v)
	return nil
}

func (p *ErrorCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - SenderNodeID
//   - ReceiverNodeID
//   - Time
//   - RVName
//   - MV
type HelloRequest struct {
	SenderNodeID   string   `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	ReceiverNodeID string   `thrift:"receiverNodeID,2" db:"receiverNodeID" json:"receiverNodeID"`
	Time           int64    `thrift:"time,3" db:"time" json:"time"`
	RVName         []string `thrift:"RVName,4" db:"RVName" json:"RVName"`
	MV             []string `thrift:"MV,5" db:"MV" json:"MV"`
}

func NewHelloRequest() *HelloRequest {
	return &HelloRequest{}
}

func (p *HelloRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

func (p *HelloRequest) GetReceiverNodeID() string {
	return p.ReceiverNodeID
}

func (p *HelloRequest) GetTime() int64 {
	return p.Time
}

func (p *HelloRequest) GetRVName() []string {
	return p.RVName
}

func (p *HelloRequest) GetMV() []string {
	return p.MV
}
func (p *HelloRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HelloRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *HelloRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReceiverNodeID = v
	}
	return nil
}

func (p *HelloRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *HelloRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.RVName = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.RVName = append(p.RVName, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HelloRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MV = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.MV = append(p.MV, _elem1)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HelloRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HelloRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HelloRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *HelloRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "receiverNodeID", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:receiverNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ReceiverNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receiverNodeID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:receiverNodeID: ", p), err)
	}
	return err
}

func (p *HelloRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "time", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:time: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Time)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:time: ", p), err)
	}
	return err
}

func (p *HelloRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RVName", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:RVName: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.RVName)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RVName {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:RVName: ", p), err)
	}
	return err
}

func (p *HelloRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:MV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MV {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:MV: ", p), err)
	}
	return err
}

func (p *HelloRequest) Equals(other *HelloRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if p.ReceiverNodeID != other.ReceiverNodeID {
		return false
	}
	if p.Time != other.Time {
		return false
	}
	if len(p.RVName) != len(other.RVName) {
		return false
	}
	for i, _tgt := range p.RVName {
		_src2 := other.RVName[i]
		if _tgt != _src2 {
			return false
		}
	}
	if len(p.MV) != len(other.MV) {
		return false
	}
	for i, _tgt := range p.MV {
		_src3 := other.MV[i]
		if _tgt != _src3 {
			return false
		}
	}
	return true
}

func (p *HelloRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloRequest(%+v)", *p)
}

// Attributes:
//   - ReceiverNodeID
//   - Time
//   - RVName
//   - MV
type HelloResponse struct {
	ReceiverNodeID string   `thrift:"receiverNodeID,1" db:"receiverNodeID" json:"receiverNodeID"`
	Time           int64    `thrift:"time,2" db:"time" json:"time"`
	RVName         []string `thrift:"RVName,3" db:"RVName" json:"RVName"`
	MV             []string `thrift:"MV,4" db:"MV" json:"MV"`
}

func NewHelloResponse() *HelloResponse {
	return &HelloResponse{}
}

func (p *HelloResponse) GetReceiverNodeID() string {
	return p.ReceiverNodeID
}

func (p *HelloResponse) GetTime() int64 {
	return p.Time
}

func (p *HelloResponse) GetRVName() []string {
	return p.RVName
}

func (p *HelloResponse) GetMV() []string {
	return p.MV
}
func (p *HelloResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HelloResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReceiverNodeID = v
	}
	return nil
}

func (p *HelloResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *HelloResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.RVName = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.RVName = append(p.RVName, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HelloResponse) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.MV = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.MV = append(p.MV, _elem5)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HelloResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HelloResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HelloResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "receiverNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:receiverNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ReceiverNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receiverNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:receiverNodeID: ", p), err)
	}
	return err
}

func (p *HelloResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "time", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Time)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time: ", p), err)
	}
	return err
}

func (p *HelloResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RVName", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RVName: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.RVName)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RVName {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RVName: ", p), err)
	}
	return err
}

func (p *HelloResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:MV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MV {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:MV: ", p), err)
	}
	return err
}

func (p *HelloResponse) Equals(other *HelloResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ReceiverNodeID != other.ReceiverNodeID {
		return false
	}
	if p.Time != other.Time {
		return false
	}
	if len(p.RVName) != len(other.RVName) {
		return false
	}
	for i, _tgt := range p.RVName {
		_src6 := other.RVName[i]
		if _tgt != _src6 {
			return false
		}
	}
	if len(p.MV) != len(other.MV) {
		return false
	}
	for i, _tgt := range p.MV {
		_src7 := other.MV[i]
		if _tgt != _src7 {
			return false
		}
	}
	return true
}

func (p *HelloResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloResponse(%+v)", *p)
}

// Attributes:
//   - FileID
//   - RvID
//   - MvName
//   - OffsetInMiB
type Address struct {
	FileID      string `thrift:"fileID,1" db:"fileID" json:"fileID"`
	RvID        string `thrift:"rvID,2" db:"rvID" json:"rvID"`
	MvName      string `thrift:"mvName,3" db:"mvName" json:"mvName"`
	OffsetInMiB int64  `thrift:"offsetInMiB,4" db:"offsetInMiB" json:"offsetInMiB"`
}

func NewAddress() *Address {
	return &Address{}
}

func (p *Address) GetFileID() string {
	return p.FileID
}

func (p *Address) GetRvID() string {
	return p.RvID
}

func (p *Address) GetMvName() string {
	return p.MvName
}

func (p *Address) GetOffsetInMiB() int64 {
	return p.OffsetInMiB
}
func (p *Address) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Address) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileID = v
	}
	return nil
}

func (p *Address) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RvID = v
	}
	return nil
}

func (p *Address) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MvName = v
	}
	return nil
}

func (p *Address) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OffsetInMiB = v
	}
	return nil
}

func (p *Address) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Address"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Address) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fileID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.FileID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileID: ", p), err)
	}
	return err
}

func (p *Address) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "rvID", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rvID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RvID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rvID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rvID: ", p), err)
	}
	return err
}

func (p *Address) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "mvName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mvName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MvName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mvName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mvName: ", p), err)
	}
	return err
}

func (p *Address) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "offsetInMiB", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:offsetInMiB: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OffsetInMiB)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offsetInMiB (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:offsetInMiB: ", p), err)
	}
	return err
}

func (p *Address) Equals(other *Address) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.FileID != other.FileID {
		return false
	}
	if p.RvID != other.RvID {
		return false
	}
	if p.MvName != other.MvName {
		return false
	}
	if p.OffsetInMiB != other.OffsetInMiB {
		return false
	}
	return true
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)
}

// Attributes:
//   - Address
//   - Data
//   - Hash
type Chunk struct {
	Address *Address `thrift:"address,1" db:"address" json:"address"`
	Data    []byte   `thrift:"data,2" db:"data" json:"data"`
	Hash    string   `thrift:"hash,3" db:"hash" json:"hash"`
}

func NewChunk() *Chunk {
	return &Chunk{}
}

var Chunk_Address_DEFAULT *Address

func (p *Chunk) GetAddress() *Address {
	if !p.IsSetAddress() {
		return Chunk_Address_DEFAULT
	}
	return p.Address
}

func (p *Chunk) GetData() []byte {
	return p.Data
}

func (p *Chunk) GetHash() string {
	return p.Hash
}
func (p *Chunk) IsSetAddress() bool {
	return p.Address != nil
}

func (p *Chunk) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Chunk) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Address = &Address{}
	if err := p.Address.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
	}
	return nil
}

func (p *Chunk) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *Chunk) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Hash = v
	}
	return nil
}

func (p *Chunk) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Chunk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Chunk) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err)
	}
	if err := p.Address.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err)
	}
	return err
}

func (p *Chunk) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Data); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *Chunk) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hash", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hash: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Hash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hash (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hash: ", p), err)
	}
	return err
}

func (p *Chunk) Equals(other *Chunk) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Address.Equals(other.Address) {
		return false
	}
	if bytes.Compare(p.Data, other.Data) != 0 {
		return false
	}
	if p.Hash != other.Hash {
		return false
	}
	return true
}

func (p *Chunk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Chunk(%+v)", *p)
}

// Attributes:
//   - Name
//   - State
type RVNameAndState struct {
	Name  string `thrift:"name,1" db:"name" json:"name"`
	State string `thrift:"state,2" db:"state" json:"state"`
}

func NewRVNameAndState() *RVNameAndState {
	return &RVNameAndState{}
}

func (p *RVNameAndState) GetName() string {
	return p.Name
}

func (p *RVNameAndState) GetState() string {
	return p.State
}
func (p *RVNameAndState) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RVNameAndState) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *RVNameAndState) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *RVNameAndState) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RVNameAndState"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RVNameAndState) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *RVNameAndState) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "state", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err)
	}
	return err
}

func (p *RVNameAndState) Equals(other *RVNameAndState) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		return false
	}
	if p.State != other.State {
		return false
	}
	return true
}

func (p *RVNameAndState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RVNameAndState(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - Address
//   - OffsetInChunk
//   - Length
//   - ComponentRV
type GetChunkRequest struct {
	SenderNodeID  string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	Address       *Address          `thrift:"address,2" db:"address" json:"address"`
	OffsetInChunk int64             `thrift:"offsetInChunk,3" db:"offsetInChunk" json:"offsetInChunk"`
	Length        int64             `thrift:"length,4" db:"length" json:"length"`
	ComponentRV   []*RVNameAndState `thrift:"componentRV,5" db:"componentRV" json:"componentRV"`
}

func NewGetChunkRequest() *GetChunkRequest {
	return &GetChunkRequest{}
}

func (p *GetChunkRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

var GetChunkRequest_Address_DEFAULT *Address

func (p *GetChunkRequest) GetAddress() *Address {
	if !p.IsSetAddress() {
		return GetChunkRequest_Address_DEFAULT
	}
	return p.Address
}

func (p *GetChunkRequest) GetOffsetInChunk() int64 {
	return p.OffsetInChunk
}

func (p *GetChunkRequest) GetLength() int64 {
	return p.Length
}

func (p *GetChunkRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}
func (p *GetChunkRequest) IsSetAddress() bool {
	return p.Address != nil
}

func (p *GetChunkRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetChunkRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *GetChunkRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Address = &Address{}
	if err := p.Address.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
	}
	return nil
}

func (p *GetChunkRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OffsetInChunk = v
	}
	return nil
}

func (p *GetChunkRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *GetChunkRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &RVNameAndState{}
		if err := _elem8.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem8)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetChunkRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetChunkRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetChunkRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *GetChunkRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
	}
	if err := p.Address.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
	}
	return err
}

func (p *GetChunkRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "offsetInChunk", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offsetInChunk: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OffsetInChunk)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offsetInChunk (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offsetInChunk: ", p), err)
	}
	return err
}

func (p *GetChunkRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "length", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:length: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.length (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:length: ", p), err)
	}
	return err
}

func (p *GetChunkRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:componentRV: ", p), err)
	}
	return err
}

func (p *GetChunkRequest) Equals(other *GetChunkRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if !p.Address.Equals(other.Address) {
		return false
	}
	if p.OffsetInChunk != other.OffsetInChunk {
		return false
	}
	if p.Length != other.Length {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src9 := other.ComponentRV[i]
		if !_tgt.Equals(_src9) {
			return false
		}
	}
	return true
}

func (p *GetChunkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChunkRequest(%+v)", *p)
}

// Attributes:
//   - Chunk
//   - ChunkWriteTime
//   - TimeTaken
//   - ComponentRV
type GetChunkResponse struct {
	Chunk          *Chunk            `thrift:"chunk,1" db:"chunk" json:"chunk"`
	ChunkWriteTime string            `thrift:"chunkWriteTime,2" db:"chunkWriteTime" json:"chunkWriteTime"`
	TimeTaken      int64             `thrift:"timeTaken,3" db:"timeTaken" json:"timeTaken"`
	ComponentRV    []*RVNameAndState `thrift:"componentRV,4" db:"componentRV" json:"componentRV"`
}

func NewGetChunkResponse() *GetChunkResponse {
	return &GetChunkResponse{}
}

var GetChunkResponse_Chunk_DEFAULT *Chunk

func (p *GetChunkResponse) GetChunk() *Chunk {
	if !p.IsSetChunk() {
		return GetChunkResponse_Chunk_DEFAULT
	}
	return p.Chunk
}

func (p *GetChunkResponse) GetChunkWriteTime() string {
	return p.ChunkWriteTime
}

func (p *GetChunkResponse) GetTimeTaken() int64 {
	return p.TimeTaken
}

func (p *GetChunkResponse) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}
func (p *GetChunkResponse) IsSetChunk() bool {
	return p.Chunk != nil
}

func (p *GetChunkResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetChunkResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Chunk = &Chunk{}
	if err := p.Chunk.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chunk), err)
	}
	return nil
}

func (p *GetChunkResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChunkWriteTime = v
	}
	return nil
}

func (p *GetChunkResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TimeTaken = v
	}
	return nil
}

func (p *GetChunkResponse) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &RVNameAndState{}
		if err := _elem10.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem10)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetChunkResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetChunkResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetChunkResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chunk", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chunk: ", p), err)
	}
	if err := p.Chunk.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chunk), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chunk: ", p), err)
	}
	return err
}

func (p *GetChunkResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chunkWriteTime", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chunkWriteTime: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChunkWriteTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chunkWriteTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chunkWriteTime: ", p), err)
	}
	return err
}

func (p *GetChunkResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timeTaken", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeTaken: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TimeTaken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeTaken (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeTaken: ", p), err)
	}
	return err
}

func (p *GetChunkResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:componentRV: ", p), err)
	}
	return err
}

func (p *GetChunkResponse) Equals(other *GetChunkResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Chunk.Equals(other.Chunk) {
		return false
	}
	if p.ChunkWriteTime != other.ChunkWriteTime {
		return false
	}
	if p.TimeTaken != other.TimeTaken {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src11 := other.ComponentRV[i]
		if !_tgt.Equals(_src11) {
			return false
		}
	}
	return true
}

func (p *GetChunkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChunkResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - Chunk
//   - Length
//   - SyncID
//   - ComponentRV
//   - MaybeOverwrite
type PutChunkRequest struct {
	SenderNodeID   string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	Chunk          *Chunk            `thrift:"chunk,2" db:"chunk" json:"chunk"`
	Length         int64             `thrift:"length,3" db:"length" json:"length"`
	SyncID         string            `thrift:"syncID,4" db:"syncID" json:"syncID"`
	ComponentRV    []*RVNameAndState `thrift:"componentRV,5" db:"componentRV" json:"componentRV"`
	MaybeOverwrite bool              `thrift:"maybeOverwrite,6" db:"maybeOverwrite" json:"maybeOverwrite"`
}

func NewPutChunkRequest() *PutChunkRequest {
	return &PutChunkRequest{}
}

func (p *PutChunkRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

var PutChunkRequest_Chunk_DEFAULT *Chunk

func (p *PutChunkRequest) GetChunk() *Chunk {
	if !p.IsSetChunk() {
		return PutChunkRequest_Chunk_DEFAULT
	}
	return p.Chunk
}

func (p *PutChunkRequest) GetLength() int64 {
	return p.Length
}

func (p *PutChunkRequest) GetSyncID() string {
	return p.SyncID
}

func (p *PutChunkRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}

func (p *PutChunkRequest) GetMaybeOverwrite() bool {
	return p.MaybeOverwrite
}
func (p *PutChunkRequest) IsSetChunk() bool {
	return p.Chunk != nil
}

func (p *PutChunkRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutChunkRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *PutChunkRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Chunk = &Chunk{}
	if err := p.Chunk.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chunk), err)
	}
	return nil
}

func (p *PutChunkRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *PutChunkRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SyncID = v
	}
	return nil
}

func (p *PutChunkRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &RVNameAndState{}
		if err := _elem12.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem12)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PutChunkRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MaybeOverwrite = v
	}
	return nil
}

func (p *PutChunkRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PutChunkRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutChunkRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *PutChunkRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chunk", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chunk: ", p), err)
	}
	if err := p.Chunk.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chunk), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chunk: ", p), err)
	}
	return err
}

func (p *PutChunkRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "length", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:length: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.length (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:length: ", p), err)
	}
	return err
}

func (p *PutChunkRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "syncID", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:syncID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SyncID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:syncID: ", p), err)
	}
	return err
}

func (p *PutChunkRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:componentRV: ", p), err)
	}
	return err
}

func (p *PutChunkRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "maybeOverwrite", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maybeOverwrite: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.MaybeOverwrite)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maybeOverwrite (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maybeOverwrite: ", p), err)
	}
	return err
}

func (p *PutChunkRequest) Equals(other *PutChunkRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if !p.Chunk.Equals(other.Chunk) {
		return false
	}
	if p.Length != other.Length {
		return false
	}
	if p.SyncID != other.SyncID {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src13 := other.ComponentRV[i]
		if !_tgt.Equals(_src13) {
			return false
		}
	}
	if p.MaybeOverwrite != other.MaybeOverwrite {
		return false
	}
	return true
}

func (p *PutChunkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutChunkRequest(%+v)", *p)
}

// Attributes:
//   - TimeTaken
//   - AvailableSpace
//   - ComponentRV
type PutChunkResponse struct {
	TimeTaken      int64             `thrift:"timeTaken,1" db:"timeTaken" json:"timeTaken"`
	AvailableSpace int64             `thrift:"availableSpace,2" db:"availableSpace" json:"availableSpace"`
	ComponentRV    []*RVNameAndState `thrift:"componentRV,3" db:"componentRV" json:"componentRV"`
}

func NewPutChunkResponse() *PutChunkResponse {
	return &PutChunkResponse{}
}

func (p *PutChunkResponse) GetTimeTaken() int64 {
	return p.TimeTaken
}

func (p *PutChunkResponse) GetAvailableSpace() int64 {
	return p.AvailableSpace
}

func (p *PutChunkResponse) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}
func (p *PutChunkResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PutChunkResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TimeTaken = v
	}
	return nil
}

func (p *PutChunkResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AvailableSpace = v
	}
	return nil
}

func (p *PutChunkResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &RVNameAndState{}
		if err := _elem14.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem14)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PutChunkResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PutChunkResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PutChunkResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timeTaken", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeTaken: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TimeTaken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeTaken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeTaken: ", p), err)
	}
	return err
}

func (p *PutChunkResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "availableSpace", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:availableSpace: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.AvailableSpace)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.availableSpace (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:availableSpace: ", p), err)
	}
	return err
}

func (p *PutChunkResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:componentRV: ", p), err)
	}
	return err
}

func (p *PutChunkResponse) Equals(other *PutChunkResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TimeTaken != other.TimeTaken {
		return false
	}
	if p.AvailableSpace != other.AvailableSpace {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src15 := other.ComponentRV[i]
		if !_tgt.Equals(_src15) {
			return false
		}
	}
	return true
}

func (p *PutChunkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutChunkResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - Address
//   - ComponentRV
type RemoveChunkRequest struct {
	SenderNodeID string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	Address      *Address          `thrift:"address,2" db:"address" json:"address"`
	ComponentRV  []*RVNameAndState `thrift:"componentRV,3" db:"componentRV" json:"componentRV"`
}

func NewRemoveChunkRequest() *RemoveChunkRequest {
	return &RemoveChunkRequest{}
}

func (p *RemoveChunkRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

var RemoveChunkRequest_Address_DEFAULT *Address

func (p *RemoveChunkRequest) GetAddress() *Address {
	if !p.IsSetAddress() {
		return RemoveChunkRequest_Address_DEFAULT
	}
	return p.Address
}

func (p *RemoveChunkRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}
func (p *RemoveChunkRequest) IsSetAddress() bool {
	return p.Address != nil
}

func (p *RemoveChunkRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveChunkRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *RemoveChunkRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Address = &Address{}
	if err := p.Address.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
	}
	return nil
}

func (p *RemoveChunkRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &RVNameAndState{}
		if err := _elem16.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem16)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RemoveChunkRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RemoveChunkRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveChunkRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *RemoveChunkRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
	}
	if err := p.Address.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
	}
	return err
}

func (p *RemoveChunkRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:componentRV: ", p), err)
	}
	return err
}

func (p *RemoveChunkRequest) Equals(other *RemoveChunkRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if !p.Address.Equals(other.Address) {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src17 := other.ComponentRV[i]
		if !_tgt.Equals(_src17) {
			return false
		}
	}
	return true
}

func (p *RemoveChunkRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveChunkRequest(%+v)", *p)
}

// Attributes:
//   - TimeTaken
//   - AvailableSpace
//   - ComponentRV
//   - NumChunksDeleted
//   - NeedRetry
type RemoveChunkResponse struct {
	TimeTaken        int64             `thrift:"timeTaken,1" db:"timeTaken" json:"timeTaken"`
	AvailableSpace   int64             `thrift:"availableSpace,2" db:"availableSpace" json:"availableSpace"`
	ComponentRV      []*RVNameAndState `thrift:"componentRV,3" db:"componentRV" json:"componentRV"`
	NumChunksDeleted int64             `thrift:"numChunksDeleted,4" db:"numChunksDeleted" json:"numChunksDeleted"`
	NeedRetry        bool              `thrift:"needRetry,5" db:"needRetry" json:"needRetry"`
}

func NewRemoveChunkResponse() *RemoveChunkResponse {
	return &RemoveChunkResponse{}
}

func (p *RemoveChunkResponse) GetTimeTaken() int64 {
	return p.TimeTaken
}

func (p *RemoveChunkResponse) GetAvailableSpace() int64 {
	return p.AvailableSpace
}

func (p *RemoveChunkResponse) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}

func (p *RemoveChunkResponse) GetNumChunksDeleted() int64 {
	return p.NumChunksDeleted
}

func (p *RemoveChunkResponse) GetNeedRetry() bool {
	return p.NeedRetry
}
func (p *RemoveChunkResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveChunkResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TimeTaken = v
	}
	return nil
}

func (p *RemoveChunkResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AvailableSpace = v
	}
	return nil
}

func (p *RemoveChunkResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &RVNameAndState{}
		if err := _elem18.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem18)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RemoveChunkResponse) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumChunksDeleted = v
	}
	return nil
}

func (p *RemoveChunkResponse) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NeedRetry = v
	}
	return nil
}

func (p *RemoveChunkResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RemoveChunkResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveChunkResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timeTaken", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeTaken: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TimeTaken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeTaken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeTaken: ", p), err)
	}
	return err
}

func (p *RemoveChunkResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "availableSpace", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:availableSpace: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.AvailableSpace)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.availableSpace (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:availableSpace: ", p), err)
	}
	return err
}

func (p *RemoveChunkResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:componentRV: ", p), err)
	}
	return err
}

func (p *RemoveChunkResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "numChunksDeleted", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numChunksDeleted: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.NumChunksDeleted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.numChunksDeleted (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numChunksDeleted: ", p), err)
	}
	return err
}

func (p *RemoveChunkResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "needRetry", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:needRetry: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.NeedRetry)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.needRetry (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:needRetry: ", p), err)
	}
	return err
}

func (p *RemoveChunkResponse) Equals(other *RemoveChunkResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TimeTaken != other.TimeTaken {
		return false
	}
	if p.AvailableSpace != other.AvailableSpace {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src19 := other.ComponentRV[i]
		if !_tgt.Equals(_src19) {
			return false
		}
	}
	if p.NumChunksDeleted != other.NumChunksDeleted {
		return false
	}
	if p.NeedRetry != other.NeedRetry {
		return false
	}
	return true
}

func (p *RemoveChunkResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveChunkResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - MV
//   - RVName
//   - ReserveSpace
//   - ComponentRV
type JoinMVRequest struct {
	SenderNodeID string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	MV           string            `thrift:"MV,2" db:"MV" json:"MV"`
	RVName       string            `thrift:"RVName,3" db:"RVName" json:"RVName"`
	ReserveSpace int64             `thrift:"reserveSpace,4" db:"reserveSpace" json:"reserveSpace"`
	ComponentRV  []*RVNameAndState `thrift:"componentRV,5" db:"componentRV" json:"componentRV"`
}

func NewJoinMVRequest() *JoinMVRequest {
	return &JoinMVRequest{}
}

func (p *JoinMVRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

func (p *JoinMVRequest) GetMV() string {
	return p.MV
}

func (p *JoinMVRequest) GetRVName() string {
	return p.RVName
}

func (p *JoinMVRequest) GetReserveSpace() int64 {
	return p.ReserveSpace
}

func (p *JoinMVRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}
func (p *JoinMVRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JoinMVRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *JoinMVRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MV = v
	}
	return nil
}

func (p *JoinMVRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RVName = v
	}
	return nil
}

func (p *JoinMVRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReserveSpace = v
	}
	return nil
}

func (p *JoinMVRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &RVNameAndState{}
		if err := _elem20.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem20)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *JoinMVRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "JoinMVRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JoinMVRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *JoinMVRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MV: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MV (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MV: ", p), err)
	}
	return err
}

func (p *JoinMVRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RVName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RVName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RVName: ", p), err)
	}
	return err
}

func (p *JoinMVRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reserveSpace", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reserveSpace: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ReserveSpace)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reserveSpace (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reserveSpace: ", p), err)
	}
	return err
}

func (p *JoinMVRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:componentRV: ", p), err)
	}
	return err
}

func (p *JoinMVRequest) Equals(other *JoinMVRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if p.MV != other.MV {
		return false
	}
	if p.RVName != other.RVName {
		return false
	}
	if p.ReserveSpace != other.ReserveSpace {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src21 := other.ComponentRV[i]
		if !_tgt.Equals(_src21) {
			return false
		}
	}
	return true
}

func (p *JoinMVRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinMVRequest(%+v)", *p)
}

type JoinMVResponse struct {
}

func NewJoinMVResponse() *JoinMVResponse {
	return &JoinMVResponse{}
}

func (p *JoinMVResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JoinMVResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "JoinMVResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JoinMVResponse) Equals(other *JoinMVResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *JoinMVResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinMVResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - MV
//   - RVName
//   - ComponentRV
type UpdateMVRequest struct {
	SenderNodeID string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	MV           string            `thrift:"MV,2" db:"MV" json:"MV"`
	RVName       string            `thrift:"RVName,3" db:"RVName" json:"RVName"`
	ComponentRV  []*RVNameAndState `thrift:"componentRV,4" db:"componentRV" json:"componentRV"`
}

func NewUpdateMVRequest() *UpdateMVRequest {
	return &UpdateMVRequest{}
}

func (p *UpdateMVRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

func (p *UpdateMVRequest) GetMV() string {
	return p.MV
}

func (p *UpdateMVRequest) GetRVName() string {
	return p.RVName
}

func (p *UpdateMVRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}
func (p *UpdateMVRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateMVRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *UpdateMVRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MV = v
	}
	return nil
}

func (p *UpdateMVRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RVName = v
	}
	return nil
}

func (p *UpdateMVRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &RVNameAndState{}
		if err := _elem22.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem22)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UpdateMVRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateMVRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateMVRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *UpdateMVRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MV: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MV (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MV: ", p), err)
	}
	return err
}

func (p *UpdateMVRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RVName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RVName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RVName: ", p), err)
	}
	return err
}

func (p *UpdateMVRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:componentRV: ", p), err)
	}
	return err
}

func (p *UpdateMVRequest) Equals(other *UpdateMVRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if p.MV != other.MV {
		return false
	}
	if p.RVName != other.RVName {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src23 := other.ComponentRV[i]
		if !_tgt.Equals(_src23) {
			return false
		}
	}
	return true
}

func (p *UpdateMVRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMVRequest(%+v)", *p)
}

type UpdateMVResponse struct {
}

func NewUpdateMVResponse() *UpdateMVResponse {
	return &UpdateMVResponse{}
}

func (p *UpdateMVResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateMVResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateMVResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateMVResponse) Equals(other *UpdateMVResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *UpdateMVResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateMVResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - MV
//   - RVName
//   - ComponentRV
type LeaveMVRequest struct {
	SenderNodeID string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	MV           string            `thrift:"MV,2" db:"MV" json:"MV"`
	RVName       string            `thrift:"RVName,3" db:"RVName" json:"RVName"`
	ComponentRV  []*RVNameAndState `thrift:"componentRV,4" db:"componentRV" json:"componentRV"`
}

func NewLeaveMVRequest() *LeaveMVRequest {
	return &LeaveMVRequest{}
}

func (p *LeaveMVRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

func (p *LeaveMVRequest) GetMV() string {
	return p.MV
}

func (p *LeaveMVRequest) GetRVName() string {
	return p.RVName
}

func (p *LeaveMVRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}
func (p *LeaveMVRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LeaveMVRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *LeaveMVRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MV = v
	}
	return nil
}

func (p *LeaveMVRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RVName = v
	}
	return nil
}

func (p *LeaveMVRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem24 := &RVNameAndState{}
		if err := _elem24.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem24)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LeaveMVRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveMVRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LeaveMVRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *LeaveMVRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MV: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MV (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MV: ", p), err)
	}
	return err
}

func (p *LeaveMVRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RVName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RVName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RVName: ", p), err)
	}
	return err
}

func (p *LeaveMVRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:componentRV: ", p), err)
	}
	return err
}

func (p *LeaveMVRequest) Equals(other *LeaveMVRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if p.MV != other.MV {
		return false
	}
	if p.RVName != other.RVName {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src25 := other.ComponentRV[i]
		if !_tgt.Equals(_src25) {
			return false
		}
	}
	return true
}

func (p *LeaveMVRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveMVRequest(%+v)", *p)
}

type LeaveMVResponse struct {
}

func NewLeaveMVResponse() *LeaveMVResponse {
	return &LeaveMVResponse{}
}

func (p *LeaveMVResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LeaveMVResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveMVResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LeaveMVResponse) Equals(other *LeaveMVResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *LeaveMVResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeaveMVResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - MV
//   - SourceRVName
//   - TargetRVName
//   - ComponentRV
//   - SyncSize
type StartSyncRequest struct {
	SenderNodeID string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	MV           string            `thrift:"MV,2" db:"MV" json:"MV"`
	SourceRVName string            `thrift:"sourceRVName,3" db:"sourceRVName" json:"sourceRVName"`
	TargetRVName string            `thrift:"targetRVName,4" db:"targetRVName" json:"targetRVName"`
	ComponentRV  []*RVNameAndState `thrift:"componentRV,5" db:"componentRV" json:"componentRV"`
	SyncSize     int64             `thrift:"syncSize,6" db:"syncSize" json:"syncSize"`
}

func NewStartSyncRequest() *StartSyncRequest {
	return &StartSyncRequest{}
}

func (p *StartSyncRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

func (p *StartSyncRequest) GetMV() string {
	return p.MV
}

func (p *StartSyncRequest) GetSourceRVName() string {
	return p.SourceRVName
}

func (p *StartSyncRequest) GetTargetRVName() string {
	return p.TargetRVName
}

func (p *StartSyncRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}

func (p *StartSyncRequest) GetSyncSize() int64 {
	return p.SyncSize
}
func (p *StartSyncRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StartSyncRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *StartSyncRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MV = v
	}
	return nil
}

func (p *StartSyncRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SourceRVName = v
	}
	return nil
}

func (p *StartSyncRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TargetRVName = v
	}
	return nil
}

func (p *StartSyncRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &RVNameAndState{}
		if err := _elem26.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem26)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StartSyncRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SyncSize = v
	}
	return nil
}

func (p *StartSyncRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartSyncRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StartSyncRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *StartSyncRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MV: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MV (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MV: ", p), err)
	}
	return err
}

func (p *StartSyncRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sourceRVName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sourceRVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SourceRVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceRVName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sourceRVName: ", p), err)
	}
	return err
}

func (p *StartSyncRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetRVName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetRVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TargetRVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetRVName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetRVName: ", p), err)
	}
	return err
}

func (p *StartSyncRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:componentRV: ", p), err)
	}
	return err
}

func (p *StartSyncRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "syncSize", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:syncSize: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.SyncSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncSize (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:syncSize: ", p), err)
	}
	return err
}

func (p *StartSyncRequest) Equals(other *StartSyncRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if p.MV != other.MV {
		return false
	}
	if p.SourceRVName != other.SourceRVName {
		return false
	}
	if p.TargetRVName != other.TargetRVName {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src27 := other.ComponentRV[i]
		if !_tgt.Equals(_src27) {
			return false
		}
	}
	if p.SyncSize != other.SyncSize {
		return false
	}
	return true
}

func (p *StartSyncRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartSyncRequest(%+v)", *p)
}

// Attributes:
//   - SyncID
type StartSyncResponse struct {
	SyncID string `thrift:"syncID,1" db:"syncID" json:"syncID"`
}

func NewStartSyncResponse() *StartSyncResponse {
	return &StartSyncResponse{}
}

func (p *StartSyncResponse) GetSyncID() string {
	return p.SyncID
}
func (p *StartSyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StartSyncResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SyncID = v
	}
	return nil
}

func (p *StartSyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StartSyncResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StartSyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "syncID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SyncID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncID: ", p), err)
	}
	return err
}

func (p *StartSyncResponse) Equals(other *StartSyncResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SyncID != other.SyncID {
		return false
	}
	return true
}

func (p *StartSyncResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartSyncResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - SyncID
//   - MV
//   - SourceRVName
//   - TargetRVName
//   - ComponentRV
//   - SyncSize
type EndSyncRequest struct {
	SenderNodeID string            `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	SyncID       string            `thrift:"syncID,2" db:"syncID" json:"syncID"`
	MV           string            `thrift:"MV,3" db:"MV" json:"MV"`
	SourceRVName string            `thrift:"sourceRVName,4" db:"sourceRVName" json:"sourceRVName"`
	TargetRVName string            `thrift:"targetRVName,5" db:"targetRVName" json:"targetRVName"`
	ComponentRV  []*RVNameAndState `thrift:"componentRV,6" db:"componentRV" json:"componentRV"`
	SyncSize     int64             `thrift:"syncSize,7" db:"syncSize" json:"syncSize"`
}

func NewEndSyncRequest() *EndSyncRequest {
	return &EndSyncRequest{}
}

func (p *EndSyncRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

func (p *EndSyncRequest) GetSyncID() string {
	return p.SyncID
}

func (p *EndSyncRequest) GetMV() string {
	return p.MV
}

func (p *EndSyncRequest) GetSourceRVName() string {
	return p.SourceRVName
}

func (p *EndSyncRequest) GetTargetRVName() string {
	return p.TargetRVName
}

func (p *EndSyncRequest) GetComponentRV() []*RVNameAndState {
	return p.ComponentRV
}

func (p *EndSyncRequest) GetSyncSize() int64 {
	return p.SyncSize
}
func (p *EndSyncRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EndSyncRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *EndSyncRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SyncID = v
	}
	return nil
}

func (p *EndSyncRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MV = v
	}
	return nil
}

func (p *EndSyncRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SourceRVName = v
	}
	return nil
}

func (p *EndSyncRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TargetRVName = v
	}
	return nil
}

func (p *EndSyncRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RVNameAndState, 0, size)
	p.ComponentRV = tSlice
	for i := 0; i < size; i++ {
		_elem28 := &RVNameAndState{}
		if err := _elem28.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
		}
		p.ComponentRV = append(p.ComponentRV, _elem28)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EndSyncRequest) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SyncSize = v
	}
	return nil
}

func (p *EndSyncRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EndSyncRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EndSyncRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *EndSyncRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "syncID", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SyncID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncID: ", p), err)
	}
	return err
}

func (p *EndSyncRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:MV: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MV (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:MV: ", p), err)
	}
	return err
}

func (p *EndSyncRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "sourceRVName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sourceRVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SourceRVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceRVName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sourceRVName: ", p), err)
	}
	return err
}

func (p *EndSyncRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetRVName", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:targetRVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TargetRVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetRVName (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:targetRVName: ", p), err)
	}
	return err
}

func (p *EndSyncRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentRV", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:componentRV: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ComponentRV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ComponentRV {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:componentRV: ", p), err)
	}
	return err
}

func (p *EndSyncRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "syncSize", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:syncSize: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.SyncSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncSize (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:syncSize: ", p), err)
	}
	return err
}

func (p *EndSyncRequest) Equals(other *EndSyncRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if p.SyncID != other.SyncID {
		return false
	}
	if p.MV != other.MV {
		return false
	}
	if p.SourceRVName != other.SourceRVName {
		return false
	}
	if p.TargetRVName != other.TargetRVName {
		return false
	}
	if len(p.ComponentRV) != len(other.ComponentRV) {
		return false
	}
	for i, _tgt := range p.ComponentRV {
		_src29 := other.ComponentRV[i]
		if !_tgt.Equals(_src29) {
			return false
		}
	}
	if p.SyncSize != other.SyncSize {
		return false
	}
	return true
}

func (p *EndSyncRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EndSyncRequest(%+v)", *p)
}

type EndSyncResponse struct {
}

func NewEndSyncResponse() *EndSyncResponse {
	return &EndSyncResponse{}
}

func (p *EndSyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EndSyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EndSyncResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EndSyncResponse) Equals(other *EndSyncResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *EndSyncResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EndSyncResponse(%+v)", *p)
}

// Attributes:
//   - SenderNodeID
//   - MV
//   - RVName
type GetMVSizeRequest struct {
	SenderNodeID string `thrift:"senderNodeID,1" db:"senderNodeID" json:"senderNodeID"`
	MV           string `thrift:"MV,2" db:"MV" json:"MV"`
	RVName       string `thrift:"RVName,3" db:"RVName" json:"RVName"`
}

func NewGetMVSizeRequest() *GetMVSizeRequest {
	return &GetMVSizeRequest{}
}

func (p *GetMVSizeRequest) GetSenderNodeID() string {
	return p.SenderNodeID
}

func (p *GetMVSizeRequest) GetMV() string {
	return p.MV
}

func (p *GetMVSizeRequest) GetRVName() string {
	return p.RVName
}
func (p *GetMVSizeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetMVSizeRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SenderNodeID = v
	}
	return nil
}

func (p *GetMVSizeRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MV = v
	}
	return nil
}

func (p *GetMVSizeRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RVName = v
	}
	return nil
}

func (p *GetMVSizeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetMVSizeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetMVSizeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "senderNodeID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:senderNodeID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SenderNodeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.senderNodeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:senderNodeID: ", p), err)
	}
	return err
}

func (p *GetMVSizeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MV", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MV: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MV (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MV: ", p), err)
	}
	return err
}

func (p *GetMVSizeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RVName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RVName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RVName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RVName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RVName: ", p), err)
	}
	return err
}

func (p *GetMVSizeRequest) Equals(other *GetMVSizeRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SenderNodeID != other.SenderNodeID {
		return false
	}
	if p.MV != other.MV {
		return false
	}
	if p.RVName != other.RVName {
		return false
	}
	return true
}

func (p *GetMVSizeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMVSizeRequest(%+v)", *p)
}

// Attributes:
//   - MvSize
type GetMVSizeResponse struct {
	MvSize int64 `thrift:"mvSize,1" db:"mvSize" json:"mvSize"`
}

func NewGetMVSizeResponse() *GetMVSizeResponse {
	return &GetMVSizeResponse{}
}

func (p *GetMVSizeResponse) GetMvSize() int64 {
	return p.MvSize
}
func (p *GetMVSizeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetMVSizeResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MvSize = v
	}
	return nil
}

func (p *GetMVSizeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetMVSizeResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetMVSizeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "mvSize", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mvSize: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.MvSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mvSize (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mvSize: ", p), err)
	}
	return err
}

func (p *GetMVSizeResponse) Equals(other *GetMVSizeResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MvSize != other.MvSize {
		return false
	}
	return true
}

func (p *GetMVSizeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMVSizeResponse(%+v)", *p)
}

// Attributes:
//   - Code
//   - Message
type ResponseError struct {
	Code    ErrorCode `thrift:"code,1" db:"code" json:"code"`
	Message string    `thrift:"message,2" db:"message" json:"message"`
}

func NewResponseError() *ResponseError {
	return &ResponseError{}
}

func (p *ResponseError) GetCode() ErrorCode {
	return p.Code
}

func (p *ResponseError) GetMessage() string {
	return p.Message
}
func (p *ResponseError) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ResponseError) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.Code = temp
	}
	return nil
}

func (p *ResponseError) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ResponseError) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ResponseError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResponseError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *ResponseError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *ResponseError) Equals(other *ResponseError) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Code != other.Code {
		return false
	}
	if p.Message != other.Message {
		return false
	}
	return true
}

func (p *ResponseError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseError(%+v)", *p)
}

func (p *ResponseError) Error() string {
	return p.String()
}

func (ResponseError) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ResponseError)(nil)
