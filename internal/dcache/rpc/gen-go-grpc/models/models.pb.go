/*
    _____           _____   _____   ____          ______  _____  ------
   |     |  |      |     | |     | |     |     | |       |            |
   |     |  |      |     | |     | |     |     | |       |            |
   | --- |  |      |     | |-----| |---- |     | |-----| |-----  ------
   |     |  |      |     | |     | |     |     |       | |       |
   | ____|  |_____ | ____| | ____| |     |_____|  _____| |_____  |_____


   Licensed under the MIT License <http://opensource.org/licenses/MIT>.

   Copyright Â© 2020-2025 Microsoft Corporation. All rights reserved.
   Author : <blobfusedev@microsoft.com>

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.30.2
// source: models.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Custom error codes returned by the ChunkServiceHandler
type ErrorCode int32

const (
	ErrorCode_InvalidRequest          ErrorCode = 0
	ErrorCode_InvalidRVID             ErrorCode = 1
	ErrorCode_InvalidRV               ErrorCode = 2
	ErrorCode_InternalServerError     ErrorCode = 3
	ErrorCode_ChunkNotFound           ErrorCode = 4
	ErrorCode_ChunkAlreadyExists      ErrorCode = 5
	ErrorCode_MaxMVsExceeded          ErrorCode = 6
	ErrorCode_NeedToRefreshClusterMap ErrorCode = 7
	ErrorCode_ThriftError             ErrorCode = 8
	ErrorCode_BrokenChain             ErrorCode = 9
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "InvalidRequest",
		1: "InvalidRVID",
		2: "InvalidRV",
		3: "InternalServerError",
		4: "ChunkNotFound",
		5: "ChunkAlreadyExists",
		6: "MaxMVsExceeded",
		7: "NeedToRefreshClusterMap",
		8: "ThriftError",
		9: "BrokenChain",
	}
	ErrorCode_value = map[string]int32{
		"InvalidRequest":          0,
		"InvalidRVID":             1,
		"InvalidRV":               2,
		"InternalServerError":     3,
		"ChunkNotFound":           4,
		"ChunkAlreadyExists":      5,
		"MaxMVsExceeded":          6,
		"NeedToRefreshClusterMap": 7,
		"ThriftError":             8,
		"BrokenChain":             9,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{0}
}

type HelloRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	ReceiverNodeID  string                 `protobuf:"bytes,2,opt,name=receiverNodeID,proto3" json:"receiverNodeID,omitempty"`
	Time            int64                  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"` // current time in usec in sender
	RVName          []string               `protobuf:"bytes,4,rep,name=RVName,proto3" json:"RVName,omitempty"`
	MV              []string               `protobuf:"bytes,5,rep,name=MV,proto3" json:"MV,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,6,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *HelloRequest) GetReceiverNodeID() string {
	if x != nil {
		return x.ReceiverNodeID
	}
	return ""
}

func (x *HelloRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HelloRequest) GetRVName() []string {
	if x != nil {
		return x.RVName
	}
	return nil
}

func (x *HelloRequest) GetMV() []string {
	if x != nil {
		return x.MV
	}
	return nil
}

func (x *HelloRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type HelloResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReceiverNodeID  string                 `protobuf:"bytes,1,opt,name=receiverNodeID,proto3" json:"receiverNodeID,omitempty"`
	Time            int64                  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"` // current time in usec in receiver
	RVName          []string               `protobuf:"bytes,3,rep,name=RVName,proto3" json:"RVName,omitempty"`
	MV              []string               `protobuf:"bytes,4,rep,name=MV,proto3" json:"MV,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,5,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	mi := &file_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetReceiverNodeID() string {
	if x != nil {
		return x.ReceiverNodeID
	}
	return ""
}

func (x *HelloResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HelloResponse) GetRVName() []string {
	if x != nil {
		return x.RVName
	}
	return nil
}

func (x *HelloResponse) GetMV() []string {
	if x != nil {
		return x.MV
	}
	return nil
}

func (x *HelloResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type Address struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileID        string                 `protobuf:"bytes,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	RvID          string                 `protobuf:"bytes,2,opt,name=rvID,proto3" json:"rvID,omitempty"`
	MvName        string                 `protobuf:"bytes,3,opt,name=mvName,proto3" json:"mvName,omitempty"`
	OffsetInMiB   int64                  `protobuf:"varint,4,opt,name=offsetInMiB,proto3" json:"offsetInMiB,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{2}
}

func (x *Address) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *Address) GetRvID() string {
	if x != nil {
		return x.RvID
	}
	return ""
}

func (x *Address) GetMvName() string {
	if x != nil {
		return x.MvName
	}
	return ""
}

func (x *Address) GetOffsetInMiB() int64 {
	if x != nil {
		return x.OffsetInMiB
	}
	return 0
}

type Chunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *Address               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Hash          string                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	mi := &file_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{3}
}

func (x *Chunk) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Chunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Chunk) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type RVNameAndState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State         string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RVNameAndState) Reset() {
	*x = RVNameAndState{}
	mi := &file_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RVNameAndState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RVNameAndState) ProtoMessage() {}

func (x *RVNameAndState) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RVNameAndState.ProtoReflect.Descriptor instead.
func (*RVNameAndState) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{4}
}

func (x *RVNameAndState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RVNameAndState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type GetChunkRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	Address         *Address               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	OffsetInChunk   int64                  `protobuf:"varint,3,opt,name=offsetInChunk,proto3" json:"offsetInChunk,omitempty"`
	Length          int64                  `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	IsLocalRV       bool                   `protobuf:"varint,5,opt,name=isLocalRV,proto3" json:"isLocalRV,omitempty"`             // true, if both server and client are on the same node
	ComponentRV     []*RVNameAndState      `protobuf:"bytes,6,rep,name=componentRV,proto3" json:"componentRV,omitempty"`          // used to validate the component RV for the MV
	ClustermapEpoch int64                  `protobuf:"varint,7,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetChunkRequest) Reset() {
	*x = GetChunkRequest{}
	mi := &file_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkRequest) ProtoMessage() {}

func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
func (*GetChunkRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{5}
}

func (x *GetChunkRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *GetChunkRequest) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetChunkRequest) GetOffsetInChunk() int64 {
	if x != nil {
		return x.OffsetInChunk
	}
	return 0
}

func (x *GetChunkRequest) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GetChunkRequest) GetIsLocalRV() bool {
	if x != nil {
		return x.IsLocalRV
	}
	return false
}

func (x *GetChunkRequest) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *GetChunkRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type GetChunkResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Chunk           *Chunk                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	ChunkWriteTime  string                 `protobuf:"bytes,2,opt,name=chunkWriteTime,proto3" json:"chunkWriteTime,omitempty"`
	TimeTaken       int64                  `protobuf:"varint,3,opt,name=timeTaken,proto3" json:"timeTaken,omitempty"`
	ComponentRV     []*RVNameAndState      `protobuf:"bytes,4,rep,name=componentRV,proto3" json:"componentRV,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,5,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetChunkResponse) Reset() {
	*x = GetChunkResponse{}
	mi := &file_models_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkResponse) ProtoMessage() {}

func (x *GetChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkResponse.ProtoReflect.Descriptor instead.
func (*GetChunkResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{6}
}

func (x *GetChunkResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *GetChunkResponse) GetChunkWriteTime() string {
	if x != nil {
		return x.ChunkWriteTime
	}
	return ""
}

func (x *GetChunkResponse) GetTimeTaken() int64 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *GetChunkResponse) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *GetChunkResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type PutChunkRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	Chunk           *Chunk                 `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Length          int64                  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	SyncID          string                 `protobuf:"bytes,4,opt,name=syncID,proto3" json:"syncID,omitempty"`             // only valid for PutChunk(sync) calls, syncID of the ongoing sync operation
	SourceRVName    string                 `protobuf:"bytes,5,opt,name=sourceRVName,proto3" json:"sourceRVName,omitempty"` // only valid for PutChunk(sync) calls, source RV from which data is being synced
	ComponentRV     []*RVNameAndState      `protobuf:"bytes,6,rep,name=componentRV,proto3" json:"componentRV,omitempty"`   // used to validate the component RV for the MV
	MaybeOverwrite  bool                   `protobuf:"varint,7,opt,name=maybeOverwrite,proto3" json:"maybeOverwrite,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,8,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PutChunkRequest) Reset() {
	*x = PutChunkRequest{}
	mi := &file_models_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChunkRequest) ProtoMessage() {}

func (x *PutChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChunkRequest.ProtoReflect.Descriptor instead.
func (*PutChunkRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{7}
}

func (x *PutChunkRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *PutChunkRequest) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *PutChunkRequest) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *PutChunkRequest) GetSyncID() string {
	if x != nil {
		return x.SyncID
	}
	return ""
}

func (x *PutChunkRequest) GetSourceRVName() string {
	if x != nil {
		return x.SourceRVName
	}
	return ""
}

func (x *PutChunkRequest) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *PutChunkRequest) GetMaybeOverwrite() bool {
	if x != nil {
		return x.MaybeOverwrite
	}
	return false
}

func (x *PutChunkRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type PutChunkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status will be returned in the error
	TimeTaken       int64             `protobuf:"varint,1,opt,name=timeTaken,proto3" json:"timeTaken,omitempty"`
	AvailableSpace  int64             `protobuf:"varint,2,opt,name=availableSpace,proto3" json:"availableSpace,omitempty"`
	ComponentRV     []*RVNameAndState `protobuf:"bytes,3,rep,name=componentRV,proto3" json:"componentRV,omitempty"`
	ClustermapEpoch int64             `protobuf:"varint,4,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PutChunkResponse) Reset() {
	*x = PutChunkResponse{}
	mi := &file_models_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChunkResponse) ProtoMessage() {}

func (x *PutChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChunkResponse.ProtoReflect.Descriptor instead.
func (*PutChunkResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{8}
}

func (x *PutChunkResponse) GetTimeTaken() int64 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *PutChunkResponse) GetAvailableSpace() int64 {
	if x != nil {
		return x.AvailableSpace
	}
	return 0
}

func (x *PutChunkResponse) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *PutChunkResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type PutChunkDCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       *PutChunkRequest       `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	NextRVs       []string               `protobuf:"bytes,2,rep,name=nextRVs,proto3" json:"nextRVs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutChunkDCRequest) Reset() {
	*x = PutChunkDCRequest{}
	mi := &file_models_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutChunkDCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChunkDCRequest) ProtoMessage() {}

func (x *PutChunkDCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChunkDCRequest.ProtoReflect.Descriptor instead.
func (*PutChunkDCRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{9}
}

func (x *PutChunkDCRequest) GetRequest() *PutChunkRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PutChunkDCRequest) GetNextRVs() []string {
	if x != nil {
		return x.NextRVs
	}
	return nil
}

// Type for the individual PutChunkResponse or error.
type PutChunkResponseOrError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *PutChunkResponse      `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error         *ResponseError         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutChunkResponseOrError) Reset() {
	*x = PutChunkResponseOrError{}
	mi := &file_models_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutChunkResponseOrError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChunkResponseOrError) ProtoMessage() {}

func (x *PutChunkResponseOrError) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChunkResponseOrError.ProtoReflect.Descriptor instead.
func (*PutChunkResponseOrError) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{10}
}

func (x *PutChunkResponseOrError) GetResponse() *PutChunkResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *PutChunkResponseOrError) GetError() *ResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

type PutChunkDCResponse struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	Responses       map[string]*PutChunkResponseOrError `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // map of RV name to the PutChunk response or error to that RV
	ClustermapEpoch int64                               `protobuf:"varint,2,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"`                                                              // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PutChunkDCResponse) Reset() {
	*x = PutChunkDCResponse{}
	mi := &file_models_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutChunkDCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutChunkDCResponse) ProtoMessage() {}

func (x *PutChunkDCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutChunkDCResponse.ProtoReflect.Descriptor instead.
func (*PutChunkDCResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{11}
}

func (x *PutChunkDCResponse) GetResponses() map[string]*PutChunkResponseOrError {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *PutChunkDCResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

// Remove chunks belonging to a file.
type RemoveChunkRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	Address         *Address               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ComponentRV     []*RVNameAndState      `protobuf:"bytes,3,rep,name=componentRV,proto3" json:"componentRV,omitempty"`          // used to validate the component RV for the MV
	ClustermapEpoch int64                  `protobuf:"varint,4,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RemoveChunkRequest) Reset() {
	*x = RemoveChunkRequest{}
	mi := &file_models_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChunkRequest) ProtoMessage() {}

func (x *RemoveChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChunkRequest.ProtoReflect.Descriptor instead.
func (*RemoveChunkRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveChunkRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *RemoveChunkRequest) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RemoveChunkRequest) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *RemoveChunkRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type RemoveChunkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status will be returned in the error
	TimeTaken      int64             `protobuf:"varint,1,opt,name=timeTaken,proto3" json:"timeTaken,omitempty"`
	AvailableSpace int64             `protobuf:"varint,2,opt,name=availableSpace,proto3" json:"availableSpace,omitempty"`
	ComponentRV    []*RVNameAndState `protobuf:"bytes,3,rep,name=componentRV,proto3" json:"componentRV,omitempty"`
	// Total number of chunks deleted by this request.
	// When a RemoveChunkResponse carries a status of success and numChunksDeleted==0, it would indicate
	// to the caller that all chunks of the file are deleted from the specified rv/mv directory.
	NumChunksDeleted int64 `protobuf:"varint,4,opt,name=numChunksDeleted,proto3" json:"numChunksDeleted,omitempty"`
	ClustermapEpoch  int64 `protobuf:"varint,5,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RemoveChunkResponse) Reset() {
	*x = RemoveChunkResponse{}
	mi := &file_models_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChunkResponse) ProtoMessage() {}

func (x *RemoveChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChunkResponse.ProtoReflect.Descriptor instead.
func (*RemoveChunkResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveChunkResponse) GetTimeTaken() int64 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *RemoveChunkResponse) GetAvailableSpace() int64 {
	if x != nil {
		return x.AvailableSpace
	}
	return 0
}

func (x *RemoveChunkResponse) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *RemoveChunkResponse) GetNumChunksDeleted() int64 {
	if x != nil {
		return x.NumChunksDeleted
	}
	return 0
}

func (x *RemoveChunkResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type JoinMVRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	MV              string                 `protobuf:"bytes,2,opt,name=MV,proto3" json:"MV,omitempty"`
	RVName          string                 `protobuf:"bytes,3,opt,name=RVName,proto3" json:"RVName,omitempty"`
	ReserveSpace    int64                  `protobuf:"varint,4,opt,name=reserveSpace,proto3" json:"reserveSpace,omitempty"`
	ComponentRV     []*RVNameAndState      `protobuf:"bytes,5,rep,name=componentRV,proto3" json:"componentRV,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,6,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JoinMVRequest) Reset() {
	*x = JoinMVRequest{}
	mi := &file_models_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinMVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMVRequest) ProtoMessage() {}

func (x *JoinMVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMVRequest.ProtoReflect.Descriptor instead.
func (*JoinMVRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{14}
}

func (x *JoinMVRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *JoinMVRequest) GetMV() string {
	if x != nil {
		return x.MV
	}
	return ""
}

func (x *JoinMVRequest) GetRVName() string {
	if x != nil {
		return x.RVName
	}
	return ""
}

func (x *JoinMVRequest) GetReserveSpace() int64 {
	if x != nil {
		return x.ReserveSpace
	}
	return 0
}

func (x *JoinMVRequest) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *JoinMVRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type JoinMVResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status will be returned in the error
	ClustermapEpoch int64 `protobuf:"varint,1,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JoinMVResponse) Reset() {
	*x = JoinMVResponse{}
	mi := &file_models_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinMVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMVResponse) ProtoMessage() {}

func (x *JoinMVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMVResponse.ProtoReflect.Descriptor instead.
func (*JoinMVResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{15}
}

func (x *JoinMVResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type UpdateMVRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	MV              string                 `protobuf:"bytes,2,opt,name=MV,proto3" json:"MV,omitempty"`
	RVName          string                 `protobuf:"bytes,3,opt,name=RVName,proto3" json:"RVName,omitempty"`
	ComponentRV     []*RVNameAndState      `protobuf:"bytes,4,rep,name=componentRV,proto3" json:"componentRV,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,5,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateMVRequest) Reset() {
	*x = UpdateMVRequest{}
	mi := &file_models_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMVRequest) ProtoMessage() {}

func (x *UpdateMVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMVRequest.ProtoReflect.Descriptor instead.
func (*UpdateMVRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateMVRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *UpdateMVRequest) GetMV() string {
	if x != nil {
		return x.MV
	}
	return ""
}

func (x *UpdateMVRequest) GetRVName() string {
	if x != nil {
		return x.RVName
	}
	return ""
}

func (x *UpdateMVRequest) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *UpdateMVRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type UpdateMVResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status will be returned in the error
	ClustermapEpoch int64 `protobuf:"varint,1,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateMVResponse) Reset() {
	*x = UpdateMVResponse{}
	mi := &file_models_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMVResponse) ProtoMessage() {}

func (x *UpdateMVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMVResponse.ProtoReflect.Descriptor instead.
func (*UpdateMVResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateMVResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type LeaveMVRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	MV              string                 `protobuf:"bytes,2,opt,name=MV,proto3" json:"MV,omitempty"`
	RVName          string                 `protobuf:"bytes,3,opt,name=RVName,proto3" json:"RVName,omitempty"`
	ComponentRV     []*RVNameAndState      `protobuf:"bytes,4,rep,name=componentRV,proto3" json:"componentRV,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,5,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LeaveMVRequest) Reset() {
	*x = LeaveMVRequest{}
	mi := &file_models_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveMVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMVRequest) ProtoMessage() {}

func (x *LeaveMVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMVRequest.ProtoReflect.Descriptor instead.
func (*LeaveMVRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{18}
}

func (x *LeaveMVRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *LeaveMVRequest) GetMV() string {
	if x != nil {
		return x.MV
	}
	return ""
}

func (x *LeaveMVRequest) GetRVName() string {
	if x != nil {
		return x.RVName
	}
	return ""
}

func (x *LeaveMVRequest) GetComponentRV() []*RVNameAndState {
	if x != nil {
		return x.ComponentRV
	}
	return nil
}

func (x *LeaveMVRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type LeaveMVResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// status will be returned in the error
	ClustermapEpoch int64 `protobuf:"varint,1,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LeaveMVResponse) Reset() {
	*x = LeaveMVResponse{}
	mi := &file_models_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveMVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMVResponse) ProtoMessage() {}

func (x *LeaveMVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMVResponse.ProtoReflect.Descriptor instead.
func (*LeaveMVResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{19}
}

func (x *LeaveMVResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type GetMVSizeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderNodeID    string                 `protobuf:"bytes,1,opt,name=senderNodeID,proto3" json:"senderNodeID,omitempty"`
	MV              string                 `protobuf:"bytes,2,opt,name=MV,proto3" json:"MV,omitempty"`
	RVName          string                 `protobuf:"bytes,3,opt,name=RVName,proto3" json:"RVName,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,4,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Sender's clustermap epoch when the request is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMVSizeRequest) Reset() {
	*x = GetMVSizeRequest{}
	mi := &file_models_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMVSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMVSizeRequest) ProtoMessage() {}

func (x *GetMVSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMVSizeRequest.ProtoReflect.Descriptor instead.
func (*GetMVSizeRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{20}
}

func (x *GetMVSizeRequest) GetSenderNodeID() string {
	if x != nil {
		return x.SenderNodeID
	}
	return ""
}

func (x *GetMVSizeRequest) GetMV() string {
	if x != nil {
		return x.MV
	}
	return ""
}

func (x *GetMVSizeRequest) GetRVName() string {
	if x != nil {
		return x.RVName
	}
	return ""
}

func (x *GetMVSizeRequest) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

type GetMVSizeResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MvSize          int64                  `protobuf:"varint,1,opt,name=mvSize,proto3" json:"mvSize,omitempty"`
	ClustermapEpoch int64                  `protobuf:"varint,2,opt,name=clustermapEpoch,proto3" json:"clustermapEpoch,omitempty"` // Receiver's clustermap epoch when the response is sent
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMVSizeResponse) Reset() {
	*x = GetMVSizeResponse{}
	mi := &file_models_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMVSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMVSizeResponse) ProtoMessage() {}

func (x *GetMVSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMVSizeResponse.ProtoReflect.Descriptor instead.
func (*GetMVSizeResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{21}
}

func (x *GetMVSizeResponse) GetMvSize() int64 {
	if x != nil {
		return x.MvSize
	}
	return 0
}

func (x *GetMVSizeResponse) GetClustermapEpoch() int64 {
	if x != nil {
		return x.ClustermapEpoch
	}
	return 0
}

// Custom error returned by the RPC APIs
type ResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=dcache.models.ErrorCode" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseError) Reset() {
	*x = ResponseError{}
	mi := &file_models_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseError) ProtoMessage() {}

func (x *ResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseError.ProtoReflect.Descriptor instead.
func (*ResponseError) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{22}
}

func (x *ResponseError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_InvalidRequest
}

func (x *ResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_models_proto protoreflect.FileDescriptor

const file_models_proto_rawDesc = "" +
	"\n" +
	"\fmodels.proto\x12\rdcache.models\"\xc0\x01\n" +
	"\fHelloRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x12&\n" +
	"\x0ereceiverNodeID\x18\x02 \x01(\tR\x0ereceiverNodeID\x12\x12\n" +
	"\x04time\x18\x03 \x01(\x03R\x04time\x12\x16\n" +
	"\x06RVName\x18\x04 \x03(\tR\x06RVName\x12\x0e\n" +
	"\x02MV\x18\x05 \x03(\tR\x02MV\x12(\n" +
	"\x0fclustermapEpoch\x18\x06 \x01(\x03R\x0fclustermapEpoch\"\x9d\x01\n" +
	"\rHelloResponse\x12&\n" +
	"\x0ereceiverNodeID\x18\x01 \x01(\tR\x0ereceiverNodeID\x12\x12\n" +
	"\x04time\x18\x02 \x01(\x03R\x04time\x12\x16\n" +
	"\x06RVName\x18\x03 \x03(\tR\x06RVName\x12\x0e\n" +
	"\x02MV\x18\x04 \x03(\tR\x02MV\x12(\n" +
	"\x0fclustermapEpoch\x18\x05 \x01(\x03R\x0fclustermapEpoch\"o\n" +
	"\aAddress\x12\x16\n" +
	"\x06fileID\x18\x01 \x01(\tR\x06fileID\x12\x12\n" +
	"\x04rvID\x18\x02 \x01(\tR\x04rvID\x12\x16\n" +
	"\x06mvName\x18\x03 \x01(\tR\x06mvName\x12 \n" +
	"\voffsetInMiB\x18\x04 \x01(\x03R\voffsetInMiB\"a\n" +
	"\x05Chunk\x120\n" +
	"\aaddress\x18\x01 \x01(\v2\x16.dcache.models.AddressR\aaddress\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x12\n" +
	"\x04hash\x18\x03 \x01(\tR\x04hash\":\n" +
	"\x0eRVNameAndState\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05state\x18\x02 \x01(\tR\x05state\"\xae\x02\n" +
	"\x0fGetChunkRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x120\n" +
	"\aaddress\x18\x02 \x01(\v2\x16.dcache.models.AddressR\aaddress\x12$\n" +
	"\roffsetInChunk\x18\x03 \x01(\x03R\roffsetInChunk\x12\x16\n" +
	"\x06length\x18\x04 \x01(\x03R\x06length\x12\x1c\n" +
	"\tisLocalRV\x18\x05 \x01(\bR\tisLocalRV\x12?\n" +
	"\vcomponentRV\x18\x06 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12(\n" +
	"\x0fclustermapEpoch\x18\a \x01(\x03R\x0fclustermapEpoch\"\xef\x01\n" +
	"\x10GetChunkResponse\x12*\n" +
	"\x05chunk\x18\x01 \x01(\v2\x14.dcache.models.ChunkR\x05chunk\x12&\n" +
	"\x0echunkWriteTime\x18\x02 \x01(\tR\x0echunkWriteTime\x12\x1c\n" +
	"\ttimeTaken\x18\x03 \x01(\x03R\ttimeTaken\x12?\n" +
	"\vcomponentRV\x18\x04 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12(\n" +
	"\x0fclustermapEpoch\x18\x05 \x01(\x03R\x0fclustermapEpoch\"\xc8\x02\n" +
	"\x0fPutChunkRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x12*\n" +
	"\x05chunk\x18\x02 \x01(\v2\x14.dcache.models.ChunkR\x05chunk\x12\x16\n" +
	"\x06length\x18\x03 \x01(\x03R\x06length\x12\x16\n" +
	"\x06syncID\x18\x04 \x01(\tR\x06syncID\x12\"\n" +
	"\fsourceRVName\x18\x05 \x01(\tR\fsourceRVName\x12?\n" +
	"\vcomponentRV\x18\x06 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12&\n" +
	"\x0emaybeOverwrite\x18\a \x01(\bR\x0emaybeOverwrite\x12(\n" +
	"\x0fclustermapEpoch\x18\b \x01(\x03R\x0fclustermapEpoch\"\xc3\x01\n" +
	"\x10PutChunkResponse\x12\x1c\n" +
	"\ttimeTaken\x18\x01 \x01(\x03R\ttimeTaken\x12&\n" +
	"\x0eavailableSpace\x18\x02 \x01(\x03R\x0eavailableSpace\x12?\n" +
	"\vcomponentRV\x18\x03 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12(\n" +
	"\x0fclustermapEpoch\x18\x04 \x01(\x03R\x0fclustermapEpoch\"g\n" +
	"\x11PutChunkDCRequest\x128\n" +
	"\arequest\x18\x01 \x01(\v2\x1e.dcache.models.PutChunkRequestR\arequest\x12\x18\n" +
	"\anextRVs\x18\x02 \x03(\tR\anextRVs\"\x8a\x01\n" +
	"\x17PutChunkResponseOrError\x12;\n" +
	"\bresponse\x18\x01 \x01(\v2\x1f.dcache.models.PutChunkResponseR\bresponse\x122\n" +
	"\x05error\x18\x02 \x01(\v2\x1c.dcache.models.ResponseErrorR\x05error\"\xf4\x01\n" +
	"\x12PutChunkDCResponse\x12N\n" +
	"\tresponses\x18\x01 \x03(\v20.dcache.models.PutChunkDCResponse.ResponsesEntryR\tresponses\x12(\n" +
	"\x0fclustermapEpoch\x18\x02 \x01(\x03R\x0fclustermapEpoch\x1ad\n" +
	"\x0eResponsesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12<\n" +
	"\x05value\x18\x02 \x01(\v2&.dcache.models.PutChunkResponseOrErrorR\x05value:\x028\x01\"\xd5\x01\n" +
	"\x12RemoveChunkRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x120\n" +
	"\aaddress\x18\x02 \x01(\v2\x16.dcache.models.AddressR\aaddress\x12?\n" +
	"\vcomponentRV\x18\x03 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12(\n" +
	"\x0fclustermapEpoch\x18\x04 \x01(\x03R\x0fclustermapEpoch\"\xf2\x01\n" +
	"\x13RemoveChunkResponse\x12\x1c\n" +
	"\ttimeTaken\x18\x01 \x01(\x03R\ttimeTaken\x12&\n" +
	"\x0eavailableSpace\x18\x02 \x01(\x03R\x0eavailableSpace\x12?\n" +
	"\vcomponentRV\x18\x03 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12*\n" +
	"\x10numChunksDeleted\x18\x04 \x01(\x03R\x10numChunksDeleted\x12(\n" +
	"\x0fclustermapEpoch\x18\x05 \x01(\x03R\x0fclustermapEpoch\"\xea\x01\n" +
	"\rJoinMVRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x12\x0e\n" +
	"\x02MV\x18\x02 \x01(\tR\x02MV\x12\x16\n" +
	"\x06RVName\x18\x03 \x01(\tR\x06RVName\x12\"\n" +
	"\freserveSpace\x18\x04 \x01(\x03R\freserveSpace\x12?\n" +
	"\vcomponentRV\x18\x05 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12(\n" +
	"\x0fclustermapEpoch\x18\x06 \x01(\x03R\x0fclustermapEpoch\":\n" +
	"\x0eJoinMVResponse\x12(\n" +
	"\x0fclustermapEpoch\x18\x01 \x01(\x03R\x0fclustermapEpoch\"\xc8\x01\n" +
	"\x0fUpdateMVRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x12\x0e\n" +
	"\x02MV\x18\x02 \x01(\tR\x02MV\x12\x16\n" +
	"\x06RVName\x18\x03 \x01(\tR\x06RVName\x12?\n" +
	"\vcomponentRV\x18\x04 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12(\n" +
	"\x0fclustermapEpoch\x18\x05 \x01(\x03R\x0fclustermapEpoch\"<\n" +
	"\x10UpdateMVResponse\x12(\n" +
	"\x0fclustermapEpoch\x18\x01 \x01(\x03R\x0fclustermapEpoch\"\xc7\x01\n" +
	"\x0eLeaveMVRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x12\x0e\n" +
	"\x02MV\x18\x02 \x01(\tR\x02MV\x12\x16\n" +
	"\x06RVName\x18\x03 \x01(\tR\x06RVName\x12?\n" +
	"\vcomponentRV\x18\x04 \x03(\v2\x1d.dcache.models.RVNameAndStateR\vcomponentRV\x12(\n" +
	"\x0fclustermapEpoch\x18\x05 \x01(\x03R\x0fclustermapEpoch\";\n" +
	"\x0fLeaveMVResponse\x12(\n" +
	"\x0fclustermapEpoch\x18\x01 \x01(\x03R\x0fclustermapEpoch\"\x88\x01\n" +
	"\x10GetMVSizeRequest\x12\"\n" +
	"\fsenderNodeID\x18\x01 \x01(\tR\fsenderNodeID\x12\x0e\n" +
	"\x02MV\x18\x02 \x01(\tR\x02MV\x12\x16\n" +
	"\x06RVName\x18\x03 \x01(\tR\x06RVName\x12(\n" +
	"\x0fclustermapEpoch\x18\x04 \x01(\x03R\x0fclustermapEpoch\"U\n" +
	"\x11GetMVSizeResponse\x12\x16\n" +
	"\x06mvSize\x18\x01 \x01(\x03R\x06mvSize\x12(\n" +
	"\x0fclustermapEpoch\x18\x02 \x01(\x03R\x0fclustermapEpoch\"W\n" +
	"\rResponseError\x12,\n" +
	"\x04code\x18\x01 \x01(\x0e2\x18.dcache.models.ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage*\xd6\x01\n" +
	"\tErrorCode\x12\x12\n" +
	"\x0eInvalidRequest\x10\x00\x12\x0f\n" +
	"\vInvalidRVID\x10\x01\x12\r\n" +
	"\tInvalidRV\x10\x02\x12\x17\n" +
	"\x13InternalServerError\x10\x03\x12\x11\n" +
	"\rChunkNotFound\x10\x04\x12\x16\n" +
	"\x12ChunkAlreadyExists\x10\x05\x12\x12\n" +
	"\x0eMaxMVsExceeded\x10\x06\x12\x1b\n" +
	"\x17NeedToRefreshClusterMap\x10\a\x12\x0f\n" +
	"\vThriftError\x10\b\x12\x0f\n" +
	"\vBrokenChain\x10\tBOZMgithub.com/Azure/azure-storage-fuse/v2/internal/dcache/rpc/gen-go-grpc/modelsb\x06proto3"

var (
	file_models_proto_rawDescOnce sync.Once
	file_models_proto_rawDescData []byte
)

func file_models_proto_rawDescGZIP() []byte {
	file_models_proto_rawDescOnce.Do(func() {
		file_models_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_models_proto_rawDesc), len(file_models_proto_rawDesc)))
	})
	return file_models_proto_rawDescData
}

var file_models_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_models_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_models_proto_goTypes = []any{
	(ErrorCode)(0),                  // 0: dcache.models.ErrorCode
	(*HelloRequest)(nil),            // 1: dcache.models.HelloRequest
	(*HelloResponse)(nil),           // 2: dcache.models.HelloResponse
	(*Address)(nil),                 // 3: dcache.models.Address
	(*Chunk)(nil),                   // 4: dcache.models.Chunk
	(*RVNameAndState)(nil),          // 5: dcache.models.RVNameAndState
	(*GetChunkRequest)(nil),         // 6: dcache.models.GetChunkRequest
	(*GetChunkResponse)(nil),        // 7: dcache.models.GetChunkResponse
	(*PutChunkRequest)(nil),         // 8: dcache.models.PutChunkRequest
	(*PutChunkResponse)(nil),        // 9: dcache.models.PutChunkResponse
	(*PutChunkDCRequest)(nil),       // 10: dcache.models.PutChunkDCRequest
	(*PutChunkResponseOrError)(nil), // 11: dcache.models.PutChunkResponseOrError
	(*PutChunkDCResponse)(nil),      // 12: dcache.models.PutChunkDCResponse
	(*RemoveChunkRequest)(nil),      // 13: dcache.models.RemoveChunkRequest
	(*RemoveChunkResponse)(nil),     // 14: dcache.models.RemoveChunkResponse
	(*JoinMVRequest)(nil),           // 15: dcache.models.JoinMVRequest
	(*JoinMVResponse)(nil),          // 16: dcache.models.JoinMVResponse
	(*UpdateMVRequest)(nil),         // 17: dcache.models.UpdateMVRequest
	(*UpdateMVResponse)(nil),        // 18: dcache.models.UpdateMVResponse
	(*LeaveMVRequest)(nil),          // 19: dcache.models.LeaveMVRequest
	(*LeaveMVResponse)(nil),         // 20: dcache.models.LeaveMVResponse
	(*GetMVSizeRequest)(nil),        // 21: dcache.models.GetMVSizeRequest
	(*GetMVSizeResponse)(nil),       // 22: dcache.models.GetMVSizeResponse
	(*ResponseError)(nil),           // 23: dcache.models.ResponseError
	nil,                             // 24: dcache.models.PutChunkDCResponse.ResponsesEntry
}
var file_models_proto_depIdxs = []int32{
	3,  // 0: dcache.models.Chunk.address:type_name -> dcache.models.Address
	3,  // 1: dcache.models.GetChunkRequest.address:type_name -> dcache.models.Address
	5,  // 2: dcache.models.GetChunkRequest.componentRV:type_name -> dcache.models.RVNameAndState
	4,  // 3: dcache.models.GetChunkResponse.chunk:type_name -> dcache.models.Chunk
	5,  // 4: dcache.models.GetChunkResponse.componentRV:type_name -> dcache.models.RVNameAndState
	4,  // 5: dcache.models.PutChunkRequest.chunk:type_name -> dcache.models.Chunk
	5,  // 6: dcache.models.PutChunkRequest.componentRV:type_name -> dcache.models.RVNameAndState
	5,  // 7: dcache.models.PutChunkResponse.componentRV:type_name -> dcache.models.RVNameAndState
	8,  // 8: dcache.models.PutChunkDCRequest.request:type_name -> dcache.models.PutChunkRequest
	9,  // 9: dcache.models.PutChunkResponseOrError.response:type_name -> dcache.models.PutChunkResponse
	23, // 10: dcache.models.PutChunkResponseOrError.error:type_name -> dcache.models.ResponseError
	24, // 11: dcache.models.PutChunkDCResponse.responses:type_name -> dcache.models.PutChunkDCResponse.ResponsesEntry
	3,  // 12: dcache.models.RemoveChunkRequest.address:type_name -> dcache.models.Address
	5,  // 13: dcache.models.RemoveChunkRequest.componentRV:type_name -> dcache.models.RVNameAndState
	5,  // 14: dcache.models.RemoveChunkResponse.componentRV:type_name -> dcache.models.RVNameAndState
	5,  // 15: dcache.models.JoinMVRequest.componentRV:type_name -> dcache.models.RVNameAndState
	5,  // 16: dcache.models.UpdateMVRequest.componentRV:type_name -> dcache.models.RVNameAndState
	5,  // 17: dcache.models.LeaveMVRequest.componentRV:type_name -> dcache.models.RVNameAndState
	0,  // 18: dcache.models.ResponseError.code:type_name -> dcache.models.ErrorCode
	11, // 19: dcache.models.PutChunkDCResponse.ResponsesEntry.value:type_name -> dcache.models.PutChunkResponseOrError
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_models_proto_init() }
func file_models_proto_init() {
	if File_models_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_models_proto_rawDesc), len(file_models_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_proto_goTypes,
		DependencyIndexes: file_models_proto_depIdxs,
		EnumInfos:         file_models_proto_enumTypes,
		MessageInfos:      file_models_proto_msgTypes,
	}.Build()
	File_models_proto = out.File
	file_models_proto_goTypes = nil
	file_models_proto_depIdxs = nil
}
