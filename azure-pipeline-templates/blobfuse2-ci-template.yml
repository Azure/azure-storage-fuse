parameters:
  - name: fuselib
    type: string
  - name: tags
    type: string
  - name: container
    type: string
  - name: skip_msi
    type: string
    default: "true"
  - name: proxy_address
    type: string
    default: ""    
  - name: skip_fmt
    type: boolean
    default: true

steps:
  - checkout: self

  # Custom script to install Go-lang
  - task: ShellScript@2
    inputs:
      scriptPath: "./go_installer.sh"
      args: "./"
    displayName: "GoTool Custom Setup"
    
  - task: Go@0
    inputs:
      command: 'get'
      arguments: '-d ./...'
      workingDirectory: './'
    displayName: "Get Dependencies"

  # Install fuse and build the code
  - script: |
      sudo apt-get update --fix-missing
      sudo apt-get install ${{ parameters.fuselib }} gcc -y
    displayName: 'Install libfuse'

  # Install azcli
  - script: |
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      az --version
    displayName: 'Install Azure CLI'

  # azcli login
  - script: |
      az login --service-principal -u $(AZTEST_CLIENT) -p $(AZTEST_SECRET) --tenant $(AZTEST_TENANT)
    displayName: 'Azure CLI login'

  - task: Go@0
    inputs:
      command: 'build'
      workingDirectory: ./
      arguments: "-tags ${{ parameters.tags }} -o blobfuse2"
    displayName: "Build"

  - script: |
      cnfFile=$HOME/azuretest.json
      echo $cnfFile
      touch $cnfFile
      echo "{" > $cnfFile
      echo "\"block-acct\"": "\"$(AZTEST_BLOCK_ACC_NAME)\"", >> $cnfFile
      echo "\"adls-acct\"": "\"$(AZTEST_ADLS_ACC_NAME)\"", >> $cnfFile
      echo "\"block-cont\"": "\"${{ parameters.container }}\"", >> $cnfFile
      echo "\"adls-cont\"": "\"${{ parameters.container }}\"", >> $cnfFile
      echo "\"block-key\"": "\"$(AZTEST_BLOCK_KEY)\"", >> $cnfFile
      echo "\"adls-key\"": "\"$(AZTEST_ADLS_KEY)\"", >> $cnfFile
      echo "\"block-sas\"": "\"$(AZTEST_BLOCK_SAS)\"", >> $cnfFile
      echo "\"block-cont-sas-ubn-18\"": "\"$(AZTEST_BLOCK_CONT_SAS_UBN_18)\"", >> $cnfFile
      echo "\"block-cont-sas-ubn-20\"": "\"$(AZTEST_BLOCK_CONT_SAS_UBN_20)\"", >> $cnfFile
      echo "\"adls-sas\"": "\"$(adlsSas)\"", >> $cnfFile
      echo "\"msi-appid\"": "\"$(AZTEST_APP_ID)\"", >> $cnfFile
      echo "\"msi-resid\"": "\"$(AZTEST_RES_ID)\"", >> $cnfFile
      echo "\"msi-objid\"": "\"$(AZTEST_OBJ_ID)\"", >> $cnfFile
      echo "\"spn-client\"": "\"$(AZTEST_CLIENT)\"", >> $cnfFile
      echo "\"spn-tenant\"": "\"$(AZTEST_TENANT)\"", >> $cnfFile
      echo "\"spn-secret\"": "\"$(AZTEST_SECRET)\"", >> $cnfFile
      echo "\"skip-msi\"": "${{ parameters.skip_msi }}", >> $cnfFile
      echo "\"skip-azcli\"": "false", >> $cnfFile
      echo "\"proxy-address\"": "\"${{ parameters.proxy_address }}\"" >> $cnfFile
      echo "}" >> $cnfFile
      cat $cnfFile
    displayName: "Create Configuration File"
    continueOnError: false
    workingDirectory: ./

  # Code lint checks (Static-analysis)
  - script: |
      curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
      $(go env GOPATH)/bin/golangci-lint --version
      $(go env GOPATH)/bin/golangci-lint run --tests=false --build-tags ${{ parameters.tags }} --exclude-dirs test,common/stats_collector,common/stats_monitor --max-issues-per-linter=0 --exclude-files component/libfuse/libfuse2_handler_test_wrapper.go,component/libfuse/libfuse_handler_test_wrapper.go > lint.log
      result=$(cat lint.log | wc -l)
      if [ $result -ne 0 ]; then
        echo "-----------------------------------"
        echo "Below issues are found in SA"
        cat lint.log
        echo "-----------------------------------"
        exit 1
      else
        echo "-----------------------------------"
        echo "No issues are found in SA"
        echo "-----------------------------------"
      fi 
    displayName: 'Static Analysis (Lint)'
    condition: always()
    workingDirectory: ./

  # Copyright checks
  - script: |
      result=$(grep -L -r --include \*.go "`date +%Y` Microsoft Corporation" ./ | wc -l)
      if [ $result -ne 0 ]; then
        exit 1
      else  
        echo "Copyright statements are up to date"
      fi 
    displayName: 'Copyright check'
    condition: always()
    failOnStderr: true
    workingDirectory: ./

  # Go code formatting checks
  - script: |
      gofmt -s -l -d . | tee >&2
    displayName: 'Go Format Check'
    condition: eq(${{ parameters.skip_fmt }}, true)
    failOnStderr: true
    workingDirectory: ./

  # Notices files check
  - script: |
      ./notices_fix.sh
      result=$(git diff NOTICE | wc -l)
      if [ $result -ne 0 ]; then
        echo "Notices needs a fix. Run ./notices_fix.sh and commit NOTICE file."
        exit 1
      else
        echo "Notices are up to date."
      fi 
    displayName: 'Notice file check'
    condition: always()
    failOnStderr: true
    workingDirectory: ./

  # Running unit tests for fuse3 on ubn-20
  - task: Go@0
    inputs:
      command: 'test'
      arguments: '-v -timeout=2h ./... --tags=unittest,${{ parameters.tags }} -coverprofile utcover.cov'
      workingDirectory: ./
    displayName: 'Unit tests'
    continueOnError: false

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
    displayName: "Component governance"
    condition: always()