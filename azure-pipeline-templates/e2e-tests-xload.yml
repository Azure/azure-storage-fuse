parameters:
  - name: conf_template
    type: string
  - name: config_file
    type: string
  - name: idstring
    type: string
  - name: adls
    type: boolean
  - name: account_name
    type: string
  - name: account_key
    type: string
  - name: account_type
    type: string
  - name: quick_test
    type: boolean
    default: true
  - name: mnt_flags
    type: string
    default: ""
  - name: verbose_log
    type: boolean
    default: false

steps:
  - script: |
      sudo apt-get update
      sudo apt-get install jq python3-setuptools python3-pip -y
      sudo pip3 install pandas numpy pyarrow fastparquet
    displayName: 'Install dependencies'

  - script: |
      $(WORK_DIR)/blobfuse2 gen-test-config --config-file=$(WORK_DIR)/testdata/config/azure_key.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=${{ parameters.config_file }}
    displayName: 'Create Config File for RW mount'
    env:
      STO_ACC_NAME: ${{ parameters.account_name }}
      STO_ACC_KEY: ${{ parameters.account_key }}
      STO_ACC_TYPE: ${{ parameters.account_type }}
      VERBOSE_LOG: ${{ parameters.verbose_log }}
    continueOnError: false

  - script:
      cat ${{ parameters.config_file }}
    displayName: 'Print config file'

  # run below step only if direct_io is false
  - template: 'mount.yml'
    parameters:
      prefix: ${{ parameters.idstring }}
      mountStep:
        script: |
          $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=${{ parameters.config_file }} --default-working-dir=$(WORK_DIR) --file-cache-timeout=3200  ${{ parameters.mnt_flags }}

  - script: |
      for i in {1,2,3,4,5,6,7,8,9,10,20,30,50,100,200,1024,2048,4096}; do echo $i; done | parallel --will-cite -j 5 'head -c {}M < /dev/urandom > $(MOUNT_DIR)/myfile_{}'
      for i in $(seq 1 10); do echo $(shuf -i 0-4294967296 -n 1); done | parallel --will-cite -j 5 'head -c {} < /dev/urandom > $(MOUNT_DIR)/datafiles_{}'
      cd $(MOUNT_DIR)
      python3 $(WORK_DIR)/testdata/scripts/generate-parquet-files.py
      ls -l $(MOUNT_DIR)/*
    displayName: 'Generate data'

  - script: |
      md5sum $(MOUNT_DIR)/* > $(WORK_DIR)/md5sum_file_cache.txt
    displayName: 'Generate md5Sum with File-Cache'

  - script: |
      $(WORK_DIR)/blobfuse2 gen-test-config --config-file=$(WORK_DIR)/testdata/config/azure_key_xload.yaml --container-name=$(containerName) --temp-path=$(TEMP_DIR) --output-file=${{ parameters.config_file }}
    displayName: 'Create Config File for preload'
    env:
      STO_ACC_NAME: ${{ parameters.account_name }}
      STO_ACC_KEY: ${{ parameters.account_key }}
      STO_ACC_TYPE: ${{ parameters.account_type }}
      VERBOSE_LOG: ${{ parameters.verbose_log }}
    continueOnError: false


  - script:
      cat ${{ parameters.config_file }}
    displayName: 'Print preload config file'

  - template: 'mount.yml'
    parameters:
      prefix: ${{ parameters.idstring }}
      ro_mount: true
      mountStep:
        script: |
          $(WORK_DIR)/blobfuse2 mount $(MOUNT_DIR) --config-file=${{ parameters.config_file }} --default-working-dir=$(WORK_DIR) -o ro ${{ parameters.mnt_flags }}

  - script: |
      STATS_MANAGER=`ls $(WORK_DIR)/xload_stats_*.json`
      echo $STATS_MANAGER

      while true; do
        percent=$(jq -r '.. | .PercentCompleted? | select(.)' "$STATS_MANAGER" | tail -n 1)
        echo "PercentCompleted = $percent"

        if [[ "$percent" == "100" ]]; then
          echo "Processing complete!"
          break
        fi

        sleep 5
      done

      echo "----------------------------------------------"
      head -n 20 $STATS_MANAGER

      echo "----------------------------------------------"
      tail -n 100 $STATS_MANAGER
    displayName: 'Stats manager info'

  - script: |
      md5sum $(MOUNT_DIR)/* > $(WORK_DIR)/md5sum_xload.txt
    displayName: 'Generate md5Sum with preload'

  - script: |
      $(WORK_DIR)/blobfuse2 unmount all
    displayName: 'Unmount preload mount'

  - script: |
      echo "----------------------------------------------"
      cat $(WORK_DIR)/md5sum_xload.txt
      echo "----------------------------------------------"
      cat $(WORK_DIR)/md5sum_file_cache.txt
      echo "----------------------------------------------"
      diff $(WORK_DIR)/md5sum_xload.txt $(WORK_DIR)/md5sum_file_cache.txt
      if [ $? -ne 0 ]; then
        exit 1
      fi
    displayName: 'Compare md5sum'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: blobfuse2-logs.txt
      artifactName: 'blobfuse_block_cache.txt'
    condition: failed()

  - script: |
      tail -n 200 blobfuse2-logs.txt
    displayName: 'View Logs'
    condition: failed()
