# This step is responsible for the following behaviour:
# 1. Setup the VM all necessary packages.
# 2. Build blobfuse, bfusemon, install AzCLI
# 3. Create Temporary Containers in the storage account with choosing random string as name and also sets the global containerName paramter to this value.
#    Caution: The Deletion of the container is left to the caller of this file, caller must call the cleanup.yml with the parameter delete_containers: true
# 4. Run Unit Tests if specified by parameter skip_ut: false

parameters:
  - name: skip_msi
    type: string
    default: "true"
  - name: skip_azcli
    type: string
    default: "false"
  - name: skip_bfusemon
    type: boolean
    default: true
  - name: proxy_address
    type: string
    default: 'no_proxy'
  - name: skip_ut
    type: boolean
    default: false

steps:
  - script: |
      sudo rm -rf $(ROOT_DIR)
      sudo mkdir -p $(ROOT_DIR)
      sudo chown -R `whoami` $(ROOT_DIR)
      chmod 777 $(ROOT_DIR)
    displayName: 'Create Directory Structure'

  # Package manager installs for libfuse, 
  - template: 'package-install.yml'
    parameters:
      # distro: $(distro)
      # distro_version: $(distro_version)


  # If proxy is given, Install and setup the proxy, these tests can only be done on ubuntu
  - ${{ if ne(parameters.proxy_address, 'no_proxy') }}:
    # Start Proxy
    - script: |
        sudo apt-get update --fix-missing
        sudo apt remove mitmproxy -y
        sudo apt-get install python3-setuptools -y
        sudo apt install python3-pip -y
        sudo pip3 install werkzeug==2.3.7
        sudo pip3 install mitmproxy
        mitmdump -q -w proxy_logs.txt &
      displayName: 'Install & Start Proxy'

    # Configure Proxy cert & env
    - script: |
        sudo mkdir /usr/local/share/ca-certificates/extra
        sudo cp ~/.mitmproxy/mitmproxy-ca-cert.cer /usr/local/share/ca-certificates/extra/mitmproxy-ca-cert.crt
        sudo update-ca-certificates
        export https_proxy="127.0.0.1:8080"
        export http_proxy="127.0.0.1:8080"
      displayName: 'Configure Proxy'

  # Clone the repo
  - script: |
      git clone https://github.com/Azure/azure-storage-fuse
    displayName: 'Checkout Code'
    workingDirectory: $(ROOT_DIR)

  # Checkout the branch
  - script: |
      git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`
    displayName: 'Checkout Branch'
    workingDirectory: $(WORK_DIR)

  # Custom script to install Go-lang
  - task: ShellScript@2
    inputs:
      scriptPath: "$(WORK_DIR)/go_installer.sh"
      args: "$(ROOT_DIR)/"
    displayName: "GoTool Custom Setup"

  # Downloading Go dependency packages
  - task: Go@0
    inputs:
      command: 'get'
      arguments: '-d'
      workingDirectory: $(WORK_DIR)
    displayName: "Go Get"

  # Building blobfuse2 binary
  - task: Go@0
    inputs:
      command: 'build'
      arguments: "-tags $(tags) -o blobfuse2"
      workingDirectory: $(WORK_DIR)
    displayName: "Go Build"

  # Building bfusemon binary
  - task: Go@0
    inputs:
      command: 'build'
      arguments: "-tags $(tags) -o bfusemon ./tools/health-monitor/"
      workingDirectory: $(WORK_DIR)
    condition: eq('${{ parameters.skip_bfusemon }}', false)
    displayName: "Go Build bfusemon"
    
  #Verification of built binary
  - script: |
      sudo chmod +x $(WORK_DIR)/blobfuse2
      $(WORK_DIR)/blobfuse2 --version
    displayName: 'Test binary'
    env:
      working_directory: $(WORK_DIR)

  # Creating necessary directories
  - script: |
      sudo fusermount -u $(MOUNT_DIR)
      sudo fusermount3 -u $(MOUNT_DIR)
      rm -rf $(MOUNT_DIR)
      mkdir -p $(MOUNT_DIR)
      echo "Creating mount dir " $(MOUNT_DIR)
    displayName: 'Create Mount directory'
    env:
      mount_dir: $(MOUNT_DIR)

  - script: |
      mkdir -p $(TEMP_DIR)
      echo "Creating temp dir " $(TEMP_DIR)
    displayName: "Create Cache directory"
    env:
      temp_dir: $(TEMP_DIR)
      
  - script: |
      mkdir -p $(GOPATH)/src
      echo "Creating gopath " $(GOPATH)
    displayName: "Create Gopath"
    env:
      gopath: $(GOPATH)

  # Create Container in storage Account.
  # Include the template to generate the container name
  # This will set the value generated to the global containerName parameter for the job.
  - template: 'generate-container-name.yml'

  # Create a Container in the block storage account
  - template: 'container.yml'
    parameters:
      create_container: true
      account_type: "block"
      account_name: $(AZTEST_BLOCK_ACC_NAME)
      account_key: $(AZTEST_BLOCK_KEY)
      container_name: $(containerName)

  # Create a Container in the adls storage account
  - template: 'container.yml'
    parameters:
      create_container: true
      account_type: "adls"
      account_name: $(AZTEST_ADLS_ACC_NAME)
      account_key: $(AZTEST_ADLS_KEY)
      container_name: $(containerName)

  - script: |
      cnfFile=$HOME/azuretest.json
      echo $cnfFile
      touch $cnfFile
      echo "{" > $cnfFile
      echo "\"block-acct\"": "\"$(AZTEST_BLOCK_ACC_NAME)\"", >> $cnfFile
      echo "\"adls-acct\"": "\"$(AZTEST_ADLS_ACC_NAME)\"", >> $cnfFile
      echo "\"block-cont\"": "\"$(containerName)\"", >> $cnfFile
      echo "\"adls-cont\"": "\"$(containerName)\"", >> $cnfFile
      echo "\"block-key\"": "\"$(AZTEST_BLOCK_KEY)\"", >> $cnfFile
      echo "\"adls-key\"": "\"$(AZTEST_ADLS_KEY)\"", >> $cnfFile
      echo "\"block-sas\"": "\"$(AZTEST_BLOCK_SAS)\"", >> $cnfFile
      echo "\"block-cont-sas-ubn-18\"": "\"$(AZTEST_BLOCK_CONT_SAS_UBN_18)\"", >> $cnfFile
      echo "\"block-cont-sas-ubn-20\"": "\"$(AZTEST_BLOCK_CONT_SAS_UBN_20)\"", >> $cnfFile
      echo "\"adls-sas\"": "\"$(AZTEST_ADLS_SAS)\"", >> $cnfFile
      echo "\"msi-appid\"": "\"$(AZTEST_APP_ID)\"", >> $cnfFile
      echo "\"msi-resid\"": "\"$(AZTEST_RES_ID)\"", >> $cnfFile
      echo "\"msi-objid\"": "\"$(AZTEST_OBJ_ID)\"", >> $cnfFile
      echo "\"skip-msi\"": "${{ parameters.skip_msi }}", >> $cnfFile
      echo "\"skip-azcli\"": "${{ parameters.skip_azcli }}", >> $cnfFile
      echo "\"proxy-address\"": "\"${{ parameters.proxy_address }}\"" >> $cnfFile
      
      echo "}" >> $cnfFile
      cat $cnfFile
    displayName: "Create AzureTest Config"
    continueOnError: false
    workingDirectory: $(WORK_DIR)

  # azcli login
  - script: |
      az login --identity --username $(ACLI_BLOBFUSE_MSI_APP_ID)
    displayName: 'Azure CLI login'
    condition: eq('${{ parameters.skip_azcli }}', 'false')

  # Running unit tests
  - task: Go@0
    condition: eq('${{ parameters.skip_ut }}', 'false') 
    inputs:
      command: 'test'
      arguments: '-v -timeout=45m ./... --tags=unittest,$(tags) -coverprofile utcover.cov'
      workingDirectory: $(WORK_DIR)
    displayName: 'Unit tests'
    continueOnError: true     

  - task: Go@0
    condition: eq('${{ parameters.skip_ut }}', 'false') 
    inputs:
      command: 'tool'
      arguments: 'cover -func utcover.cov'
      workingDirectory: $(WORK_DIR)
    displayName: 'Code Coverage Report'
    continueOnError: true

  - script: |
      cp ./utcover.cov  $(Build.ArtifactStagingDirectory)/
      rm -rf ./utcover.cov
    condition: eq('${{ parameters.skip_ut }}', 'false')
    workingDirectory: $(WORK_DIR)
    displayName: "Save coverage report"