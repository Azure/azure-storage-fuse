# Pipeline to build artifact for gen1 compliant adlsgen1fuse

# Do not trigger this pipeline automatically
trigger: none
pr: none

stages:

# ---------------------- Build adlsgen1fuse here and copy binary to artifact ------------------------------
- stage: BuildAdlsGen1Fuse
  jobs:
  - job: AdlsGen1FuseBuild

    # Define on what all OS we want to run this Pipeline
    strategy:
      matrix:
        Ubuntu-18:
          container_image: 'ubuntu-18.04' 
          build_type: Release 
    pool:
      vmImage: $(container_image)

    variables:
    - group: NightlyBlobFuse
    - name: WORK_DIR
      value: "/home/vsts/work/"
    - name: ROOT_DIR
      value: "/home/vsts/work/BlobFuse-ADLSGen1"

    steps:
      - checkout: none

      # Install all dependencies
      # - script: |
      #     sudo apt-get update --fix-missing
      #     sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ -y
      #     sudo apt-get install libfuse-dev -y
      #   displayName: "Basic Tools Setup"

      # - script: |
      #     sudo apt update
      #     sudo apt upgrade
      #     sudo apt-get install pkg-config clang-9 -y
      #     curl https://sh.rustup.rs -sSf | sh -s -- -y
      #     rustup install nightly
      #     rustup install nightly-2021-09-01 â€‹ 
      #     rustup default nightly-2021-09-01-x86_64-unknown-linux-gnu
      #     sudo apt install llvm
      #     llvm-config --prefix
      #   displayName: "Rust Setup"

      - script: |
          git clone https://$(DEVOPS_UNAME):$(DEVOPS_PWD)@dev.azure.com/azstorage/_git/BlobFuse-ADLSGen1
        displayName: "Checkout code"
        workingDirectory: $(WORK_DIR)

      # As we have moved to main branch in gen1 repo this step is no more needed
      # Just keeping it here for future in case we need to go for a branch
      
      # Checkout branch
      - script: |
          git checkout binaryAdd
        displayName: "Checkout Branch"
        workingDirectory: $(ROOT_DIR)

      # List commits consumed for this build
      - script: |
          echo "Below commits were done in last 12 hours : " `date` 
          git --no-pager log --since="12 hours ago" --stat
        displayName: "List Commits"
        workingDirectory: $(ROOT_DIR)

      # Build adlsgen1fuse binary
      # - script: |
      #     cd call-datasetfuse-gen1
      #     { echo 'cargo-features = ["edition2021"]'; cat Cargo.toml; } > Cargo_new.toml
      #     mv Cargo_new.toml Cargo.toml
      #     cargo build --release
      #   displayName: "Build the binary"
      #   workingDirectory: $(ROOT_DIR)
      
      # - script: |
      #     cd call-datasetfuse-gen1
      #     cp ../target/release/call-gen1datasetfuse $(Build.ArtifactStagingDirectory)/adlsgen1fuse
      #   displayName: "Copy Artifact"
      #   workingDirectory: $(ROOT_DIR)

      - script: |
          cp adlsgen1fuse $(Build.ArtifactStagingDirectory)/adlsgen1fuse
        displayName: "Copy Artifact"
        workingDirectory: $(ROOT_DIR)
      
      # Publish the Artifacts
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'rustbin'
        displayName: 'Publish Artifacts for adlsgen1fuse'
        condition: succeeded()


# ---------------------- Build blobfuse and create a .deb package ------------------------------
- stage: BuildArtifact
  dependsOn: BuildAdlsGen1Fuse
  condition: succeeded('BuildAdlsGen1Fuse')

  jobs:
  - job: BlobfuseBuild

    # Define on what all OS we want to run this Pipeline
    strategy:
      matrix:
        Ubuntu-18:
          container_image: 'ubuntu-18.04' 
          build_type: Release 
    pool:
      vmImage: $(container_image)

    variables:
    - group: NightlyBlobFuse
    - name: WORK_DIR
      value: "/home/vsts/work/"
    - name: ROOT_DIR
      value: "/home/vsts/work/azure-storage-fuse"

    steps:
      - checkout: none

      # Install all dependencies
      - script: |
          sudo apt-get update --fix-missing
          sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ -y
        displayName: "Basic Tools Setup"

      # Install libfuse
      - script: |
          sudo apt-get install libfuse-dev -y
        displayName: "libFuse Setup"

      - script: |
          git clone https://github.com/Azure/azure-storage-fuse
        displayName: "Checkout code"
        workingDirectory: $(WORK_DIR)

      # Checkout branch
      - script: |
          echo $(Build.SourceBranch)
          echo "Going for checkout of " `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`  
          git checkout `echo $(Build.SourceBranch) | cut -d "/" -f 1,2 --complement`   
        displayName: "Checkout Branch"
        workingDirectory: $(ROOT_DIR)

      # List commits consumed for this build
      - script: |
          echo "Below commits were done in last 12 hours : " `date` 
          git --no-pager log --since="12 hours ago" --stat
        displayName: "List Commits"
        workingDirectory: $(ROOT_DIR)

      # ---- DO NOT CHANGE THE ORDER HERE. adlsgen1fuse binary shall on root before we build blobfuse ------
      # Copy adlsgen1fuse binary to blobfuse root
      - task: DownloadBuildArtifacts@0
        displayName: 'Download AdlsGen1Fuse Artifacts'
        inputs:
          artifactName: 'rustbin'
          downloadPath: $(ROOT_DIR)
      
      - script: |
          cp ./rustbin/* ./
          rm -rf ./rustbin/*
          chmod 777 ./adlsgen1fuse
          ls -l ./adlsgen1fuse
        displayName: "Prepare for packaging"
        workingDirectory: $(ROOT_DIR)
      #--------------------------------------------------------------------------------------------------------

      # Build the blobFuse binary
      - script: |
          sudo chmod +x build.sh
          . ./build.sh
        displayName: "Build BlobFuse"
        workingDirectory: $(ROOT_DIR)

      # Test the binary just to make sure it was built fine
      - script: |
          ./build/blobfuse --version
        displayName: "Test the binary"
        workingDirectory: $(ROOT_DIR)

      # Copy binaries required for the package
      - script: |
          cd ./build/
          make package
          mv ./blobfuse-*.*.*-Linux.deb ./`./blobfuse -v | tr ' ' '-'`-$(container_image)-x86_64.deb
          dpkg -c blobfuse*.deb
          cp ./blobfuse-*.*.*.deb  $(Build.ArtifactStagingDirectory)/
        displayName: "Build Artifacts"
        workingDirectory: $(ROOT_DIR)

      # Publish the Artifacts
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'blobfuse'
        displayName: 'Publish Artifacts for blobfuse $(container_image)'
        condition: succeeded()

